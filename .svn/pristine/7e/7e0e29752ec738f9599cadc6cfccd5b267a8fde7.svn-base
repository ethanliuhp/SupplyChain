using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Application.Business.Erp.SupplyChain.Client.Basic.Template;
using Application.Business.Erp.SupplyChain.Client.Basic.CommonClass;
using Application.Resource.PersonAndOrganization.SupplierManagement.RelateClass;
using Application.Resource.PersonAndOrganization.HumanResource.RelateClass;
using VirtualMachine.Component.Util;
using NHibernate.Criterion;
using Application.Business.Erp.SupplyChain.SupplyManage.DemandMasterPlanManage.Domain;
using Application.Business.Erp.SupplyChain.Client.SupplyMng;
using Application.Business.Erp.SupplyChain.SettlementManagement.ExpensesSettleMng.Domain;
using Application.Business.Erp.SupplyChain.Client.CostManagement.WBS.GWBS;
using Application.Business.Erp.SupplyChain.CostManagement.WBS.Domain;
using Application.Business.Erp.SupplyChain.Basic.Domain;
using System.Collections;
using VirtualMachine.Patterns.BusinessEssence.Domain;
using VirtualMachine.Core;
using VirtualMachine.Component.WinControls.CommonForm.FlashScreenMng;
using Application.Business.Erp.SupplyChain.Client.CostManagement.CostItemMng.CostAccountSubjectMng;
using Application.Business.Erp.SupplyChain.CostManagement.CostItemMng.Domain;

namespace Application.Business.Erp.SupplyChain.Client.SettlementManagement.ExpensesSettleMng
{
    public partial class VExpensesSettleQuery : TBasicDataView
    {
        private MExpensesSettleMng model = new MExpensesSettleMng();
        private bool IsSelectParts = true;
        public VExpensesSettleQuery()
        {
            InitializeComponent();
            InitEvent();
            InitData();
        }        

        private void InitData()
        {
            ConstObject.TheLogin.LoginDate.AddDays(-7);
            this.dtpDateEnd.Value = ConstObject.TheLogin.LoginDate;
            this.dtpDateBeginBill.Value = ConstObject.TheLogin.LoginDate.AddDays(-7);
            this.dtpDateEndBill.Value = ConstObject.TheLogin.LoginDate;
            pnlFloor.Paint += new PaintEventHandler(pnlFloor_Paint);
            btnAll.Checked = true;
        }

        void pnlFloor_Paint(object sender, PaintEventArgs e)
        {
            btnSearch.Focus();
        }       

        private void InitEvent()
        {
            this.btnExcel.Click += new EventHandler(btnExcel_Click);
            this.btnSearch.Click += new EventHandler(btnSearch_Click);
            this.btnSearchBill.Click += new EventHandler(btnSearchBill_Click);
            this.btnSelect.Click += new EventHandler(btnSelect_Click);
            this.btnSelectBill.Click += new EventHandler(btnSelectBill_Click);
            dgMaster.SelectionChanged += new EventHandler(dgMaster_SelectionChanged);
            dgDetail.CellContentClick += new DataGridViewCellEventHandler(dgDetail_CellContentClick);
            dgDetail.CellDoubleClick += new DataGridViewCellEventHandler(dgDetail_CellDoubleClick);
            this.btnSelectCostSubject.Click += new EventHandler(btnSelectSubject_Click);
 
        }

        //科目
        void btnSelectSubject_Click(object sender, EventArgs e)
        {
            VSelectCostAccountSubject frm = new VSelectCostAccountSubject(new MCostAccountSubject());
            frm.ShowDialog();
            CostAccountSubject cost = frm.SelectAccountSubject;
            if (cost != null)
            {
                this.txtCostSubject.Text = cost.Name;
                this.txtCostSubject.Tag = cost;
          }  
        }

        void dgDetail_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex > -1 && e.ColumnIndex > -1)
            {
                string billId = dgDetail.Rows[e.RowIndex].Tag as string;
                if (ClientUtil.ToString(billId) != "")
                {
                    VExpensesSettleMng vOrder = new VExpensesSettleMng();
                    vOrder.Start(billId);
                    vOrder.ShowDialog();
                }
            }
        }
        //明细显示查找工程任务
        void btnSelect_Click(object sender, EventArgs e)
        {
            VSelectGWBSTree_OnlyOne frm = new VSelectGWBSTree_OnlyOne(new MGWBSTree());
            frm.IsTreeSelect = true;

            frm.IsCheck = IsSelectParts;
            frm.IsRootNode = IsSelectParts;
            frm.ShowDialog();
            if (frm.SelectResult.Count > 0)
            {
                if (IsSelectParts)
                {
                    GWBSTree task = null;
                    string sUsePartName = string.Empty;
                    IList list = new ArrayList();
                    foreach (TreeNode oNode in frm.SelectResult)
                    {
                        task = oNode.Tag as GWBSTree;
                        if (task != null)
                        {
                            if (!string.IsNullOrEmpty(sUsePartName))
                            {
                                sUsePartName += " | " + task.Name;

                            }
                            else
                            {
                                sUsePartName = task.Name;
                            }
                            list.Add(task);
                        }
                    }
                    this.txtProject.Text = sUsePartName;
                    this.txtProject.Tag = list;
                }
                else
                {
                    TreeNode root = frm.SelectResult[0];
                    GWBSTree task = root.Tag as GWBSTree;
                    if (task != null)
                    {
                        this.txtProject.Text = task.Name;
                        this.txtProject.Tag = task;

                    }
                }

            }

        }

        void dgDetail_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            DataGridViewCell dgvCell = dgDetail[e.ColumnIndex, e.RowIndex];
            if (dgvCell.Value == null || string.IsNullOrEmpty(dgvCell.Value.ToString())) return;
            if (dgvCell.OwningColumn.Name == colCode.Name)
            {
                ExpensesSettleMaster master = model.ExpensesSettleSrv.GetExpensesSettleByCode(dgvCell.Value.ToString());
                VExpensesSettleMng vmro = new VExpensesSettleMng();
                vmro.CurBillMaster = master;
                vmro.Preview();
            }
        }

        void btnExcel_Click(object sender, EventArgs e)
        {
            Application.Business.Erp.SupplyChain.Client.Basic.CommonClass.StaticMethod.ExcelClass.SaveDataGridViewToExcel(this.dgDetail, true);
        }
        /// <summary>
        /// 明细查询按钮事件
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void btnSearch_Click(object sender, EventArgs e)
        {
            try
            {
                #region 查询条件处理
                FlashScreen.Show("正在查询信息......");
                string condition = "";
                //单据号
                if (this.txtCodeBegin.Text != "")
                {
                    condition = condition + "and t1.Code like '%" + this.txtCodeBegin.Text + "%'";//模糊查询
                }
                if (this.btnYes.Checked)
                {
                    condition += "and t1.monthlysettlment is not null ";
                }
                if (this.btnNo.Checked)
                {
                    condition += "and t1.monthlysettlment is null ";
                }
                //业务日期
                if (StaticMethod.IsUseSQLServer())
                {
                    condition += " and t1.CreateDate>='" + dtpDateBegin.Value.Date.ToShortDateString() + "' and t1.CreateDate<'" + dtpDateEnd.Value.AddDays(1).Date.ToShortDateString() + "'";
                }
                else
                {
                    condition += " and t1.CreateDate>=to_date('" + dtpDateBegin.Value.Date.ToShortDateString() + "','yyyy-mm-dd') and t1.CreateDate<to_date('" + dtpDateEnd.Value.AddDays(1).Date.ToShortDateString() + "','yyyy-mm-dd')";
                }
                //制单人
                if (!txtCreatePerson.Text.Trim().Equals("") && txtCreatePerson.Result != null && txtCreatePerson.Result.Count > 0)
                {
                    condition += " and t1.CreatePerson='" + (txtCreatePerson.Result[0] as PersonInfo).Id + "'";
                }
                //工程任务
                if (txtProject.Text != "")
                {
                    condition += "and t2.ProjectTaskName = '" + txtProject.Text + "'";
                }
                //物资
                if (!txtMaterial.Text.Trim().Equals("") && txtMaterial.Result != null)
                {
                    condition = condition + " and t2.MaterialName='" + txtMaterial.Text + "'";
                    //}
                    //if (txtMaterialCategory.Text != "")
                    //{
                    //    condition += "and t2.MaterialCategoryName = '" + txtMaterialCategory.Text + "'";
                    //}
                }
                    //科目
                    if (txtCostSubject.Text != "")
                    {
                        condition = condition + " and t2.AccountCostName='" + txtCostSubject.Text + "'";
                    }

                    CurrentProjectInfo projectInfo = StaticMethod.GetProjectInfo();
                    condition += "and t1.ProjectId = '" + projectInfo.Id + "'";
                #endregion
                    DataSet dataSet = model.ExpensesSettleSrv.ExpensesSettleQuery(condition);
                    this.dgDetail.Rows.Clear();

                    DataTable dataTable = dataSet.Tables[0];
                    //if (dataTable == null || dataTable.Rows.Count == 0) return;
                    decimal sumQuantity = 0;
                    decimal sumMoney = 0;
                    foreach (DataRow dataRow in dataTable.Rows)
                    {
                        int rowIndex = this.dgDetail.Rows.Add();
                        dgDetail[colCode.Name, rowIndex].Value = dataRow["code"];

                        DataGridViewRow currRow = dgDetail.Rows[rowIndex];
                        currRow.Tag = ClientUtil.ToString(dataRow["id"]);

                        object objState = dataRow["State"];
                        if (objState != null)
                        {
                            dgDetail[colState.Name, rowIndex].Value = ClientUtil.GetDocStateName(int.Parse(objState.ToString()));
                        }
                        //colMaterialType
                        dgDetail[colAccountSubject.Name, rowIndex].Value = dataRow["AccountCostName"].ToString();
                        dgDetail[colCostName.Name, rowIndex].Value = dataRow["CostName"].ToString();
                        dgDetail[colCreateMonth.Name, rowIndex].Value = dataRow["CreateMonth"].ToString();
                        dgDetail[colCreateYear.Name, rowIndex].Value = dataRow["CreateYear"].ToString();
                        dgDetail[colDescript.Name, rowIndex].Value = dataRow["Descript"].ToString();
                        dgDetail[colMaterialType.Name, rowIndex].Value = dataRow["MaterialName"].ToString();
                        dgDetail[colPrice.Name, rowIndex].Value = dataRow["Price"].ToString();
                        dgDetail[colProjectTask.Name, rowIndex].Value = dataRow["ProjectTaskName"].ToString();
                        dgDetail[colQuantity.Name, rowIndex].Value = dataRow["Quantity"].ToString();
                        dgDetail[colSumMoney.Name, rowIndex].Value = dataRow["Money"].ToString();
                        dgDetail[this.colMonthCost.Name, rowIndex].Value = ClientUtil.ToString(dataRow["monthlysettlment"]) == "" ? "否" : "是";
                        object quantity = dataRow["Money"];
                        if (quantity != null)
                        {
                            sumQuantity += decimal.Parse(quantity.ToString());
                        }
                        dgDetail[colRealOperationDate.Name, rowIndex].Value = Convert.ToDateTime(dataRow["RealOperationDate"]);
                        dgDetail[colCreateDate.Name, rowIndex].Value = Convert.ToDateTime(dataRow["CreateDate"]).ToShortDateString();
                        dgDetail[colCreatePerson.Name, rowIndex].Value = dataRow["CreatePersonName"].ToString();//制单人
                    }
                    FlashScreen.Close();
                    lblRecordTotal.Text = "共【" + dataTable.Rows.Count + "】条记录";
                    this.txtSumQuantity.Text = sumQuantity.ToString("#,###.####");
                    this.dgDetail.AutoResizeColumns(DataGridViewAutoSizeColumnsMode.DisplayedCells);
            
            }
            catch (Exception ex)
            {
                MessageBox.Show("查询数据出错。\n" + ex.Message);
            }
            finally
            {
                FlashScreen.Close();
            }
        }
        /// <summary>
        ///单据查询选择任务
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void btnSelectBill_Click(object sender, EventArgs e)
        {
            VSelectGWBSTree_OnlyOne frm = new VSelectGWBSTree_OnlyOne(new MGWBSTree());
            frm.IsTreeSelect = true;

            frm.IsCheck = IsSelectParts;
            frm.IsRootNode = IsSelectParts;
            frm.ShowDialog();
            if (frm.SelectResult.Count > 0)
            {
                if (IsSelectParts)
                {
                    GWBSTree task = null;
                    string sUsePartName = string.Empty;
                    IList list = new ArrayList();
                    foreach (TreeNode oNode in frm.SelectResult)
                    {
                        task = oNode.Tag as GWBSTree;
                        if (task != null)
                        {
                            if (!string.IsNullOrEmpty(sUsePartName))
                            {
                                sUsePartName += " | " + task.Name;

                            }
                            else
                            {
                                sUsePartName = task.Name;
                            }
                            list.Add(task);
                        }
                    }
                    this.txtProject.Text = sUsePartName;
                    this.txtProject.Tag = list;
                }
                else
                {
                    TreeNode root = frm.SelectResult[0];
                    GWBSTree task = root.Tag as GWBSTree;
                    if (task != null)
                    {
                        this.txtProject.Text = task.Name;
                        this.txtProject.Tag = task;

                    }
                }

            }
        }
        /// <summary>
        /// 主从表显示
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void btnSearchBill_Click(object sender, EventArgs e)
        {
            FlashScreen.Show("正在查询信息......");
            ObjectQuery objectQuery = new ObjectQuery();
            IList list = new ArrayList();
            CurrentProjectInfo projectInfo = StaticMethod.GetProjectInfo();
            objectQuery.AddCriterion(Expression.Eq("ProjectId", projectInfo.Id));

            //单据
            if (txtCodeBill.Text != "")
            {
                objectQuery.AddCriterion(Expression.Like("Code", txtCodeBill.Text, NHibernate.Criterion.MatchMode.Anywhere));
            }
            //业务时间
            objectQuery.AddCriterion(Expression.Ge("CreateDate", this.dtpDateBeginBill.Value.Date));
            objectQuery.AddCriterion(Expression.Lt("CreateDate", this.dtpDateEndBill.Value.AddDays(1).Date));
            //创建人
            if (txtCreatePersonBill.Text != "")
            {
                objectQuery.AddCriterion(Expression.Like("CreatePersonName", txtCreatePersonBill.Text, MatchMode.Anywhere));
            }
            ////工程任务
            //if (txtProjectBill.Text != "")
            //{
            //    objectQuery.AddCriterion(Expression.Eq("ProjectTaskName", txtProjectBill.Text));
            //    //objectQuery.AddCriterion(Expression.Eq("ProjectTaskName", txtProjectBill.Tag as SubContractProject));
            //}
            ////物资分类
            //if (txtMaterialCategoryBill.Text != "")
            //{
            //    objectQuery.AddCriterion(Expression.Like("materialsyscode", txtMaterialCategoryBill.Text, MatchMode.Anywhere));
            //}
            //会计月
            if (txtAccountMonthBill.Text != "")
            {
                objectQuery.AddCriterion(Expression.Eq("CreateMonth", ClientUtil.ToInt(txtAccountMonthBill.Text)));
            }
            //会计年
            if (txtAccountYearBill.Text != "")
            {
                objectQuery.AddCriterion(Expression.Sql("to_char(CreateYear) like '%" + txtAccountYearBill.Text + "'"));
            }
            ////状态
            //if (comMngType.Text != "")
            //{
            //    System.Web.UI.WebControls.ListItem li = comMngType.SelectedItem as System.Web.UI.WebControls.ListItem;
            //    int values = ClientUtil.ToInt(li.Value);
            //    //objectQuery.AddCriterion(Expression.Eq("DocState", (DocumentState)values));
            //}
            //else
            //{
            //    objectQuery.AddCriterion(Expression.Not(Expression.Eq("DocState", DocumentState.Edit)));//单据状态为非编辑状态的才能查询出来
            //}
            try
            {
                list = model.ExpensesSettleSrv.GetExpensesSettle(objectQuery);
                dgDetail.Rows.Clear();
                dgMaster.Rows.Clear();
                dgDetailBill.Rows.Clear();
                ShowMasterList(list);
                FlashScreen.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show("查询数据出错。\n" + ex.Message);
            }
            finally
            {
                FlashScreen.Close();
            }
        }
        /// <summary>
        /// 显示主表
        /// </summary>
        /// <param name="masterList"></param>
        private void ShowMasterList(IList masterList)
        {
            dgMaster.Rows.Clear();
            dgDetail.Rows.Clear();
            if (masterList == null || masterList.Count == 0) return;
            decimal sumQuantitys = 0;
            foreach (ExpensesSettleMaster master in masterList)
            {
                int rowIndex = dgMaster.Rows.Add();
                decimal sumQuantity = 0;
                foreach (ExpensesSettleDetail dtl in master.Details)
                {
                    object quantity = dtl.Money;
                    if (quantity != null)
                    {
                        sumQuantity += decimal.Parse(quantity.ToString());
                    }
                }
                dgMaster[colSummaryMoney.Name, rowIndex].Value = sumQuantity.ToString();
                object quantitys = sumQuantity.ToString();
                if (quantitys != null)
                {
                    sumQuantitys += decimal.Parse(quantitys.ToString());
                }
                dgMaster.Rows[rowIndex].Tag = master;
                dgMaster[colCodeBill.Name, rowIndex].Value = master.Code;
                dgMaster[colCreateYearBill.Name, rowIndex].Value = master.CreateYear;   //会计年
                dgMaster[colCreateMonthBill.Name, rowIndex].Value = master.CreateMonth;   //会计月
                dgMaster[colCreatePersonBill.Name, rowIndex].Value = master.CreatePersonName;//制单人
                dgMaster[colRealOperationDateBill.Name, rowIndex].Value = master.RealOperationDate.ToShortDateString();//制单日期
                dgMaster[colCreateDateBill.Name, rowIndex].Value = master.CreateDate.ToShortDateString();//业务日期
                //状态
                //object objState = ;
                //if (objState != null)
                //{
                dgMaster[colStateBill.Name, rowIndex].Value = ClientUtil.GetDocStateName(master.DocState);
                //}

            }
            lblRecordTotalBill.Text = "共【" + dgMaster.Rows.Count + "】条记录";
            this.txtSumQuantityBill.Text = sumQuantitys.ToString("#,###.####");
            dgMaster.CurrentCell = dgMaster[1, 0];
            dgMaster_SelectionChanged(dgMaster, new EventArgs());
        }
        /// <summary>
        /// 主表变化，明细同步变化
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void dgMaster_SelectionChanged(object sender, EventArgs e)
        {
            dgDetailBill.Rows.Clear();
            ExpensesSettleMaster master = dgMaster.CurrentRow.Tag as ExpensesSettleMaster;
            if (master == null) return;
            //dgDetail.Rows[rowIndex].Tag = dtl;
            foreach (ExpensesSettleDetail dtl in master.Details)
            {
                int rowIndex = dgDetailBill.Rows.Add();
                dgDetailBill[colProjectTaskBill.Name, rowIndex].Value = dtl.ProjectTaskName;          //工程任务名称
                dgDetailBill[colAccountSubjectBill.Name, rowIndex].Value = dtl.AccountCostName;                               //成本核算科目
                dgDetailBill[colMaterialTypeBill.Name, rowIndex].Value = dtl.MaterialName;                               //物资类型
                dgDetailBill[colCostNameBill.Name, rowIndex].Value = dtl.CostName;                               //费用名称
                dgDetailBill[colQuantityBill.Name, rowIndex].Value = dtl.Quantity;                                        //数量
                dgDetailBill[colPriceBill.Name, rowIndex].Value = dtl.Price;                                           //单价
                dgDetailBill[colSumMoneyBill.Name, rowIndex].Value = dtl.Money;                       //金额  
                dgDetailBill[colDescriptBill.Name, rowIndex].Value = dtl.Descript;                            //备注             
            }
            
        }
    }
}
