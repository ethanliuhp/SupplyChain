using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using NHibernate.Criterion;
using Application.Business.Erp.SupplyChain.Client.Basic.Template;
using VirtualMachine.Component.WinMVC.generic;
using Application.Business.Erp.SupplyChain.MoneyManage.FinanceMultData.Domain;
using Application.Business.Erp.SupplyChain.Client.Basic.CommonClass;
using Application.Business.Erp.SupplyChain.Basic.Domain;
using VirtualMachine.Component.Util;
using Application.Resource.PersonAndOrganization.HumanResource.RelateClass;
using VirtualMachine.Patterns.BusinessEssence.Domain;
using Application.Resource.PersonAndOrganization.OrganizationResource.RelateClass;
using VirtualMachine.Component.WinControls.Controls;
using VirtualMachine.Core;
using System.Collections;
using Application.Business.Erp.SupplyChain.FinanceMng.Domain;
using Application.Business.Erp.Financial.Client.FinanceUI.InitialSetting.AccountTitleUI;
using Application.Resource.PersonAndOrganization.SupplierManagement.RelateClass;

namespace Application.Business.Erp.SupplyChain.Client.MoneyManage.FinanceMultData
{
    public partial class VPaymentInvoice : TMasterDetailView
    {
        private  MFinanceMultData model = new MFinanceMultData();
        private IList acctTitleList = new ArrayList();
        private MAccountTitle titleModel = new MAccountTitle();
        private  PaymentInvoice curBillMaster;
        private CurrentProjectInfo projectInfo;
        Control[] arrControl;

        public VPaymentInvoice()
        {
            InitializeComponent();
            arrControl = new Control[]  {
                this.txtInvoiceCode, this.txtInvoiceNo,this.txtInvoiceMoney,this.cmbIfDeduction};
            InitData();
            InitEvent();
        }

        public void InitData()
        {
            projectInfo = StaticMethod.GetProjectInfo();
            //获取付款类别的会计科目
            ObjectQuery oq = new ObjectQuery();
            //oq.AddCriterion(Expression.Eq("BusinessFlag", "02"));
            acctTitleList = titleModel.AccountTitleTreeSvr.GetAccountTitleTreeByQuery(oq);
            IList paymentList = new ArrayList();
            AccountTitleTree titleTree = new AccountTitleTree();
            foreach (AccountTitleTree title in acctTitleList)
            {
                if (title.Code == "220202" || title.Code == "220203" || title.Code == "220204" || title.Code == "220205" || title.Code == "220299"
                    || title.Code == "22020801" || title.Code == "22020802" || title.Code == "22020803" || title.Code == "22020804"
                    || title.Code == "54010105" || title.Code == "6602" || title.Code == "54010106")
                {
                    paymentList.Add(title);
                }
            }
            paymentList.Insert(0, titleTree);
            this.cmbPaymentType.DataSource = paymentList;
            cmbPaymentType.DisplayMember = "Name";
            cmbPaymentType.ValueMember = "Id";

            this.cmbPaymentType.DropDownHeight = 200;

            this.transferType.Items.AddRange(new object[] { "简易计税项目", "非应税项目或免税项目", "集体福利或个人消费", "其他" });
        }

        void InitEvent()
        {
            if (arrControl != null && arrControl.Length > 0)
            {
                this.KeyPreview = true;
            }
            foreach (Control oControl in arrControl)
            {
                if (oControl is CustomEdit)
                {
                    (oControl as CustomEdit).EnterToTab = true;
                    //(oControl as CustomEdit).KeyPress += new KeyPressEventHandler(Control_KeyPress);
                }
            }
        }

        /// <summary>
        /// 刷新控件(窗体中的控件)
        /// </summary>
        /// <param name="state"></param>
        public override void RefreshControls(MainViewState state)
        {
            base.RefreshControls(state);

            //控制自身控件
            if (ViewState == MainViewState.AddNew || ViewState == MainViewState.Modify)
            {
                ObjectLock.Unlock(pnlFloor, true);
            }
            else
            {
                ObjectLock.Lock(pnlFloor, true);
            }
            //永久锁定
            object[] os = new object[] { txtCode, txtCreatePerson };
            ObjectLock.Lock(os);
        }

        private void ModelToView()
        {
            try
            {
                txtCode.Text = curBillMaster.Code;
                this.txtCreateDate.Text = curBillMaster.RealOperationDate.ToShortDateString();
                if (curBillMaster.CreateDate > ClientUtil.ToDateTime("2000-01-01"))
                {
                    dtpInvoiceDate.Value = curBillMaster.CreateDate;
                }
                txtDescript.Text = curBillMaster.Descript;
                txtCreatePerson.Tag = curBillMaster.CreatePerson;
                txtCreatePerson.Text = curBillMaster.CreatePersonName;
                txtInvoiceCode.Text = curBillMaster.InvoiceCode;
                txtInvoiceNo.Text = curBillMaster.InvoiceNo;
                this.txtInvoiceMoney.Text = curBillMaster.SumMoney.ToString("N4");
                cmbIfDeduction.SelectedText = curBillMaster.IfDeduction;
                cmbIfDeduction.SelectedItem = curBillMaster.IfDeduction;
                if (curBillMaster.AccountTitleID != null)
                {
                    this.cmbPaymentType.SelectedValue = curBillMaster.AccountTitleID;
                }
                else
                {
                    this.cmbPaymentType.SelectedValue = "";
                }
                if (curBillMaster.TheSupplierRelationInfo != null)
                {
                    this.txtSupply.Result.Clear();
                    txtSupply.Tag = curBillMaster.TheSupplierName;
                    txtSupply.Result.Add(curBillMaster.TheSupplierRelationInfo);
                    txtSupply.Value = curBillMaster.TheSupplierName;
                }

                cmbInvoiceType.Text = curBillMaster.InvoiceType;
                cmbSupplierScale.Text = curBillMaster.SupplierScale;
                txtTaxRate.Text = curBillMaster.TaxRate.ToString();
                txtTaxMoney.Text = curBillMaster.TaxMoney.ToString();

                if (!ClientUtil.isEmpty(curBillMaster.TransferType))
                {
                    this.transferType.SelectedValue = curBillMaster.TransferType;
                }
                else 
                {
                    this.transferType.SelectedValue = "";
                }
                txtTransferTax.Text = curBillMaster.TransferTax.ToString("N4");
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        private bool ViewToModel()
        {
            if (!ValidView()) return false;
            try
            {
                curBillMaster.Descript = ClientUtil.ToString(this.txtDescript.Text);
                if (this.txtSupply.Result.Count > 0)
                {
                    curBillMaster.TheSupplierRelationInfo = this.txtSupply.Result[0] as SupplierRelationInfo;
                    curBillMaster.TheSupplierName = txtSupply.Text;
                }

                AccountTitleTree currAccountTitle = this.cmbPaymentType.SelectedItem as AccountTitleTree;
                curBillMaster.AccountTitleID = currAccountTitle.Id;
                curBillMaster.AccountTitleName = currAccountTitle.Name;
                curBillMaster.AccountTitleCode = currAccountTitle.Code;
                curBillMaster.AccountTitleSyscode = currAccountTitle.SysCode;

                curBillMaster.InvoiceCode = ClientUtil.ToString(this.txtInvoiceCode.Text);
                curBillMaster.InvoiceNo = ClientUtil.ToString(this.txtInvoiceNo.Text);
                curBillMaster.CreateDate = ClientUtil.ToDateTime(this.dtpInvoiceDate.Value.ToShortDateString());
                curBillMaster.SumMoney = ClientUtil.ToDecimal(this.txtInvoiceMoney.Text);
                curBillMaster.IfDeduction = ClientUtil.ToString(this.cmbIfDeduction.Text);

                curBillMaster.SupplierScale = cmbSupplierScale.Text;
                curBillMaster.InvoiceType = cmbInvoiceType.Text;
                curBillMaster.TaxRate = ClientUtil.ToDecimal(txtTaxRate.Text);
                curBillMaster.TaxMoney = ClientUtil.ToDecimal(txtTaxMoney.Text);
                curBillMaster.TransferType = ClientUtil.ToString(this.transferType.Text);
                curBillMaster.TransferTax = ClientUtil.ToDecimal(this.txtTransferTax.Text);

                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据错误：" + ExceptionUtil.ExceptionMessage(e));
                return false;
            }
        }

        public bool ValidView()
        {
            if (ClientUtil.ToString(this.cmbSupplierScale.Text) == "")
            {
                MessageBox.Show("请选择纳税人规模！");
                cmbSupplierScale.Focus();
                return false;
            }

            if (ClientUtil.ToString(this.cmbPaymentType.Text) == "")
            {
                MessageBox.Show("请选择款项类别！");
                cmbPaymentType.Focus();
                return false;
            }
            if (string.IsNullOrEmpty(cmbInvoiceType.Text))
            {
                MessageBox.Show("请选择发票类别！");
                cmbInvoiceType.Focus();
                return false;
            }
            if (ClientUtil.ToString(this.txtInvoiceCode.Text) == "")
            {
                MessageBox.Show("请输入发票代码！");
                txtInvoiceCode.Focus();
                return false;
            }
            if (ClientUtil.ToString(this.txtInvoiceNo.Text) == "")
            {
                MessageBox.Show("请输入发票号码！");
                txtInvoiceNo.Focus();
                return false;
            }
            var id = curBillMaster == null ? null : curBillMaster.Id;
            if (model.FinanceMultDataSrv.IsPaymentInvoiceNoUsed(txtInvoiceNo.Text.Trim(), id))
            {
                string mes = "发票号【" + txtInvoiceNo.Text.Trim() + "】已经被使用，请重新输入";
                errorProvider1.SetError(txtInvoiceNo, mes);
                txtInvoiceNo.Focus();
                MessageBox.Show(mes);
                return false;
            }
            if (ClientUtil.ToDecimal(this.txtInvoiceMoney.Text) == 0)
            {
                MessageBox.Show("请输入发票金额！");
                txtInvoiceMoney.Focus();
                return false;
            }
            var taxRate = ClientUtil.ToDecimal(txtTaxRate.Text);
            if (taxRate < 0 || taxRate > 100)
            {
                MessageBox.Show("请输入0-100之间的税率！");
                txtTaxRate.Focus();
                return false;
            }
            if (ClientUtil.ToDecimal(txtTaxMoney.Text) == 0)
            {
                MessageBox.Show("请输入税金！");
                txtTaxMoney.Focus();
                return false;
            }

            errorProvider1.Clear();
            return true;
        }

        #region 固定代码
        /// <summary>
        /// 启动本窗体,(设置状态或重新加载已有的数据)
        /// </summary>
        /// <param name="code">窗体Caption</param>
        public void Start(string Id)
        {
            try
            {
                if (Id == "空")
                    RefreshState(MainViewState.Initialize);
                else
                {
                    curBillMaster = model.FinanceMultDataSrv.GetPaymentInvoiceById(Id);
                    ModelToView();
                    RefreshState(MainViewState.Browser);

                    //判断是否为制单人
                    PersonInfo pi = this.txtCreatePerson.Tag as PersonInfo;
                    string perid = ConstObject.LoginPersonInfo.Id;
                    if (pi != null && !pi.Id.Equals(perid))
                    {
                        RefreshStateByQuery();
                    }
                }
            }
            catch (Exception e)
            {
                MessageBox.Show("视图启动出错：" + ExceptionUtil.ExceptionMessage(e));
            }
        }

        /// <summary>
        /// 刷新状态(按钮状态)
        /// </summary>
        /// <param name="state"></param>
        public override void RefreshState(MainViewState state)
        {
            base.RefreshState(state);
            //控制表格
            switch (state)
            {
                case MainViewState.AddNew:
                case MainViewState.Modify:
                    txtInvoiceCode.Enabled = true;
                    txtInvoiceNo.Enabled = true;
                    txtInvoiceMoney.Enabled = true;
                    txtDescript.Enabled = true;
                    break;
                case MainViewState.Initialize:
                case MainViewState.Browser:
                    txtInvoiceCode.Enabled = false;
                    txtInvoiceNo.Enabled = false;
                    txtInvoiceMoney.Enabled = false;
                    txtDescript.Enabled = false;
                    break;
                default:
                    break;
            }
        }
        #endregion

        #region 增删改查
        /// <summary>
        /// 新建
        /// </summary>
        /// <returns></returns>
        public override bool NewView()
        {
            try
            {
                base.NewView();
                ClearView();

                this.curBillMaster = new PaymentInvoice();
                curBillMaster.CreatePerson = ConstObject.LoginPersonInfo;
                curBillMaster.CreatePersonName = ConstObject.LoginPersonInfo.Name;
                curBillMaster.CreateYear = ConstObject.LoginDate.Year;
                curBillMaster.CreateMonth = ConstObject.LoginDate.Month;
                curBillMaster.OperOrgInfoName = ConstObject.TheLogin.TheOperationOrgInfo.Name;//登录人姓名
                curBillMaster.OperOrgInfo = ConstObject.TheLogin.TheOperationOrgInfo;
                curBillMaster.OpgSysCode = ConstObject.TheLogin.TheOperationOrgInfo.SysCode;
                curBillMaster.HandlePerson = ConstObject.LoginPersonInfo;
                curBillMaster.HandlePersonName = ConstObject.LoginPersonInfo.Name;
                curBillMaster.DocState = DocumentState.Edit;
                //制单人
                txtCreatePerson.Tag = ConstObject.LoginPersonInfo;
                txtCreatePerson.Text = ConstObject.LoginPersonInfo.Name;
                //责任人
                if (projectInfo != null && projectInfo.Code != CommonUtil.CompanyProjectCode)
                {
                    curBillMaster.ProjectId = projectInfo.Id;
                    curBillMaster.ProjectName = projectInfo.Name;
                }
                this.ModelToView();
            }
            catch (Exception ee)
            {
                MessageBox.Show(ExceptionUtil.ExceptionMessage(ee), "提示", MessageBoxButtons.OK, MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                return false;
            }
            return true;
        }

        /// <summary>
        /// 修改
        /// </summary>
        /// <returns></returns>
        public override bool ModifyView()
        {
            if (curBillMaster.DocState == DocumentState.Edit || curBillMaster.DocState == DocumentState.Valid)
            {
                base.ModifyView();
                curBillMaster = model.FinanceMultDataSrv.GetPaymentInvoiceById(curBillMaster.Id);
                ModelToView();
                return true;
            }
            string message = "此单状态为【{0}】，不能修改！";
            message = string.Format(message, ClientUtil.GetDocStateName(curBillMaster.DocState));
            MessageBox.Show(message);
            return false;
        }

        /// <summary>
        /// 提交
        /// </summary>
        /// <returns></returns>
        public override bool SubmitView()
        {
            try
            {
                this.txtCode.Focus();
                if (!ViewToModel()) return false;
                curBillMaster.DocState = DocumentState.InExecute;
                bool IsNew = (string.IsNullOrEmpty(curBillMaster.Id) ? true : false);
                curBillMaster = model.FinanceMultDataSrv.SavePaymentInvoice(curBillMaster) as PaymentInvoice;
                txtCode.Text = curBillMaster.Code;
                //更新Caption
                this.ViewCaption = ViewName + "-" + txtCode.Text;
                WriteLog(IsNew);
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据保存错误：" + ExceptionUtil.ExceptionMessage(e));
                curBillMaster.DocState = DocumentState.Edit;
            }
            return false;
        }

        /// <summary>
        /// 保存
        /// </summary>
        /// <returns></returns>
        public override bool SaveView()
        {
            try
            {
                if (!ViewToModel()) return false;
                bool flag = false;
                curBillMaster.DocState = DocumentState.InExecute;
                curBillMaster = model.FinanceMultDataSrv.SavePaymentInvoice(curBillMaster) as PaymentInvoice;
                txtCode.Text = curBillMaster.Code;
                //更新Caption
                WriteLog(flag);

                this.ViewCaption = ViewName + "-" + txtCode.Text;
                MessageBox.Show("保存成功！");
                ModelToView();
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据保存错误：" + ExceptionUtil.ExceptionMessage(e));
            }
            return false;
        }

        /// <summary>
        /// 删除
        /// </summary>
        /// <returns></returns>
        public override bool DeleteView()
        {
            try
            {
                curBillMaster = model.FinanceMultDataSrv.GetPaymentInvoiceById(curBillMaster.Id);
                if (curBillMaster.DocState == DocumentState.Valid || curBillMaster.DocState == DocumentState.Edit)
                {
                    if (!model.FinanceMultDataSrv.DeletePaymentInvoice(curBillMaster)) return false;
                    LogData log = new LogData();
                    log.BillId = curBillMaster.Id;
                    log.BillType = "付款发票维护";
                    log.Code = curBillMaster.Code;
                    log.OperType = "删除";
                    log.Descript = "";
                    log.OperPerson = ConstObject.LoginPersonInfo.Name;
                    log.ProjectName = curBillMaster.ProjectName;
                    StaticMethod.InsertLogData(log);
                    ClearView();
                    MessageBox.Show("删除成功！");
                    return true;
                }
                MessageBox.Show("此单状态为【" + ClientUtil.GetDocStateName(curBillMaster.DocState) + "】，不能删除！");
                return false;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据删除错误：" + ExceptionUtil.ExceptionMessage(e));
                return false;
            }
        }

        //清空数据
        private void ClearView()
        {
            ClearControl(pnlHeader);
            ClearControl(pnlBody);
        }

        private void ClearControl(Control c)
        {
            foreach (Control cd in c.Controls)
            {
                ClearControl(cd);
            }
            //自定义控件清空
            if (c is CustomEdit || c is TextBox)
            {
                c.Tag = null;
                c.Text = "";
            }           
        }

        /// <summary>
        /// 撤销
        /// </summary>
        /// <returns></returns>
        public override bool CancelView()
        {
            try
            {
                switch (ViewState)
                {
                    case MainViewState.Modify:
                        //重新查询数据
                        curBillMaster = model.FinanceMultDataSrv.GetPaymentInvoiceById(curBillMaster.Id);
                        ModelToView();
                        break;
                    default:
                        ClearView();
                        break;
                }
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据撤销错误：" + ExceptionUtil.ExceptionMessage(e));
                return false;
            }
        }

        /// <summary>
        /// 刷新
        /// </summary>
        public override void RefreshView()
        {
            try
            {
                //重新获得当前对象的值
                curBillMaster = model.FinanceMultDataSrv.GetPaymentInvoiceById(curBillMaster.Id);
                //给界面赋值
                ModelToView();
            }
            catch (Exception e)
            {
                MessageBox.Show("数据刷新错误：" + ExceptionUtil.ExceptionMessage(e));
            }
        }

        private void WriteLog(bool IsNew)
        {
            LogData log = new LogData();
            log.BillId = curBillMaster.Id;
            log.BillType = "付款发票维护";
            log.Code = curBillMaster.Code;
            log.Descript = "";
            log.OperPerson = ConstObject.LoginPersonInfo.Name;
            log.ProjectName = curBillMaster.ProjectName;
            if (IsNew)
            {
                log.OperType = "新增";
            }
            else
            {
                if (curBillMaster.DocState == DocumentState.InExecute)
                {
                    log.OperType = "提交"; 
                    
                }
                else
                {
                    log.OperType = "修改"; 
                }
            }
            StaticMethod.InsertLogData(log);
        }
        #endregion

        private void txtInvoiceNo_TextChanged(object sender, EventArgs e)
        {
            if(string.IsNullOrEmpty(txtInvoiceNo.Text.Trim()))
            {
                errorProvider1.Clear();
                return;
            }

            
        }
    }
}
