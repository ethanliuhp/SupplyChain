using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Application.Business.Erp.SupplyChain.Client.Basic.Template;
using Application.Business.Erp.SupplyChain.Client.Util;
using Application.Business.Erp.SupplyChain.Client.Basic.CommonClass;
using Application.Business.Erp.SupplyChain.Util;
using System.IO;
using Application.Resource.MaterialResource.Domain;
using Application.Resource.PersonAndOrganization.OrganizationResource.RelateClass;
using System.Collections;
using Application.Business.Erp.SupplyChain.Basic.Domain;
using FlexCell;
using Microsoft.Office.Interop.Excel;
using Application.Business.Erp.SupplyChain.CostManagement.CostMonthAccountMng.Domain;
using VirtualMachine.Core;
using NHibernate.Criterion;
using VirtualMachine.Component.Util;
using VirtualMachine.Component.WinControls.Controls;
using Application.Business.Erp.SupplyChain.Client.CostManagement.CostItemMng.CostAccountSubjectMng;
using Application.Business.Erp.SupplyChain.CostManagement.CostItemMng.Domain;
using VirtualMachine.Component.WinControls.CommonForm.FlashScreenMng;
using Application.Business.Erp.SupplyChain.CostManagement.WBS.Domain;
using Application.Business.Erp.SupplyChain.Client.CostManagement.WBS.GWBS;
using Application.Business.Erp.SupplyChain.Client.StockMng;
using Application.Business.Erp.SupplyChain.Client.CostManagement.SubContractBalanceMng;

namespace Application.Business.Erp.SupplyChain.Client.CostManagement.CostMonthAccount
{
    public partial class VCostMonthReportNew : TBasicDataView
    {
        private MCostMonthAccount model = new MCostMonthAccount();
        private MCostAccountSubject subject = new MCostAccountSubject();
        public MSubContractBalance subContractOperate = new MSubContractBalance();
        private CostMonthAccountBill costBill = new CostMonthAccountBill();
        private MStockMng stockModel = new MStockMng();
        private CurrentProjectInfo ProjectInfo;
        private List<CostAccountSubject> subjectList; //科目
        private bool ifZB = true;
        private const string SUBTOTAL = "小计";

        private List<CostMonthAccDtlConsume> allConsumes;
        private List<CostMonthAccDtlConsume> allTotalConsumes;

        public VCostMonthReportNew()
        {
            InitializeComponent();

            InitEvents();

            InitGrid();

            InitData();
        }

        private void InitData()
        {
            ProjectInfo = StaticMethod.GetProjectInfo();
            this.cmbProject.Enabled = false;
            cmbProject.Text = ProjectInfo.Name;
            IList list = stockModel.StockInSrv.GetFiscalYear();
            this.cmbYear.Items.Clear();
            foreach (int iYear in list)
            {
                this.cmbYear.Items.Insert(this.cmbYear.Items.Count, iYear);
                if (iYear == ConstObject.TheLogin.TheComponentPeriod.NowYear)
                {
                    this.cmbYear.SelectedItem = this.cmbYear.Items[this.cmbYear.Items.Count - 1];
                }
            }

            for (int i = 1; i < 13; i++)
            {
                this.cboFiscalMonth.Items.Add(i);
            }
            this.cboFiscalMonth.Text = ConstObject.TheLogin.TheComponentPeriod.NowMonth.ToString();
            string appName = System.Configuration.ConfigurationManager.AppSettings["AppName"];
            if (ClientUtil.ToString(appName).Contains("基础设施"))
            {
                ifZB = false;
            }

            GetWbsRootNode();

            GetAllSubject();
        }

        private void InitEvents()
        {
            btnQuery.Click += new EventHandler(btnQuery_Click);
            btnExcel.Click += new EventHandler(btnExcel_Click);
            this.btnSelectGWBS.Click += new EventHandler(btSelectGWBS_Click);
        }

        private void InitGrid()
        {
            foreach (TabPage tpage in tabCost.TabPages)
            {
                var grid = FindFlexGrid(tpage);
                if (grid != null)
                {
                    LoadFlexFile(string.Concat(grid.Tag, ".flx"), grid);
                }
            }
        }

        private CustomFlexGrid FindFlexGrid(TabPage tp)
        {
            foreach (var ct in tp.Controls)
            {
                if (ct is CustomFlexGrid)
                {
                    return ct as CustomFlexGrid;
                }
            }

            return null;
        }

        private void GetWbsRootNode()
        {
            if (ProjectInfo == null)
            {
                return;
            }

            ObjectQuery objectQuery = new ObjectQuery();
            objectQuery.AddCriterion(Expression.Eq("TheProjectGUID", ProjectInfo.Id));
            objectQuery.AddCriterion(Expression.IsNull("ParentNode"));

            IList list = subContractOperate.ObjectQuery(typeof (GWBSTree), objectQuery);
            IList taskList = new ArrayList();
            if (list == null || list.Count == 0)
            {
                txtAccountRootNode.Text = "";
                txtAccountRootNode.Tag = null;
            }
            else
            {
                GWBSTree tGwbs = (GWBSTree) list[0];
                taskList.Add(tGwbs.Id);
                txtAccountRootNode.Text = tGwbs.Name;
                txtAccountRootNode.Tag = taskList;
            }
        }

        private void GetAllSubject()
        {
            //载入科目
            ObjectQuery oq = new ObjectQuery();
            oq.AddOrder(Order.Asc("Code"));
            subjectList = subject.Mm.GetCostAccountSubjects(typeof (CostAccountSubject), oq)
                .OfType<CostAccountSubject>().ToList();
        }

        private void btSelectGWBS_Click(object sender, EventArgs e)
        {
            VSelectGWBSTree_OnlyOne frm = new VSelectGWBSTree_OnlyOne(new MGWBSTree());

            if (txtAccountRootNode.Tag != null)
            {
                frm.DefaultSelectedGWBS = txtAccountRootNode.Tag as GWBSTree;
            }
            frm.IsCheck = true; //是否有checkbox

            frm.IsRootNode = true; //这个参数是否只选择隶属关系的根节点
            frm.ShowDialog();
            if (frm.SelectResult.Count > 0)
            {
                IList taskList = new ArrayList();
                string taskStr = "";
                foreach (TreeNode node in frm.SelectResult)
                {
                    GWBSTree task = node.Tag as GWBSTree;
                    taskList.Add(task.Id);
                    taskStr += task.Name + "_";
                }
                TreeNode root = frm.SelectResult[0];

                txtAccountRootNode.Text = taskStr;
                txtAccountRootNode.Tag = taskList;
            }
        }

        private void btnExcel_Click(object sender, EventArgs e)
        {
            var saveDialg = new SaveFileDialog();
            saveDialg.FileName = cmbYear.Text + "年" + cboFiscalMonth.Text + "月项目" + cmbProject.Text + "月度成本分析表";
            saveDialg.Filter = "Excel文件(*.xls)|*.xls";
            if (saveDialg.ShowDialog() != DialogResult.OK)
            {
                return;
            }

            FlashScreen.Show("数据导出中，请稍等…");

            var deskFile = saveDialg.FileName;
            var tmpFile = System.IO.Path.Combine(System.IO.Path.GetTempPath(),
                                                 string.Concat(Guid.NewGuid().ToString(), ".xls"));
            foreach (TabPage tp in tabCost.TabPages)
            {
                var grid = FindFlexGrid(tp);
                if (grid == null)
                {
                    continue;
                }

                if (!System.IO.File.Exists(deskFile))
                {
                    grid.ExportToExcel(deskFile, tp.Text, true, true);
                }
                else
                {
                    grid.ExportToExcel(tmpFile, tp.Text, true, true);
                    grid.MergeExcel(deskFile, tmpFile, true);
                }
            }

            FlashScreen.Close();

            if (MessageBox.Show("导出成功，是否打开文件查看？", "打开确认", MessageBoxButtons.YesNo, MessageBoxIcon.Question) ==
                DialogResult.Yes)
            {
                System.Diagnostics.Process.Start(saveDialg.FileName);
            }
        }

        private void btnQuery_Click(object sender, EventArgs e)
        {
            if (ClientUtil.ToString(this.cmbYear.Text) == "")
            {
                MessageBox.Show("请输入会计年！");
                return;
            }
            if (ClientUtil.ToString(this.cboFiscalMonth.Text) == "")
            {
                MessageBox.Show("请输入会计月！");
                return;
            }

            FlashScreen.Show("正在统计月度成本核算报表...");
            try
            {

                //载入数据
                IList taskList = txtAccountRootNode.Tag as ArrayList;
                if (taskList == null)
                {
                    taskList = new ArrayList();
                }

                //ObjectQuery oq = new ObjectQuery();
                //oq.AddCriterion(Expression.Eq("ProjectId", ProjectInfo.Id));
                //oq.AddCriterion(Expression.Eq("Kjn", Convert.ToInt32(this.cmbYear.Text)));
                //oq.AddCriterion(Expression.Eq("Kjy", Convert.ToInt32(cboFiscalMonth.Text)));
                //IList list = model.CostMonthAccSrv.GetCostMonthAccountBill(oq);
                //if (list != null && list.Count > 0)
                //{
                //    costBill = model.CombCostMonthAccountBill(list);
                //}
                //else
                //{
                //    costBill = new CostMonthAccountBill();
                //}

                //costBill = model.TransCostMonthAccountBillNew(costBill, taskList, 1);
                //GetAllConsumes();

                allTotalConsumes = 
                    model.CostMonthAccSrv.GetRealCostConsume(ProjectInfo.Id,
                    taskList.OfType<string>().ToList(), ClientUtil.ToInt(cmbYear.Text), ClientUtil.ToInt(cboFiscalMonth.Text));

                InitGrid();

                LoadMaterialData();
                LoadMaterialDiffData();
                LoadMachineData();
                LoadSubcontractData();
                LoadLabourvData();
                LoadMeasuresData();
                LoadManagerData();
                LoadTimeData();
                LoadOtherData();
                LoadContractData();
                LoadTotalData();

                //设置外观
                CommonUtil.SetFlexGridFace(this.gdTotal);
                CommonUtil.SetFlexGridFace(this.gdSubcontrat);
                CommonUtil.SetFlexGridFace(this.gdMachine);
                CommonUtil.SetFlexGridFace(this.gdManager);
                CommonUtil.SetFlexGridFace(this.gdVisa);
                CommonUtil.SetFlexGridFace(this.gdLabour);
                CommonUtil.SetFlexGridFace(this.gdMeasures);
                CommonUtil.SetFlexGridFace(this.gdMaterial);
                CommonUtil.SetFlexGridFace(this.gdChange);
                CommonUtil.SetFlexGridFace(this.gdContract);
                CommonUtil.SetFlexGridFace(this.gdTime);
                CommonUtil.SetFlexGridFace(this.gdOther);
                CommonUtil.SetFlexGridFace(this.gdAmountPrice);
            }
            catch (Exception e1)
            {
                MessageBox.Show("查询月度成本分析数据失败：" + e1.Message);
            }
            finally
            {
                FlashScreen.Close();
            }
        }

        private void LoadFlexFile(string flxname, CustomFlexGrid grid)
        {
            ExploreFile eFile = new ExploreFile();
            string path = eFile.Path;
            if (eFile.IfExistFileInServer(flxname))
            {
                eFile.CreateTempleteFileFromServer(flxname);

                grid.OpenFile(path + "\\" + flxname); //载入格式
            }
            grid.EnterKeyMoveTo = MoveToEnum.NextRow;
        }

        #region  构造数据

        private void GetAllConsumes()
        {
            allConsumes = new List<CostMonthAccDtlConsume>();

            if (costBill == null)
            {
                return;
            }

            foreach (CostMonthAccountDtl dtl in costBill.Details)
            {
                allConsumes.AddRange(dtl.Details);
            }

            RefreshResourceName();
        }

        private void RefreshResourceName()
        {
            if (allConsumes == null)
            {
                return;
            }

            var res = allConsumes.GroupBy(a => a.ResourceTypeGUID);
            var objQuery = new ObjectQuery();
            var idList = new Disjunction();
            foreach (var gp in res)
            {
                idList.Add(Expression.Eq("Id", gp.Key));
            }
            objQuery.AddCriterion(idList);

            var resList = model.ObjectQuery(typeof (Material), objQuery);
            foreach (Material mat in resList)
            {
                var list = allConsumes.FindAll(a => a.ResourceTypeGUID == mat.Id);
                foreach (var consume in list)
                {
                    consume.ResourceTypeName = mat.Name;
                    consume.ResourceTypeSpec = mat.Specification;
                }
            }
        }

        /// <summary>
        /// 查询此根节点下几层的成本科目,生成月度核算物资消耗对象集合,并排序
        /// </summary>
        /// <param name="rootSubject">查询的成本科目根节点</param>
        /// <param name="queryLevel">向下查询几层</param>
        /// <param name="ifContainSelf">是否包含自己</param>
        private List<CostMonthAccDtlConsume> GetCostSubjectList(string rootSubjectCode, int queryLevel,
                                                                bool ifContainSelf)
        {
            CostAccountSubject rootSubject = subjectList.Find(s => s.Code == rootSubjectCode);

            var list = new List<CostMonthAccDtlConsume>();
            int rootLevel = rootSubject.Level;
            int maxLevel = rootLevel + queryLevel;
            string rootSyscode = rootSubject.SysCode;
            foreach (CostAccountSubject subject in subjectList)
            {
                if (ifContainSelf && subject.SysCode.Equals(rootSyscode))
                {
                    CostMonthAccDtlConsume dtlConsume = new CostMonthAccDtlConsume();
                    dtlConsume.Data2 = "1"; //相对层级
                    dtlConsume.CostingSubjectGUID = subject;
                    dtlConsume.CostingSubjectName = subject.Name;
                    dtlConsume.CostSubjectCode = subject.Code;
                    dtlConsume.CostSubjectSyscode = subject.SysCode;
                    list.Add(dtlConsume);
                }
                if (rootSyscode != null && subject.SysCode.Contains(rootSyscode) && subject.Level > rootLevel &&
                    subject.Level <= maxLevel)
                {
                    CostMonthAccDtlConsume dtlConsume = new CostMonthAccDtlConsume();
                    dtlConsume.Data2 = (subject.Level - rootLevel) + ""; //相对层级
                    dtlConsume.CostingSubjectGUID = subject;
                    dtlConsume.CostingSubjectName = subject.Name;
                    dtlConsume.CostSubjectCode = subject.Code;
                    dtlConsume.CostSubjectSyscode = subject.SysCode;
                    list.Add(dtlConsume);
                }
            }

            return list;
        }

        private void SetGridStyle(CustomFlexGrid flexGrid, int frozenRows, int frozenCols)
        {
            var range = flexGrid.Range(frozenRows + 1, 1, flexGrid.Rows - 1, flexGrid.Cols - 1);
            range.set_Borders(EdgeEnum.Inside, LineStyleEnum.Thin);
            range.set_Borders(EdgeEnum.Left, LineStyleEnum.Thick);
            range.set_Borders(EdgeEnum.Right, LineStyleEnum.Thick);

            flexGrid.Column(1).Alignment = AlignmentEnum.CenterCenter;
            flexGrid.DefaultRowHeight = 23;
            flexGrid.FrozenRows = frozenRows;
            flexGrid.FrozenCols = frozenCols;
            flexGrid.Locked = true;

            range = flexGrid.Range(frozenRows + 1, frozenCols + 1, flexGrid.Rows - 1, flexGrid.Cols - 1);
            range.Alignment = AlignmentEnum.RightCenter;
        }

        #endregion

        #region 直接材料费对比表

        private void LoadMaterialData()
        {
            var subCode = "C51102";
            if (!ifZB)
            {
                subCode = "C56102";
            }

            var subList = GetCostSubjectList(subCode, 2, false);
            var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1=="0");
            var rowIndex = 4;

            var lvOneSubs = subList.FindAll(a => a.Data2 == "1");
            for (var i = 0; i < lvOneSubs.Count; i++)
            {
                gdMaterial.InsertRow(rowIndex, 1);
                gdMaterial.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(i + 1);
                gdMaterial.Cell(rowIndex, 2).Text = lvOneSubs[i].CostingSubjectName;
                gdMaterial.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                rowIndex++;

                var lvOneDetails = totalUses.FindAll(a => a.CostSubjectCode == lvOneSubs[i].CostSubjectCode);
                if (lvOneDetails.Count > 0)
                {
                    DisplayMaterialData(ref rowIndex, lvOneDetails, lvOneSubs[i].CostSubjectCode, true);
                }

                var lvTwoSubs =
                    subList.FindAll(a => a.Data2 == "2" && a.CostSubjectCode.Contains(lvOneSubs[i].CostSubjectCode));
                for (var j = 0; j < lvTwoSubs.Count; j++)
                {
                    gdMaterial.InsertRow(rowIndex, 1);
                    gdMaterial.Cell(rowIndex, 1).Text = Encoding.ASCII.GetString(new byte[] {(byte) (65 + j)});
                    gdMaterial.Cell(rowIndex, 2).Text = lvTwoSubs[j].CostingSubjectName;
                    gdMaterial.Range(rowIndex, 1, rowIndex, 2).FontBold = true;
                    rowIndex++;

                    DisplayMaterialData(ref rowIndex, totalUses, lvTwoSubs[j].CostSubjectCode, false);
                }
            }

            DisplayMaterialTotal();

            SetGridStyle(gdMaterial, 3, 3);
        }

        private void DisplayMaterialData(ref int rowIndex, List<CostMonthAccDtlConsume> details, string subjectCode, bool isWholeMatch)
        {
            #region 按资源汇总明细行

            var subDetails = details.FindAll(
                a =>
                (!isWholeMatch && a.CostSubjectCode.Contains(subjectCode)) ||
                (isWholeMatch && a.CostSubjectCode == subjectCode))
                .GroupBy(a => new {a.ResourceTypeName, a.ResourceTypeSpec, a.RationUnitName})
                .OrderBy(a => a.Key.ResourceTypeName)
                .ThenBy(a => a.Key.ResourceTypeSpec);
            if (subDetails.Count() == 0)
            {
                return;
            }

            var rowNo = 0;
            var colIndex = 1;

            foreach (var subDetail in subDetails)
            {
                gdMaterial.InsertRow(rowIndex, 1);
                colIndex = 1;
                rowNo++;

                gdMaterial.Cell(rowIndex, colIndex++).Text = rowNo.ToString();
                gdMaterial.Cell(rowIndex, colIndex++).Text =
                    string.Format("{0} {1}", subDetail.Key.ResourceTypeName, subDetail.Key.ResourceTypeSpec);
                gdMaterial.Cell(rowIndex, colIndex++).Text = subDetail.Key.RationUnitName;
                gdMaterial.Range(rowIndex, 1, rowIndex, 2).FontBold = false;

                var qty = subDetail.Sum(a => a.SumIncomeQuantity);
                var tp = subDetail.Sum(a => a.SumIncomeTotalPrice);
                gdMaterial.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = Math.Round(tp/qty, 4).ToString("N4");
                }
                else
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = "0";
                }
                gdMaterial.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumResponsiConsumeQuantity);
                tp = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                gdMaterial.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = Math.Round(tp/qty, 4).ToString("N4");
                }
                else
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = "0";
                }
                gdMaterial.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumRealConsumeQuantity);
                tp = subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                gdMaterial.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = Math.Round(tp/qty, 4).ToString("N4");
                }
                else
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = "0";
                }
                gdMaterial.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumIncomeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                gdMaterial.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = Math.Round(tp/qty, 4).ToString("P2");
                }
                else
                {
                    gdMaterial.Cell(rowIndex, colIndex++).Text = "0%";
                }

                qty = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                gdMaterial.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    gdMaterial.Cell(rowIndex, colIndex).Text = Math.Round(tp/qty, 4).ToString("P2");
                }
                else
                {
                    gdMaterial.Cell(rowIndex, colIndex).Text = "0%";
                }

                rowIndex++;
            }

            #endregion

            #region 小计

            gdMaterial.InsertRow(rowIndex, 1);
            colIndex = 2;
            gdMaterial.Cell(rowIndex, colIndex++).Text = SUBTOTAL;

            gdMaterial.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeQuantity)).ToString("N2");
            colIndex += 2;
            gdMaterial.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice)).ToString("N2");

            gdMaterial.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeQuantity)).ToString("N2");
            colIndex += 2;
            gdMaterial.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice)).ToString("N2");

            gdMaterial.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeQuantity)).ToString("N2");
            colIndex += 2;
            gdMaterial.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice)).ToString("N2");

            var tmp1 = subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice));
            var tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            gdMaterial.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                gdMaterial.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2/tmp1, 4).ToString("P2");
            }
            else
            {
                gdMaterial.Cell(rowIndex, ++colIndex).Text = "0";
            }

            tmp1 = subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice));
            tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            gdMaterial.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                gdMaterial.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2/tmp1, 4).ToString("P2");
            }
            else
            {
                gdMaterial.Cell(rowIndex, ++colIndex).Text = "0";
            }

            rowIndex++;

            #endregion
        }

        private void DisplayMaterialTotal()
        {
            var cell = gdMaterial.Cell(gdMaterial.Rows - 1, 2);
            cell.Text = "合计";
            cell.FontBold = true;

            for (int j = 4; j < gdMaterial.Cols; j++)
            {
                if (j == 5 || j == 8 || j == 11)
                {
                    continue;
                }
                else if (j == 14 || j == 16)
                {
                    var tmp1 = Convert.ToDecimal(gdMaterial.Cell(gdMaterial.Rows - 1, j - 1).DoubleValue);
                    var tmp2 = Convert.ToDecimal(gdMaterial.Cell(gdMaterial.Rows - 1, j == 14 ? 6 : 9).DoubleValue);
                    if (tmp2 != 0)
                    {
                        gdMaterial.Cell(gdMaterial.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                    else
                    {
                        gdMaterial.Cell(gdMaterial.Rows - 1, j).Text = "0%";
                    }
                    continue;
                }

                var total = 0m;
                for (int i = 4; i < gdMaterial.Rows - 1; i++)
                {
                    var txt = gdMaterial.Cell(i, 2).Text.Trim();
                    if (txt == SUBTOTAL)
                    {
                        total += Convert.ToDecimal(gdMaterial.Cell(i, j).DoubleValue);
                    }
                }

                gdMaterial.Cell(gdMaterial.Rows - 1, j).Text = total.ToString("N2");
            }
        }

        #endregion

        #region 材料量差价差对比表

        private void LoadMaterialDiffData()
        {
            gdAmountPrice.InsertRow(4, gdMaterial.Rows - 5);
            var copyCols = new Dictionary<int, int>();
            copyCols.Add(1, 1);
            copyCols.Add(2, 2);
            copyCols.Add(3, 4);
            copyCols.Add(4, 10);
            copyCols.Add(6, 5);
            copyCols.Add(7, 11);
            copyCols.Add(9, 6);
            copyCols.Add(10, 12);
            for (int i = 4; i < gdMaterial.Rows; i++)
            {
                foreach (var col in copyCols)
                {
                    var targetCell = gdAmountPrice.Cell(i, col.Key);
                    var sourceCell = gdMaterial.Cell(i, col.Value);

                    targetCell.Text = sourceCell.Text;
                    targetCell.FontBold = sourceCell.FontBold;
                    targetCell.Alignment = sourceCell.Alignment;
                }

                gdAmountPrice.Cell(i, 5).Text =
                    (gdMaterial.Cell(i, 4).DoubleValue - gdMaterial.Cell(i, 10).DoubleValue).ToString("N2");
                gdAmountPrice.Cell(i, 8).Text = 
                    (gdMaterial.Cell(i, 5).DoubleValue - gdMaterial.Cell(i, 11).DoubleValue).ToString("N4");
                gdAmountPrice.Cell(i, 11).Text =
                    (gdMaterial.Cell(i, 6).DoubleValue - gdMaterial.Cell(i, 12).DoubleValue).ToString("N2");
            }

            SetGridStyle(gdAmountPrice, 3, 2);
        }

        #endregion

        #region 机械费对比表

        private void LoadMachineData()
        {
            var subCode = "C51103";
            if (!ifZB)
            {
                subCode = "C56103";
            }

            var subList = GetCostSubjectList(subCode, 2, false);
            var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1 == "0");
            var rowIndex = 4;

            var lvOneSubs = subList.FindAll(a => a.Data2 == "1");
            var grid = gdMachine;
            for (var i = 0; i < lvOneSubs.Count; i++)
            {
                grid.InsertRow(rowIndex, 1);
                grid.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(i + 1);
                grid.Cell(rowIndex, 2).Text = lvOneSubs[i].CostingSubjectName;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                rowIndex++;

                var lvOneDetails = totalUses.FindAll(a => a.CostSubjectCode == lvOneSubs[i].CostSubjectCode);
                if (lvOneDetails.Count > 0)
                {
                    DisplayMachineData(ref rowIndex, lvOneDetails, lvOneSubs[i].CostSubjectCode, true);
                }

                var lvTwoSubs =
                    subList.FindAll(a => a.Data2 == "2" && a.CostSubjectCode.Contains(lvOneSubs[i].CostSubjectCode));
                for (var j = 0; j < lvTwoSubs.Count; j++)
                {
                    grid.InsertRow(rowIndex, 1);
                    grid.Cell(rowIndex, 1).Text = Encoding.ASCII.GetString(new byte[] { (byte)(65 + j) });
                    grid.Cell(rowIndex, 2).Text = lvTwoSubs[j].CostingSubjectName;
                    grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;
                    rowIndex++;

                    DisplayMachineData(ref rowIndex, totalUses, lvTwoSubs[j].CostSubjectCode, false);
                }
            }

            DisplayMachineTotal();

            SetGridStyle(grid, 3, 2);
        }

        private void DisplayMachineData(ref int rowIndex, List<CostMonthAccDtlConsume> details, string subjectCode, bool isWholeMatch)
        {
            #region 按资源汇总明细行

            var subDetails = details.FindAll(
                a =>
                (!isWholeMatch && a.CostSubjectCode.Contains(subjectCode)) ||
                (isWholeMatch && a.CostSubjectCode == subjectCode))
                .GroupBy(a => new { a.ResourceTypeName, a.ResourceTypeSpec })
                .OrderBy(a => a.Key.ResourceTypeName)
                .ThenBy(a => a.Key.ResourceTypeSpec);
            if (subDetails.Count() == 0)
            {
                return;
            }

            var rowNo = 0;
            var colIndex = 1;
            var grid = gdMachine;
            foreach (var subDetail in subDetails)
            {
                grid.InsertRow(rowIndex, 1);
                colIndex = 1;
                rowNo++;

                grid.Cell(rowIndex, colIndex++).Text = rowNo.ToString();
                grid.Cell(rowIndex, colIndex++).Text =
                    string.Format("{0} {1}", subDetail.Key.ResourceTypeName, subDetail.Key.ResourceTypeSpec);
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = false;

                var qty = subDetail.Sum(a => a.SumIncomeQuantity);
                var tp = subDetail.Sum(a => a.SumIncomeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumResponsiConsumeQuantity);
                tp = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumRealConsumeQuantity);
                tp = subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumIncomeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0%";
                }

                qty = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex).Text = "0%";
                }

                rowIndex++;
            }

            #endregion

            #region 小计

            grid.InsertRow(rowIndex, 1);
            colIndex = 2;
            grid.Cell(rowIndex, colIndex++).Text = SUBTOTAL;

            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice)).ToString("N2");

            var tmp1 = subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice));
            var tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            tmp1 = subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice));
            tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            rowIndex++;

            #endregion
        }

        private void DisplayMachineTotal()
        {
            var grid = gdMachine;
            var cell = grid.Cell(grid.Rows - 1, 2);
            cell.Text = "合计";
            cell.FontBold = true;

            for (int j = 3; j < grid.Cols; j++)
            {
                if (j == 4 || j == 7 || j == 10)
                {
                    continue;
                }
                else if (j == 13 || j == 15)
                {
                    var tmp1 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j - 1).DoubleValue);
                    var tmp2 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j == 13 ? 5 : 8).DoubleValue);
                    if (tmp2 != 0)
                    {
                        grid.Cell(grid.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                    else
                    {
                        grid.Cell(grid.Rows - 1, j).Text = "0%";
                    }
                    continue;
                }

                var total = 0m;
                for (int i = 4; i < grid.Rows - 1; i++)
                {
                    var txt = grid.Cell(i, 2).Text.Trim();
                    if (txt == SUBTOTAL)
                    {
                        total += Convert.ToDecimal(grid.Cell(i, j).DoubleValue);
                    }
                }

                grid.Cell(grid.Rows - 1, j).Text = total.ToString("N2");
            }
        }

        #endregion

        #region 分包工程费对比表
        private void LoadSubcontractData()
        {
            var subCode = "C51104";
            if (!ifZB)
            {
                subCode = "C56104";
            }

            var subList = GetCostSubjectList(subCode, 2, false);
            var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1 == "0");
            var rowIndex = 4;

            var lvOneSubs = subList.FindAll(a => a.Data2 == "1");
            var grid = gdSubcontrat;
            for (var i = 0; i < lvOneSubs.Count; i++)
            {
                grid.InsertRow(rowIndex, 1);
                grid.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(i + 1);
                grid.Cell(rowIndex, 2).Text = lvOneSubs[i].CostingSubjectName;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                rowIndex++;

                var lvOneDetails = totalUses.FindAll(a => a.CostSubjectCode == lvOneSubs[i].CostSubjectCode);
                if (lvOneDetails.Count > 0)
                {
                    DisplaySubcontractData(ref rowIndex, lvOneDetails, lvOneSubs[i].CostSubjectCode, true);
                }

                var lvTwoSubs =
                    subList.FindAll(a => a.Data2 == "2" && a.CostSubjectCode.Contains(lvOneSubs[i].CostSubjectCode));
                for (var j = 0; j < lvTwoSubs.Count; j++)
                {
                    grid.InsertRow(rowIndex, 1);
                    grid.Cell(rowIndex, 1).Text = Encoding.ASCII.GetString(new byte[] { (byte)(65 + j) });
                    grid.Cell(rowIndex, 2).Text = lvTwoSubs[j].CostingSubjectName;
                    grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;
                    rowIndex++;

                    DisplaySubcontractData(ref rowIndex, totalUses, lvTwoSubs[j].CostSubjectCode, false);
                }
            }

            DisplaySubcontractTotal();

            SetGridStyle(grid, 3, 2);
        }

        private void DisplaySubcontractData(ref int rowIndex, List<CostMonthAccDtlConsume> details, string subjectCode, bool isWholeMatch)
        {
            #region 按资源汇总明细行

            var subDetails = details.FindAll(
                a =>
                (!isWholeMatch && a.CostSubjectCode.Contains(subjectCode)) ||
                (isWholeMatch && a.CostSubjectCode == subjectCode))
                .GroupBy(a => new { a.ResourceTypeName, a.ResourceTypeSpec })
                .OrderBy(a => a.Key.ResourceTypeName)
                .ThenBy(a => a.Key.ResourceTypeSpec);
            if (subDetails.Count() == 0)
            {
                return;
            }

            var rowNo = 0;
            var colIndex = 1;
            var grid = gdSubcontrat;
            foreach (var subDetail in subDetails)
            {
                grid.InsertRow(rowIndex, 1);
                colIndex = 1;
                rowNo++;

                grid.Cell(rowIndex, colIndex++).Text = rowNo.ToString();
                grid.Cell(rowIndex, colIndex++).Text =
                    string.Format("{0} {1}", subDetail.Key.ResourceTypeName, subDetail.Key.ResourceTypeSpec);
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = false;

                var qty = subDetail.Sum(a => a.SumIncomeQuantity);
                var tp = subDetail.Sum(a => a.SumIncomeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumResponsiConsumeQuantity);
                tp = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumRealConsumeQuantity);
                tp = subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumIncomeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0%";
                }

                qty = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex).Text = "0%";
                }

                rowIndex++;
            }

            #endregion

            #region 小计

            grid.InsertRow(rowIndex, 1);
            colIndex = 2;
            grid.Cell(rowIndex, colIndex++).Text = SUBTOTAL;

            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice)).ToString("N2");

            var tmp1 = subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice));
            var tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            tmp1 = subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice));
            tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            rowIndex++;

            #endregion
        }

        private void DisplaySubcontractTotal()
        {
            var grid = gdSubcontrat;
            var cell = grid.Cell(grid.Rows - 1, 2);
            cell.Text = "合计";
            cell.FontBold = true;

            for (int j = 3; j < grid.Cols; j++)
            {
                if (j == 4 || j == 7 || j == 10)
                {
                    continue;
                }
                else if (j == 13 || j == 15)
                {
                    var tmp1 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j - 1).DoubleValue);
                    var tmp2 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j == 13 ? 5 : 8).DoubleValue);
                    if (tmp2 != 0)
                    {
                        grid.Cell(grid.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                    else
                    {
                        grid.Cell(grid.Rows - 1, j).Text = "0%";
                    }
                    continue;
                }

                var total = 0m;
                for (int i = 4; i < grid.Rows - 1; i++)
                {
                    var txt = grid.Cell(i, 2).Text.Trim();
                    if (txt == SUBTOTAL)
                    {
                        total += Convert.ToDecimal(grid.Cell(i, j).DoubleValue);
                    }
                }

                grid.Cell(grid.Rows - 1, j).Text = total.ToString("N2");
            }
        }
        #endregion

        #region 劳务费对比表
        private void LoadLabourvData()
        {
            var subCode = "C51101";
            if (!ifZB)
            {
                subCode = "C56101";
            }

            var subList = GetCostSubjectList(subCode, 2, false);
            var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1 == "0");
            var rowIndex = 4;

            var lvOneSubs = subList.FindAll(a => a.Data2 == "1");
            var grid = gdLabour;
            for (var i = 0; i < lvOneSubs.Count; i++)
            {
                grid.InsertRow(rowIndex, 1);
                grid.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(i + 1);
                grid.Cell(rowIndex, 2).Text = lvOneSubs[i].CostingSubjectName;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                rowIndex++;

                var lvOneDetails = totalUses.FindAll(a => a.CostSubjectCode == lvOneSubs[i].CostSubjectCode);
                if (lvOneDetails.Count > 0)
                {
                    DisplayLabourData(ref rowIndex, lvOneDetails, lvOneSubs[i].CostSubjectCode, true);
                }

                var lvTwoSubs =
                    subList.FindAll(a => a.Data2 == "2" && a.CostSubjectCode.Contains(lvOneSubs[i].CostSubjectCode));
                for (var j = 0; j < lvTwoSubs.Count; j++)
                {
                    grid.InsertRow(rowIndex, 1);
                    grid.Cell(rowIndex, 1).Text = Encoding.ASCII.GetString(new byte[] { (byte)(65 + j) });
                    grid.Cell(rowIndex, 2).Text = lvTwoSubs[j].CostingSubjectName;
                    grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;
                    rowIndex++;

                    DisplayLabourData(ref rowIndex, totalUses, lvTwoSubs[j].CostSubjectCode, false);
                }
            }

            DisplayLabourTotal();

            SetGridStyle(grid, 3, 3);
        }

        private void DisplayLabourData(ref int rowIndex, List<CostMonthAccDtlConsume> details, string subjectCode, bool isWholeMatch)
        {
            #region 按资源汇总明细行

            var subDetails = details.FindAll(
                a =>
                (!isWholeMatch && a.CostSubjectCode.Contains(subjectCode)) ||
                (isWholeMatch && a.CostSubjectCode == subjectCode))
                .GroupBy(a => new { a.ResourceTypeName, a.ResourceTypeSpec, a.RationUnitName })
                .OrderBy(a => a.Key.ResourceTypeName)
                .ThenBy(a => a.Key.ResourceTypeSpec);
            if (subDetails.Count() == 0)
            {
                return;
            }

            var rowNo = 0;
            var colIndex = 1;
            var grid = gdLabour;
            foreach (var subDetail in subDetails)
            {
                grid.InsertRow(rowIndex, 1);
                colIndex = 1;
                rowNo++;

                grid.Cell(rowIndex, colIndex++).Text = rowNo.ToString();
                grid.Cell(rowIndex, colIndex++).Text =
                    string.Format("{0} {1}", subDetail.Key.ResourceTypeName, subDetail.Key.ResourceTypeSpec);
                grid.Cell(rowIndex, colIndex++).Text = subDetail.Key.RationUnitName;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = false;

                var qty = subDetail.Sum(a => a.SumIncomeQuantity);
                var tp = subDetail.Sum(a => a.SumIncomeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumResponsiConsumeQuantity);
                tp = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumRealConsumeQuantity);
                tp = subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumIncomeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0%";
                }

                qty = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    gdMaterial.Cell(rowIndex, colIndex).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex).Text = "0%";
                }

                rowIndex++;
            }

            #endregion

            #region 小计

            grid.InsertRow(rowIndex, 1);
            colIndex = 2;
            grid.Cell(rowIndex, colIndex++).Text = SUBTOTAL;

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice)).ToString("N2");

            var tmp1 = subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice));
            var tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            tmp1 = subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice));
            tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            rowIndex++;

            #endregion
        }

        private void DisplayLabourTotal()
        {
            var grid = gdLabour;
            var cell = grid.Cell(grid.Rows - 1, 2);
            cell.Text = "合计";
            cell.FontBold = true;

            for (int j = 4; j < grid.Cols; j++)
            {
                if (j == 5 || j == 8 || j == 11)
                {
                    continue;
                }
                else if (j == 14 || j == 16)
                {
                    var tmp1 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j - 1).DoubleValue);
                    var tmp2 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j == 14 ? 6 : 9).DoubleValue);
                    if (tmp2 != 0)
                    {
                        grid.Cell(grid.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                    else
                    {
                        grid.Cell(grid.Rows - 1, j).Text = "0%";
                    }
                    continue;
                }

                var total = 0m;
                for (int i = 4; i < grid.Rows - 1; i++)
                {
                    var txt = grid.Cell(i, 2).Text.Trim();
                    if (txt == SUBTOTAL)
                    {
                        total += Convert.ToDecimal(grid.Cell(i, j).DoubleValue);
                    }
                }

                grid.Cell(grid.Rows - 1, j).Text = total.ToString("N2");
            }
        }
        #endregion

        #region 措施费对比表
        private void LoadMeasuresData()
        {
            var subCode = "C512";
            if (!ifZB)
            {
                subCode = "C562";
            }

            var subList = GetCostSubjectList(subCode, 2, false);
            var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1 == "0");
            var rowIndex = 4;

            var lvOneSubs = subList.FindAll(a => a.Data2 == "1");
            var grid = gdMeasures;
            for (var i = 0; i < lvOneSubs.Count; i++)
            {
                grid.InsertRow(rowIndex, 1);
                grid.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(i + 1);
                grid.Cell(rowIndex, 2).Text = lvOneSubs[i].CostingSubjectName;
                grid.Cell(rowIndex, 2).Tag = lvOneSubs[i].CostingSubjectName;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                rowIndex++;

                var lvOneDetails = totalUses.FindAll(a => a.CostSubjectCode == lvOneSubs[i].CostSubjectCode);
                if (lvOneDetails.Count > 0)
                {
                    DisplayMeasuresData(ref rowIndex, lvOneDetails, lvOneSubs[i].CostSubjectCode, true);
                }

                var lvTwoSubs =
                    subList.FindAll(a => a.Data2 == "2" && a.CostSubjectCode.Contains(lvOneSubs[i].CostSubjectCode));
                for (var j = 0; j < lvTwoSubs.Count; j++)
                {
                    grid.InsertRow(rowIndex, 1);
                    grid.Cell(rowIndex, 1).Text = Encoding.ASCII.GetString(new byte[] { (byte)(65 + j) });
                    grid.Cell(rowIndex, 2).Text = lvTwoSubs[j].CostingSubjectName;
                    grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;
                    rowIndex++;

                    DisplayMeasuresData(ref rowIndex, totalUses, lvTwoSubs[j].CostSubjectCode, false);
                }
            }

            DisplayMeasuresTotal();

            SetGridStyle(grid, 3, 2);
        }

        private void DisplayMeasuresData(ref int rowIndex, List<CostMonthAccDtlConsume> details, string subjectCode, bool isWholeMatch)
        {
            #region 按资源汇总明细行

            var subDetails = details.FindAll(
                a =>
                (!isWholeMatch && a.CostSubjectCode.Contains(subjectCode)) ||
                (isWholeMatch && a.CostSubjectCode == subjectCode))
                .GroupBy(a => new { a.ResourceTypeName, a.ResourceTypeSpec })
                .OrderBy(a => a.Key.ResourceTypeName)
                .ThenBy(a => a.Key.ResourceTypeSpec);
            if (subDetails.Count() == 0)
            {
                return;
            }

            var rowNo = 0;
            var colIndex = 1;
            var grid = gdMeasures;
            foreach (var subDetail in subDetails)
            {
                grid.InsertRow(rowIndex, 1);
                colIndex = 1;
                rowNo++;

                grid.Cell(rowIndex, colIndex++).Text = rowNo.ToString();
                grid.Cell(rowIndex, colIndex++).Text =
                    string.Format("{0} {1}", subDetail.Key.ResourceTypeName, subDetail.Key.ResourceTypeSpec);
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = false;

                var qty = subDetail.Sum(a => a.SumIncomeQuantity);
                var tp = subDetail.Sum(a => a.SumIncomeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumResponsiConsumeQuantity);
                tp = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumRealConsumeQuantity);
                tp = subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumIncomeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0%";
                }

                qty = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex).Text = "0%";
                }

                rowIndex++;
            }

            #endregion

            #region 小计

            grid.InsertRow(rowIndex, 1);
            colIndex = 2;
            grid.Cell(rowIndex, colIndex++).Text = SUBTOTAL;

            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice)).ToString("N2");

            var tmp1 = subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice));
            var tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            tmp1 = subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice));
            tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            rowIndex++;

            #endregion
        }

        private void DisplayMeasuresTotal()
        {
            var grid = gdMeasures;
            var cell = grid.Cell(grid.Rows - 1, 2);
            cell.Text = "合计";
            cell.FontBold = true;

            for (int j = 3; j < grid.Cols; j++)
            {
                if (j == 4 || j == 7 || j == 10)
                {
                    continue;
                }
                else if (j == 13 || j == 15)
                {
                    var tmp1 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j - 1).DoubleValue);
                    var tmp2 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j == 13 ? 5 : 8).DoubleValue);
                    if (tmp2 != 0)
                    {
                        grid.Cell(grid.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                    else
                    {
                        grid.Cell(grid.Rows - 1, j).Text = "0%";
                    }
                    continue;
                }

                var total = 0m;
                for (int i = 4; i < grid.Rows - 1; i++)
                {
                    var txt = grid.Cell(i, 2).Text.Trim();
                    if (txt == SUBTOTAL)
                    {
                        total += Convert.ToDecimal(grid.Cell(i, j).DoubleValue);
                    }
                }

                grid.Cell(grid.Rows - 1, j).Text = total.ToString("N2");
            }
        }
        #endregion

        #region 现场管理费对比表
        private void LoadManagerData()
        {
            var subCode = "C513";
            if (!ifZB)
            {
                subCode = "C563";
            }

            var subList = GetCostSubjectList(subCode, 2, false);
            var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1 == "0");
            var rowIndex = 3;

            var lvOneSubs = subList.FindAll(a => a.Data2 == "1");
            var grid = gdManager;
            grid.InsertRow(rowIndex, lvOneSubs.Count - 1);
            for (var i = 0; i < lvOneSubs.Count; i++)
            {
                grid.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(i + 1);
                grid.Cell(rowIndex, 2).Text = lvOneSubs[i].CostingSubjectName;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                DisplayManagerData(ref rowIndex, totalUses, lvOneSubs[i].CostSubjectCode, true);
            }

            DisplayManagerTotal();

            SetGridStyle(grid, 2, 2);
        }

        private void DisplayManagerData(ref int rowIndex, List<CostMonthAccDtlConsume> details, string subjectCode, bool isWholeMatch)
        {
            var subDetails = details.FindAll(
                a =>
                (!isWholeMatch && a.CostSubjectCode.Contains(subjectCode)) ||
                (isWholeMatch && a.CostSubjectCode == subjectCode));
            if (subDetails.Count() == 0)
            {
                return;
            }

            var colIndex = 3;
            var grid = gdManager;

            var tp = subDetails.Sum(a => a.SumIncomeTotalPrice);
            grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

            tp = subDetails.Sum(a => a.SumResponsiConsumeTotalPrice);
            grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

            tp = subDetails.Sum(a => a.SumRealConsumeTotalPrice);
            grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

            var qty = subDetails.Sum(a => a.SumIncomeTotalPrice);
            tp = qty - subDetails.Sum(a => a.SumRealConsumeTotalPrice);
            grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
            if (qty != 0)
            {
                grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, colIndex++).Text = "0%";
            }

            qty = subDetails.Sum(a => a.SumResponsiConsumeTotalPrice);
            tp = qty - subDetails.Sum(a => a.SumRealConsumeTotalPrice);
            grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
            if (qty != 0)
            {
                grid.Cell(rowIndex, colIndex).Text = Math.Round(tp / qty, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, colIndex).Text = "0%";
            }

            rowIndex++;
        }

        private void DisplayManagerTotal()
        {
            var grid = gdManager;
            var cell = grid.Cell(grid.Rows - 1, 2);
            cell.Text = "合计";
            cell.FontBold = true;

            for (int j = 3; j < grid.Cols; j++)
            {
                if (j == 7 || j == 9)
                {
                    var tmp1 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j - 1).DoubleValue);
                    var tmp2 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j == 7 ? 3 : 4).DoubleValue);
                    if (tmp2 != 0)
                    {
                        grid.Cell(grid.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                    else
                    {
                        grid.Cell(grid.Rows - 1, j).Text = "0%";
                    }
                    continue;
                }

                var total = 0m;
                for (int i = 3; i < grid.Rows - 1; i++)
                {
                    total += Convert.ToDecimal(grid.Cell(i, j).DoubleValue);
                }

                grid.Cell(grid.Rows - 1, j).Text = total.ToString("N2");
            }
        }
        #endregion

        #region 项目合同内成本分析汇总表
        private void LoadContractData()
        {
            var rowIndex = 4;
            gdContract.InsertRow(rowIndex, 1);
            gdContract.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - 3);
            gdContract.Cell(rowIndex, 2).Text = "劳务费";
            gdContract.Cell(rowIndex, 2).Tag = "1";
            gdContract.Cell(rowIndex, 3).Text = gdLabour.Cell(gdLabour.Rows - 1, 6).Text;
            gdContract.Cell(rowIndex, 4).Text = gdLabour.Cell(gdLabour.Rows - 1, 9).Text;
            gdContract.Cell(rowIndex, 5).Text = gdLabour.Cell(gdLabour.Rows - 1, 12).Text;
            gdContract.Cell(rowIndex, 6).Text = gdLabour.Cell(gdLabour.Rows - 1, 13).Text;
            gdContract.Cell(rowIndex, 7).Text = gdLabour.Cell(gdLabour.Rows - 1, 14).Text;
            gdContract.Cell(rowIndex, 8).Text = gdLabour.Cell(gdLabour.Rows - 1, 15).Text;
            gdContract.Cell(rowIndex, 9).Text = gdLabour.Cell(gdLabour.Rows - 1, 16).Text;
            rowIndex++;

            gdContract.InsertRow(rowIndex, 1);
            gdContract.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - 3);
            gdContract.Cell(rowIndex, 2).Text = "材料费";
            gdContract.Cell(rowIndex, 2).Tag = "1";
            gdContract.Cell(rowIndex, 3).Text = gdMaterial.Cell(gdMaterial.Rows - 1, 6).Text;
            gdContract.Cell(rowIndex, 4).Text = gdMaterial.Cell(gdMaterial.Rows - 1, 9).Text;
            gdContract.Cell(rowIndex, 5).Text = gdMaterial.Cell(gdMaterial.Rows - 1, 12).Text;
            gdContract.Cell(rowIndex, 6).Text = gdMaterial.Cell(gdMaterial.Rows - 1, 13).Text;
            gdContract.Cell(rowIndex, 7).Text = gdMaterial.Cell(gdMaterial.Rows - 1, 14).Text;
            gdContract.Cell(rowIndex, 8).Text = gdMaterial.Cell(gdMaterial.Rows - 1, 15).Text;
            gdContract.Cell(rowIndex, 9).Text = gdMaterial.Cell(gdMaterial.Rows - 1, 16).Text;
            rowIndex++;

            gdContract.InsertRow(rowIndex, 1);
            gdContract.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - 3);
            gdContract.Cell(rowIndex, 2).Text = "施工机械费";
            gdContract.Cell(rowIndex, 2).Tag = "1";
            gdContract.Cell(rowIndex, 3).Text = gdMachine.Cell(gdMachine.Rows - 1, 5).Text;
            gdContract.Cell(rowIndex, 4).Text = gdMachine.Cell(gdMachine.Rows - 1, 8).Text;
            gdContract.Cell(rowIndex, 5).Text = gdMachine.Cell(gdMachine.Rows - 1, 11).Text;
            gdContract.Cell(rowIndex, 6).Text = gdMachine.Cell(gdMachine.Rows - 1, 12).Text;
            gdContract.Cell(rowIndex, 7).Text = gdMachine.Cell(gdMachine.Rows - 1, 13).Text;
            gdContract.Cell(rowIndex, 8).Text = gdMachine.Cell(gdMachine.Rows - 1, 14).Text;
            gdContract.Cell(rowIndex, 9).Text = gdMachine.Cell(gdMachine.Rows - 1, 15).Text;
            rowIndex++;

            gdContract.InsertRow(rowIndex, 1);
            gdContract.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - 3);
            gdContract.Cell(rowIndex, 2).Text = "措施费";
            gdContract.Cell(rowIndex, 2).Tag = "1";
            gdContract.Cell(rowIndex, 3).Text = gdMeasures.Cell(gdMeasures.Rows - 1, 5).Text;
            gdContract.Cell(rowIndex, 4).Text = gdMeasures.Cell(gdMeasures.Rows - 1, 8).Text;
            gdContract.Cell(rowIndex, 5).Text = gdMeasures.Cell(gdMeasures.Rows - 1, 11).Text;
            gdContract.Cell(rowIndex, 6).Text = gdMeasures.Cell(gdMeasures.Rows - 1, 12).Text;
            gdContract.Cell(rowIndex, 7).Text = gdMeasures.Cell(gdMeasures.Rows - 1, 13).Text;
            gdContract.Cell(rowIndex, 8).Text = gdMeasures.Cell(gdMeasures.Rows - 1, 14).Text;
            gdContract.Cell(rowIndex, 9).Text = gdMeasures.Cell(gdMeasures.Rows - 1, 15).Text;
            rowIndex++;

            var rowNo = 1;
            for (var i = 4; i < gdMeasures.Rows - 1; i++)
            {
                var subjCell = gdMeasures.Cell(i, 2);
                if (!string.IsNullOrEmpty(subjCell.Tag))
                {
                    gdContract.InsertRow(rowIndex, 1);
                    gdContract.Cell(rowIndex, 1).Text = rowNo.ToString();
                    gdContract.Cell(rowIndex, 2).Text = subjCell.Tag;
                    rowIndex++;
                    rowNo++;
                }
                else if (subjCell.Text == SUBTOTAL)
                {
                    gdContract.Cell(rowIndex - 1, 3).Text = 
                        (gdContract.Cell(rowIndex - 1, 3).DoubleValue + gdMeasures.Cell(i, 5).DoubleValue).ToString("N2");
                    gdContract.Cell(rowIndex - 1, 4).Text =
                        (gdContract.Cell(rowIndex - 1, 4).DoubleValue + gdMeasures.Cell(i, 8).DoubleValue).ToString("N2");
                    gdContract.Cell(rowIndex - 1, 5).Text =
                        (gdContract.Cell(rowIndex - 1, 5).DoubleValue + gdMeasures.Cell(i, 11).DoubleValue).ToString("N2");
                    gdContract.Cell(rowIndex - 1, 6).Text =
                        (gdContract.Cell(rowIndex - 1, 6).DoubleValue + gdMeasures.Cell(i, 12).DoubleValue).ToString("N2");
                    
                    var tmp1 = gdContract.Cell(rowIndex - 1, 6).DoubleValue;
                    var tmp2 = gdContract.Cell(rowIndex - 1, 3).DoubleValue;
                    if(tmp2==0)
                    {
                        gdContract.Cell(rowIndex - 1, 7).Text = "0%";
                    }
                    else
                    {
                        gdContract.Cell(rowIndex - 1, 7).Text = Math.Round(tmp1/tmp2, 4).ToString("P2");
                    }

                    gdContract.Cell(rowIndex - 1, 8).Text =
                        (gdContract.Cell(rowIndex - 1, 8).DoubleValue + gdMeasures.Cell(i, 14).DoubleValue).ToString("N2");

                    tmp1 = gdContract.Cell(rowIndex - 1, 8).DoubleValue;
                    tmp2 = gdContract.Cell(rowIndex - 1, 4).DoubleValue;
                    if (tmp2 == 0)
                    {
                        gdContract.Cell(rowIndex - 1, 9).Text = "0%";
                    }
                    else
                    {
                        gdContract.Cell(rowIndex - 1, 9).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                }
            }

            gdContract.InsertRow(rowIndex, 1);
            gdContract.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - rowNo - 2);
            gdContract.Cell(rowIndex, 2).Text = "现场管理费";
            gdContract.Cell(rowIndex, 2).Tag = "1";
            gdContract.Cell(rowIndex, 3).Text = gdManager.Cell(gdManager.Rows - 1, 3).Text;
            gdContract.Cell(rowIndex, 4).Text = gdManager.Cell(gdManager.Rows - 1, 4).Text;
            gdContract.Cell(rowIndex, 5).Text = gdManager.Cell(gdManager.Rows - 1, 5).Text;
            gdContract.Cell(rowIndex, 6).Text = gdManager.Cell(gdManager.Rows - 1, 6).Text;
            gdContract.Cell(rowIndex, 7).Text = gdManager.Cell(gdManager.Rows - 1, 7).Text;
            gdContract.Cell(rowIndex, 8).Text = gdManager.Cell(gdManager.Rows - 1, 8).Text;
            gdContract.Cell(rowIndex, 9).Text = gdManager.Cell(gdManager.Rows - 1, 9).Text;
            rowIndex++;

            gdContract.InsertRow(rowIndex, 1);
            gdContract.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - rowNo - 2);
            gdContract.Cell(rowIndex, 2).Text = "分包工程费";
            gdContract.Cell(rowIndex, 2).Tag = "1";
            gdContract.Cell(rowIndex, 3).Text = gdSubcontrat.Cell(gdSubcontrat.Rows - 1, 5).Text;
            gdContract.Cell(rowIndex, 4).Text = gdSubcontrat.Cell(gdSubcontrat.Rows - 1, 8).Text;
            gdContract.Cell(rowIndex, 5).Text = gdSubcontrat.Cell(gdSubcontrat.Rows - 1, 11).Text;
            gdContract.Cell(rowIndex, 6).Text = gdSubcontrat.Cell(gdSubcontrat.Rows - 1, 12).Text;
            gdContract.Cell(rowIndex, 7).Text = gdSubcontrat.Cell(gdSubcontrat.Rows - 1, 13).Text;
            gdContract.Cell(rowIndex, 8).Text = gdSubcontrat.Cell(gdSubcontrat.Rows - 1, 14).Text;
            gdContract.Cell(rowIndex, 9).Text = gdSubcontrat.Cell(gdSubcontrat.Rows - 1, 15).Text;
            rowIndex++;

            gdContract.InsertRow(rowIndex, 1);
            gdContract.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - rowNo - 2);
            gdContract.Cell(rowIndex, 2).Text = "其他";
            gdContract.Cell(rowIndex, 2).Tag = "1";
            gdContract.Cell(rowIndex, 3).Text = gdOther.Cell(gdOther.Rows - 1, 3).Text;
            gdContract.Cell(rowIndex, 4).Text = gdOther.Cell(gdOther.Rows - 1, 4).Text;
            gdContract.Cell(rowIndex, 5).Text = gdOther.Cell(gdOther.Rows - 1, 5).Text;
            gdContract.Cell(rowIndex, 6).Text = gdOther.Cell(gdOther.Rows - 1, 6).Text;
            gdContract.Cell(rowIndex, 7).Text = gdOther.Cell(gdOther.Rows - 1, 7).Text;
            gdContract.Cell(rowIndex, 8).Text = gdOther.Cell(gdOther.Rows - 1, 8).Text;
            gdContract.Cell(rowIndex, 9).Text = gdOther.Cell(gdOther.Rows - 1, 9).Text;
            rowIndex++;

            var cell = gdContract.Cell(rowIndex, 2);
            cell.Text = "小计";
            cell.FontBold = true;

            for (int j = 3; j < gdContract.Cols; j++)
            {
                if (j == 7 || j == 9)
                {
                    var tmp1 = gdContract.Cell(gdContract.Rows - 1, j - 1).DoubleValue;
                    var tmp2 = gdContract.Cell(gdContract.Rows - 1, j == 7 ? 3 : 4).DoubleValue;

                    if (tmp2 == 0)
                    {
                        gdContract.Cell(gdContract.Rows - 1, j).Text = "0%";
                    }
                    else
                    {
                        gdContract.Cell(gdContract.Rows - 1, j).Text = Math.Round(tmp1/tmp2, 4).ToString("P2");
                    }
                }
                else
                {
                    var total = 0m;
                    for (var i = 4; i < gdContract.Rows - 1; i++)
                    {
                        cell = gdContract.Cell(i, 2);
                        if (!string.IsNullOrEmpty(cell.Tag) && cell.Tag == "1")
                        {
                            cell.FontBold = true;
                            gdContract.Cell(i, 1).FontBold = true;

                            total += Convert.ToDecimal(gdContract.Cell(i, j).DoubleValue);
                        }
                    }

                    gdContract.Cell(gdContract.Rows - 1, j).Text = total.ToString("N2");
                }
            }

            SetGridStyle(gdContract, 3, 2);
        }

        #endregion

        #region 计时工分析对比表
        private void LoadTimeData()
        {
            var subCode = "C5110106";
            if (!ifZB)
            {
                subCode = "C5160106";
            }

            var subList = GetCostSubjectList(subCode, 2, false);
            var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1 == "1");
            var rowIndex = 4;

            var lvOneSubs = subList.FindAll(a => a.Data2 == "1");
            var grid = gdTime;
            for (var i = 0; i < lvOneSubs.Count; i++)
            {
                grid.InsertRow(rowIndex, 1);
                grid.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(i + 1);
                grid.Cell(rowIndex, 2).Text = lvOneSubs[i].CostingSubjectName;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                rowIndex++;

                var lvOneDetails = totalUses.FindAll(a => a.CostSubjectCode == lvOneSubs[i].CostSubjectCode);
                if (lvOneDetails.Count > 0)
                {
                    DisplayTimeData(ref rowIndex, lvOneDetails, lvOneSubs[i].CostSubjectCode, true);
                }

                var lvTwoSubs =
                    subList.FindAll(a => a.Data2 == "2" && a.CostSubjectCode.Contains(lvOneSubs[i].CostSubjectCode));
                for (var j = 0; j < lvTwoSubs.Count; j++)
                {
                    grid.InsertRow(rowIndex, 1);
                    grid.Cell(rowIndex, 1).Text = Encoding.ASCII.GetString(new byte[] { (byte)(65 + j) });
                    grid.Cell(rowIndex, 2).Text = lvTwoSubs[j].CostingSubjectName;
                    grid.Range(rowIndex, 1, rowIndex, 2).FontBold = true;
                    rowIndex++;

                    DisplayTimeData(ref rowIndex, totalUses, lvTwoSubs[j].CostSubjectCode, false);
                }
            }

            DisplayTimeTotal();

            SetGridStyle(grid, 3, 2);
        }

        private void DisplayTimeData(ref int rowIndex, List<CostMonthAccDtlConsume> details, string subjectCode, bool isWholeMatch)
        {
            #region 按资源汇总明细行

            var subDetails = details.FindAll(
                a =>
                (!isWholeMatch && a.CostSubjectCode.Contains(subjectCode)) ||
                (isWholeMatch && a.CostSubjectCode == subjectCode))
                .GroupBy(a => a.CostingSubjectName )
                .OrderBy(a => a.Key)
                .ThenBy(a => a.Key);
            if (subDetails.Count() == 0)
            {
                return;
            }

            var rowNo = 0;
            var colIndex = 1;
            var grid = gdTime;
            foreach (var subDetail in subDetails)
            {
                grid.InsertRow(rowIndex, 1);
                colIndex = 1;
                rowNo++;

                grid.Cell(rowIndex, colIndex++).Text = rowNo.ToString();
                grid.Cell(rowIndex, colIndex++).Text = subDetail.Key;
                grid.Range(rowIndex, 1, rowIndex, 2).FontBold = false;

                var qty = subDetail.Sum(a => a.SumIncomeQuantity);
                var tp = subDetail.Sum(a => a.SumIncomeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumResponsiConsumeQuantity);
                tp = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumRealConsumeQuantity);
                tp = subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = qty.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("N4");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0";
                }
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");

                qty = subDetail.Sum(a => a.SumIncomeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex++).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex++).Text = "0%";
                }

                qty = subDetail.Sum(a => a.SumResponsiConsumeTotalPrice);
                tp = qty - subDetail.Sum(a => a.SumRealConsumeTotalPrice);
                grid.Cell(rowIndex, colIndex++).Text = tp.ToString("N2");
                if (qty != 0)
                {
                    grid.Cell(rowIndex, colIndex).Text = Math.Round(tp / qty, 4).ToString("P2");
                }
                else
                {
                    grid.Cell(rowIndex, colIndex).Text = "0%";
                }

                rowIndex++;
            }

            #endregion

            #region 小计

            grid.InsertRow(rowIndex, 1);
            colIndex = 2;
            grid.Cell(rowIndex, colIndex++).Text = SUBTOTAL;

            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice)).ToString("N2");

            grid.Cell(rowIndex, ++colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeQuantity)).ToString("N2");
            colIndex += 2;
            grid.Cell(rowIndex, colIndex).Text =
                subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice)).ToString("N2");

            var tmp1 = subDetails.Sum(a => a.Sum(b => b.SumIncomeTotalPrice));
            var tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            tmp1 = subDetails.Sum(a => a.Sum(b => b.SumResponsiConsumeTotalPrice));
            tmp2 = tmp1 - subDetails.Sum(a => a.Sum(b => b.SumRealConsumeTotalPrice));
            grid.Cell(rowIndex, ++colIndex).Text = tmp2.ToString("N2");
            if (tmp1 != 0)
            {
                grid.Cell(rowIndex, ++colIndex).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
            }
            else
            {
                grid.Cell(rowIndex, ++colIndex).Text = "0";
            }

            rowIndex++;

            #endregion
        }

        private void DisplayTimeTotal()
        {
            var grid = gdTime;
            var cell = grid.Cell(grid.Rows - 1, 2);
            cell.Text = "合计";
            cell.FontBold = true;

            for (int j = 3; j < grid.Cols; j++)
            {
                if (j == 4 || j == 7 || j == 10)
                {
                    continue;
                }
                else if (j == 13 || j == 15)
                {
                    var tmp1 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j - 1).DoubleValue);
                    var tmp2 = Convert.ToDecimal(grid.Cell(grid.Rows - 1, j == 13 ? 5 : 8).DoubleValue);
                    if (tmp2 != 0)
                    {
                        grid.Cell(grid.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                    else
                    {
                        grid.Cell(grid.Rows - 1, j).Text = "0%";
                    }
                    continue;
                }

                var total = 0m;
                for (int i = 4; i < grid.Rows - 1; i++)
                {
                    var txt = grid.Cell(i, 2).Text.Trim();
                    if (txt == SUBTOTAL)
                    {
                        total += Convert.ToDecimal(grid.Cell(i, j).DoubleValue);
                    }
                }

                grid.Cell(grid.Rows - 1, j).Text = total.ToString("N2");
            }
        }
        #endregion

        #region 其他费对比表
        private void LoadOtherData()
        {
            var subCodes = new List<string>() { "C514", "C515", "C516" };
            var rowIndex = 3;
            foreach (var subCode in subCodes)
            {
                var totalUses = allTotalConsumes.FindAll(a => a.CostSubjectCode.Contains(subCode) && a.Data1 == "0");
                var sub = subjectList.Find(s => s.Code == subCode);

                gdOther.InsertRow(rowIndex, 1);
                gdOther.Cell(rowIndex, 1).Text = CommonUtil.GetChineseNumber(rowIndex - 2);
                gdOther.Cell(rowIndex, 2).Text = sub.Name;
                gdOther.Range(rowIndex, 1, rowIndex, 2).FontBold = true;

                gdOther.Cell(rowIndex, 3).Text = totalUses.Sum(t => t.CurrIncomeTotalPrice).ToString("N2");
                gdOther.Cell(rowIndex, 4).Text = totalUses.Sum(t => t.SumResponsiConsumeTotalPrice).ToString("N2");
                gdOther.Cell(rowIndex, 5).Text = totalUses.Sum(t => t.SumRealConsumeTotalPrice).ToString("N2");

                var tmp1 = totalUses.Sum(t => t.SumIncomeTotalPrice);
                var tmp2 = tmp1 - totalUses.Sum(t => t.SumRealConsumeTotalPrice);
                gdOther.Cell(rowIndex, 6).Text = tmp2.ToString("N2");
                if (tmp1 == 0)
                {
                    gdOther.Cell(rowIndex, 7).Text = "0%";
                }
                else
                {
                    gdOther.Cell(rowIndex, 7).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
                }

                tmp1 = totalUses.Sum(t => t.SumResponsiConsumeTotalPrice);
                tmp2 = tmp1 - totalUses.Sum(t => t.SumRealConsumeTotalPrice);
                gdOther.Cell(rowIndex, 8).Text = tmp2.ToString("N2");
                if (tmp1 == 0)
                {
                    gdOther.Cell(rowIndex, 9).Text = "0%";
                }
                else
                {
                    gdOther.Cell(rowIndex, 9).Text = Math.Round(tmp2 / tmp1, 4).ToString("P2");
                }

                rowIndex++;
            }

            var cell = gdOther.Cell(gdOther.Rows - 1, 2);
            cell.Text = SUBTOTAL;
            cell.FontBold = true;

            for (int j = 3; j < gdOther.Cols; j++)
            {
                if (j == 7 || j == 9)
                {
                    var tmp1 = gdOther.Cell(gdOther.Rows - 1, j - 1).DoubleValue;
                    var tmp2 = gdOther.Cell(gdOther.Rows - 1, j == 7 ? 3 : 4).DoubleValue;

                    if (tmp2 == 0)
                    {
                        gdOther.Cell(gdOther.Rows - 1, j).Text = "0%";
                    }
                    else
                    {
                        gdOther.Cell(gdOther.Rows - 1, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                }
                else
                {
                    var total = 0m;
                    for (var i = 3; i < gdOther.Rows - 1; i++)
                    {
                        total += Convert.ToDecimal(gdOther.Cell(i, j).DoubleValue);
                    }

                    gdOther.Cell(gdOther.Rows - 1, j).Text = total.ToString("N2");
                }
            }
            
            SetGridStyle(gdOther, 2, 2);
        }
        #endregion

        #region 项目合同外变更费用汇总表

        #endregion

        #region 项目签证索赔费用对比表

        #endregion

        #region 项目成本分析汇总表
        private void LoadTotalData()
        {
            gdTotal.Cell(2, 1).Text = string.Format("项目名称：{0}", ProjectInfo.Name);
            var rowIndex = 5;
            gdTotal.Cell(rowIndex, 3).Text = gdContract.Cell(gdContract.Rows - 1, 3).Text;
            gdTotal.Cell(rowIndex, 4).Text = gdContract.Cell(gdContract.Rows - 1, 4).Text;
            gdTotal.Cell(rowIndex, 5).Text = gdContract.Cell(gdContract.Rows - 1, 5).Text;
            gdTotal.Cell(rowIndex, 6).Text = gdContract.Cell(gdContract.Rows - 1, 6).Text;
            gdTotal.Cell(rowIndex, 7).Text = gdContract.Cell(gdContract.Rows - 1, 7).Text;
            gdTotal.Cell(rowIndex, 8).Text = gdContract.Cell(gdContract.Rows - 1, 8).Text;
            gdTotal.Cell(rowIndex, 9).Text = gdContract.Cell(gdContract.Rows - 1, 9).Text;
            rowIndex++;

            gdTotal.Cell(rowIndex, 3).Text = gdChange.Cell(gdChange.Rows - 1, 7).Text;
            gdTotal.Cell(rowIndex, 4).Text = gdChange.Cell(gdChange.Rows - 1, 11).Text;
            gdTotal.Cell(rowIndex, 5).Text = gdChange.Cell(gdChange.Rows - 1, 15).Text;
            gdTotal.Cell(rowIndex, 6).Text = gdChange.Cell(gdChange.Rows - 1, 16).Text;
            gdTotal.Cell(rowIndex, 7).Text = gdChange.Cell(gdChange.Rows - 1, 17).Text;
            gdTotal.Cell(rowIndex, 8).Text = gdChange.Cell(gdChange.Rows - 1, 18).Text;
            gdTotal.Cell(rowIndex, 9).Text = gdChange.Cell(gdChange.Rows - 1, 19).Text;
            rowIndex++;

            gdTotal.Cell(rowIndex, 3).Text = gdTime.Cell(gdTime.Rows - 1, 5).Text;
            gdTotal.Cell(rowIndex, 4).Text = gdTime.Cell(gdTime.Rows - 1, 8).Text;
            gdTotal.Cell(rowIndex, 5).Text = gdTime.Cell(gdTime.Rows - 1, 11).Text;
            gdTotal.Cell(rowIndex, 6).Text = gdTime.Cell(gdTime.Rows - 1, 12).Text;
            gdTotal.Cell(rowIndex, 7).Text = gdTime.Cell(gdTime.Rows - 1, 13).Text;
            gdTotal.Cell(rowIndex, 8).Text = gdTime.Cell(gdTime.Rows - 1, 14).Text;
            gdTotal.Cell(rowIndex, 9).Text = gdTime.Cell(gdTime.Rows - 1, 15).Text;
            rowIndex++;

            gdTotal.Cell(rowIndex, 3).Text = gdVisa.Cell(gdVisa.Rows - 1, 3).Text;
            gdTotal.Cell(rowIndex, 4).Text = gdVisa.Cell(gdVisa.Rows - 1, 4).Text;
            gdTotal.Cell(rowIndex, 5).Text = gdVisa.Cell(gdVisa.Rows - 1, 9).Text;
            gdTotal.Cell(rowIndex, 6).Text = gdVisa.Cell(gdVisa.Rows - 1, 10).Text;
            gdTotal.Cell(rowIndex, 7).Text = gdVisa.Cell(gdVisa.Rows - 1, 11).Text;
            gdTotal.Cell(rowIndex, 8).Text = gdVisa.Cell(gdVisa.Rows - 1, 12).Text;
            gdTotal.Cell(rowIndex, 9).Text = gdVisa.Cell(gdVisa.Rows - 1, 13).Text;

            for (int j = 3; j < gdTotal.Cols; j++)
            {
                if (j == 7 || j == 9)
                {
                    var tmp1 = gdTotal.Cell(gdTotal.Rows - 2, j - 1).DoubleValue;
                    var tmp2 = gdTotal.Cell(gdTotal.Rows - 2, j == 7 ? 3 : 4).DoubleValue;

                    if (tmp2 == 0)
                    {
                        gdTotal.Cell(gdTotal.Rows - 2, j).Text = "0%";
                    }
                    else
                    {
                        gdTotal.Cell(gdTotal.Rows - 2, j).Text = Math.Round(tmp1 / tmp2, 4).ToString("P2");
                    }
                }
                else
                {
                    var total = 0m;
                    for (var i = 5; i < gdTotal.Rows - 2; i++)
                    {
                        total += Convert.ToDecimal(gdTotal.Cell(i, j).DoubleValue);
                    }

                    gdTotal.Cell(gdTotal.Rows - 2, j).Text = total.ToString("N2");
                }
            }

            SetGridStyle(gdTotal, 5, 2);
        }
        #endregion
    }
}