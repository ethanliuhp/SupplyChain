using System;
using System.Collections.Generic;
using System.Collections;
using System.Text;

using VirtualMachine.Core;
using NHibernate.Criterion;

using Application.Resource.PersonAndOrganization.HumanResource.Domain;
using Application.Resource.PersonAndOrganization.HumanResource.Service;
using Application.Resource.PersonAndOrganization.OrganizationResource.Service;
using Application.Resource.PersonAndOrganization.OrganizationResource.Domain;
using Application.Business.Erp.ResourceManager.Client.Basic.CommonClass;
using VirtualMachine.Patterns.CategoryTreePattern.Domain;
using Application.Resource.FinancialResource;
using Application.Business.Erp.SupplyChain.CostManagement.WBS.Service;
using Application.Business.Erp.SupplyChain.CostManagement.WBS.Domain;
using Application.Business.Erp.SupplyChain.ProjectDocumentManage.Service;
using Application.Business.Erp.SupplyChain.ProjectDocumentManage.Domain;

namespace Application.Business.Erp.SupplyChain.Client.CostManagement.WBS
{
    public class MWBSManagement
    {
        private static IProjectTaskTypeSrv model;
        private static IProObjectRelaDocumentSrv modelDoc;

        public MWBSManagement()
        {
            if (model == null)
                model = ConstMethod.GetService("ProjectTaskTypeSrv") as IProjectTaskTypeSrv;
            if (modelDoc == null)
                modelDoc = ConstMethod.GetService("ProObjectRelaDocumentSrv") as IProObjectRelaDocumentSrv;
        }

        public System.Data.DataSet SearchSQL(string sql)
        {
            return model.SearchSQL(sql);
        }
        //返回节点node所在树的当前层次的最大OrderNo
        public long GetMaxOrderNo(CategoryNode node)
        {
            return model.GetMaxOrderNo(node);
        }


        //保存组织集合
        public IList SaveProjectTaskTypeTrees(IList lst)
        {
            return model.SaveProjectTaskTypeTrees(lst);
        }

        public IDictionary MoveNode(ProjectTaskTypeTree fromNode, ProjectTaskTypeTree toNode)
        {
            ProjectTaskTypeTree cat = model.MoveProjectTaskTypeTree(fromNode, toNode);
            IDictionary dic = new Hashtable();
            dic.Add(cat.ParentNode.Id.ToString(), cat.ParentNode);
            dic.Add(cat.Id.ToString(), cat);
            IList lstChildNodes = model.GetALLChildNodes(cat);
            foreach (ProjectTaskTypeTree var in lstChildNodes)
            {
                dic.Add(var.Id.ToString(), var);
            }
            return dic;
        }
        /// <summary>
        /// 根据名称查找业务组织
        /// </summary>
        public ProjectTaskTypeTree GetOpeOrgByName(string name)
        {
            ObjectQuery oq = new ObjectQuery();
            oq.AddCriterion(Expression.Like("Name", "%" + name + "%"));
            IList list = model.GetProjectTaskTypeTrees(typeof(ProjectTaskTypeTree), oq);
            if (list.Count == 1)
                return list[0] as ProjectTaskTypeTree;
            else
                return null;
        }

        /// <summary>
        /// 获取业务组织节点集合(返回有权限和无权限的集合)
        /// </summary>
        public IList GetProjectTaskTypeByInstance()
        {
            return model.GetProjectTaskTypeByInstance();
        }

        /// <summary>
        /// 获取工程任务类型树节点集合
        /// </summary>
        public IList GetProjectTaskTypeByInstance(IList listParentTaskType)
        {
            return model.GetProjectTaskTypeByInstance(listParentTaskType);
        }

        public IList GetProjectTaskTypeTrees(Type t)
        {
            return model.GetProjectTaskTypeTrees(t);
        }
        public IList GetProjectTaskTypeTreeAndJobs(Type t)
        {
            return model.GetProjectTaskTypeTreeAndJobs(t);
        }


        public ProjectTaskTypeTree GetProjectTaskTypeTreeById(string id)
        {
            //ProjectTaskTypeTree org = mm.GetProjectTaskTypeTreeById(id);
            //return org;
            ObjectQuery oq = new ObjectQuery();
            oq.AddCriterion(Expression.Eq("Id", id));
            IList list = model.GetProjectTaskTypeTrees(typeof(ProjectTaskTypeTree), oq);
            if (list.Count == 1)
                return list[0] as ProjectTaskTypeTree;
            else
                return null;
        }


        public ProjectTaskTypeTree SaveProjectTaskTypeTree(ProjectTaskTypeTree childOrg)
        {
            return model.SaveProjectTaskTypeTree(childOrg);
        }

        public bool DeleteProjectTaskTypeTree(ProjectTaskTypeTree childOrg)
        {
            return model.DeleteProjectTaskTypeTree(childOrg);
        }

        public bool DeleteProjectTaskTypeTree(IList lst)
        {
            return model.DeleteProjectTaskTypeTree(lst);
        }

        public bool InitRule()
        {
            return model.InitRule();
        }

        public IList GetProjectTaskTypeTreeRules(Type treeType)
        {
            return model.GetProjectTaskTypeTreeRules(treeType);
        }

        public IList GetProjectTaskTypeTreeRules(Type treeType, Type parentNodeType)
        {
            return model.GetProjectTaskTypeTreeRules(treeType, parentNodeType);
        }

        public string GetNextOPGCode()
        {
            return model.GetNextOPGCode();
        }

        /// <summary>
        /// 如果有多个对象，第一个对象为根节点，后续为子节点
        /// </summary>
        /// <param name="lst">树节点集合</param>
        /// <returns></returns>
        public IList SaveProjectTaskTypeRootNode(IList list)
        {
            return model.SaveProjectTaskTypeRootNode(list);
        }

        /// <summary>
        /// 获取对象编码
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public string GetCode(Type type)
        {
            return model.GetCode(type);
        }

        /// <summary>
        /// 插入（部分属性固定）或修改任务类型树节点
        /// </summary>
        /// <param name="childNode">树节点</param>
        /// <returns></returns>
        [TransManager]
        public ProjectTaskTypeTree InsertOrUpdateTaskTypeTree(ProjectTaskTypeTree childNode)
        {
            return model.InsertOrUpdateTaskTypeTree(childNode);
        }

        /// <summary> 
        /// 插入（部分属性固定）或修改PBS节点集合
        /// </summary>
        [TransManager]
        public IList InsertOrUpdateTaskTypeTrees(IList lst)
        {
            return model.InsertOrUpdateTaskTypeTrees(lst);
        }

        /// <summary>
        /// 对象查询
        /// </summary>
        /// <param name="entityType">实体类型</param>
        /// <param name="oq">查询条件</param>
        /// <returns></returns>
        public IList ObjectQuery(Type entityType, ObjectQuery oq)
        {
            return model.ObjectQuery(entityType, oq);
        }
        public IList PublisthTaskNodeAndChilds(string sNodeSysCode)
        {
            return model.PublisthTaskNodeAndChilds(sNodeSysCode);
        }
        public IList InvalidTaskNodeAndChilds(string sNodeSysCode)
        {
            return model.InvalidTaskNodeAndChilds(sNodeSysCode);
        }
        #region   工程任务类型文档模版********************************************************************************************
        /// <summary>
        /// 保存或修改工程任务类型文档模版
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        [TransManager]
        public ProTaskTypeDocumentStencil SaveOrUpDateDocStencil(ProTaskTypeDocumentStencil obj)
        {
            return model.SaveOrUpDateDocStencil(obj);
        }
        /// <summary>
        /// 批量保存工程任务类型文档模版
        /// </summary>
        /// <param name="objs"></param>
        /// <returns></returns>
        [TransManager]
        public IList saveDaoStencilList(IList objs)
        {
            return model.SaveDaoStencilList(objs);
        }
        /// <summary>
        /// 删除工程任务类型文档模版
        /// </summary>
        /// <param name="objs"></param>
        /// <returns></returns>
        [TransManager]
        public bool DeleteDocStencilList(IList objs)
        {
            return model.DeleteDocStencilList(objs);
        }
        #endregion

        #region 文档操作

        /// <summary>
        /// 保存或修改对象集合
        /// </summary>
        /// <param name="list">对象集合</param>
        /// <returns></returns>
        public IList SaveOrUpdate(IList list)
        {
            return modelDoc.SaveOrUpdate(list);
        }

        /// <summary>
        /// 保存或修改工程对象关联文档
        /// </summary>
        /// <param name="item">工程对象关联文档</param>
        /// <returns></returns>
        public ProObjectRelaDocument SaveOrUpdateProObjRelaDoc(ProObjectRelaDocument item)
        {
            return modelDoc.SaveOrUpdate(item);
        }

        /// <summary>
        /// 删除工程对象关联文档对象集合
        /// </summary>
        /// <param name="list">工程对象关联文档对象集合</param>
        /// <returns></returns>
        public bool DeleteProObjRelaDoc(IList list)
        {
            return modelDoc.DeleteProObjRelaDoc(list);
        }

        #endregion 文档操作

        public bool UpdateProjectTaskTypeTreeOrderNO(List<ProjectTaskTypeTree> ilst)
        {
            return model.UpdateProjectTaskTypeTreeOrderNO(ilst);
        }
    }
}
