using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Application.Business.Erp.SupplyChain.Client.Basic.Template;
using Application.Business.Erp.SupplyChain.Basic.Domain;
using Application.Business.Erp.SupplyChain.Client.Basic.CommonClass;
using VirtualMachine.Component.WinMVC.generic;
using Application.Business.Erp.SupplyChain.CostManagement.CostMonthAccountMng.Domain;
using Application.Business.Erp.SupplyChain.Client.Basic;
using VirtualMachine.Patterns.BusinessEssence.Domain;
using VirtualMachine.Component.Util;
using Application.Business.Erp.SupplyChain.Client.CostManagement.CostItemMng.CostAccountSubjectMng;
using Application.Business.Erp.SupplyChain.CostManagement.CostItemMng.Domain;
using VirtualMachine.Component.WinControls.Controls;

namespace Application.Business.Erp.SupplyChain.Client.CostManagement.CostMonthAccount
{
    public partial class VSelFeeTemplate : TMasterDetailView
    {
        #region private fields

        private SelFeeTemplateMaster curBillMaster;
        private MCostMonthAccount model = new MCostMonthAccount();

        #endregion

        #region property

        public SelFeeTemplateMaster CurBillMaster
        {
            get { return curBillMaster; }
            set { curBillMaster = value; }
        }

        #endregion

        #region ctor

        public VSelFeeTemplate()
        {
            InitializeComponent();
            this.dgDetail.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
            this.dgRules.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
            InitData();
            InitEvent();

        }

        private void InitData()
        {
            #region Init Controls DataSource

            List<BasicDataOptr> lst = VBasicDataOptr.GetSelFeeTemplateSpecialType();
            this.colSpecialType.DataSource = lst.OrderBy(l => l.BasicName).ToList();
            this.colSpecialType.DisplayMember = "BasicName";
            this.colSpecialType.ValueMember = "BasicName";

            lst = lst.OrderByDescending(l => l.BasicName).ToList();
            foreach (var bd in lst)
            {
                var mi = new ToolStripMenuItem();
                mi.Name = string.Format("tspMenu{0}", bd.BasicCode);
                mi.Text = bd.BasicName;
                mi.CheckOnClick = true;
                mi.Checked = true;
                mi.Click += new EventHandler(mi_Click);

                tspMenuSpecials.DropDownItems.Insert(0, mi);
            }

            if (this.comDocState.Items.Count == 0)
            {
                Array tem = Enum.GetValues(typeof (DocumentState));
                for (int i = 0; i < tem.Length; i++)
                {
                    DocumentState s = (DocumentState) tem.GetValue(i);
                    int k = (int) s;
                    if (k != 0)
                    {
                        string strNewName = ClientUtil.GetDocStateName(k);
                        System.Web.UI.WebControls.ListItem li = new System.Web.UI.WebControls.ListItem();
                        li.Text = strNewName;
                        li.Value = k.ToString();
                        comDocState.Items.Add(li);
                    }
                }
            }

            #endregion
        }

        private void InitEvent()
        {
            this.dgDetail.CellDoubleClick += new DataGridViewCellEventHandler(dgDetail_CellDoubleClick);
            this.dgDetail.CellEndEdit += new DataGridViewCellEventHandler(dgDetail_CellEndEdit);
            this.dgRules.CellDoubleClick += new DataGridViewCellEventHandler(dgRules_CellDoubleClick);

            contextMenuStrip1.Opening += new CancelEventHandler(contextMenuStrip1_Opening);
            tspMenuAddSpecial.Click += new EventHandler(tspMenuAddSpecial_Click);
            tspMenuMainSubject.Click += new EventHandler(tspMenuMainSubject_Click);
            tspMenuName.Click += new EventHandler(tspMenuName_Click);
            tspMenuGetSubject.Click += new EventHandler(tspMenuGetSubject_Click);
        }

        #endregion

        #region Control Events

        private void dgRules_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            if (ViewState == MainViewState.Browser || ViewState == MainViewState.Initialize) return;
            bool isNotNewRow = CheckCurrentRowIsNew(false);


            switch (this.dgRules.Columns[e.ColumnIndex].Name)
            {
                case "colAccountSubject_rules":
                    VSelectCostAccountSubject frm = new VSelectCostAccountSubject(new MCostAccountSubject());
                    frm.IsLeafSelect = false;
                    frm.StartPosition = FormStartPosition.CenterParent;
                    frm.ShowDialog();
                    CostAccountSubject cost = frm.SelectAccountSubject;
                    if (cost != null)
                    {
                        if (isNotNewRow)
                        {
                            this.dgRules.CurrentRow.Cells[this.dgRules.Columns[e.ColumnIndex].Name].Value = cost.Name;
                            this.dgRules.CurrentRow.Cells[this.dgRules.Columns[e.ColumnIndex].Name].Tag = cost;

                            this.dgRules.CurrentRow.Cells[this.colAccountSubjectCode_rules.Name].Value = cost.Code;

                        }
                        else
                        {
                            int i = this.dgRules.Rows.Add();
                            this.dgRules[this.dgRules.Columns[e.ColumnIndex].Name, i].Value = cost.Name;
                            this.dgRules[this.dgRules.Columns[e.ColumnIndex].Name, i].Tag = cost;
                            this.dgRules[this.dgRules.Columns[this.colAccountSubjectCode_rules.Name].Name, i].Value =
                                cost.Code;

                        }
                    }
                    break;
                case "colFormula_rules":

                    VSelFeeFormulaSet dlg = new VSelFeeFormulaSet();
                    dlg.StrInput = new string[]
                                       {
                                           ClientUtil.ToString(
                                               this.dgRules.CurrentRow.Cells[this.dgRules.Columns[e.ColumnIndex].Name].
                                                   Value)
                                           ,
                                           ClientUtil.ToString(
                                               this.dgRules.CurrentRow.Cells[this.dgRules.Columns[e.ColumnIndex].Name].
                                                   Tag)
                                       };

                    dlg.StartPosition = FormStartPosition.CenterParent;
                    dlg.ShowDialog();

                    string[] str_Formula = dlg.strOutput;
                    if (str_Formula != null && str_Formula.Length > 1)
                    {
                        if (isNotNewRow)
                        {
                            this.dgRules.CurrentRow.Cells[this.dgRules.Columns[e.ColumnIndex].Name].Value =
                                str_Formula[0];
                            this.dgRules.CurrentRow.Cells[this.dgRules.Columns[e.ColumnIndex].Name].Tag = str_Formula[1];
                            this.dgRules.CurrentCell = this.dgRules.CurrentRow.Cells[this.colAccountSubject_rules.Name];


                        }
                        else
                        {
                            int i = this.dgRules.Rows.Add();
                            this.dgRules[this.dgRules.Columns[e.ColumnIndex].Name, i].Value = str_Formula[0];
                            this.dgRules[this.dgRules.Columns[e.ColumnIndex].Name, i].Value = str_Formula[1];
                            this.dgRules.CurrentCell =
                                this.dgRules[this.dgRules.Columns[this.colAccountSubject_rules.Name].Name, i];
                        }
                    }
                    break;
            }

        }

        private void dgDetail_CellEndEdit(object sender, DataGridViewCellEventArgs e)
        {
            string colName = string.Empty;
            colName = this.dgDetail.Columns[e.ColumnIndex].Name;
            string msg = "";

            switch (colName)
            {
                case "colRate":
                case "colBeginMoney":
                case "colEndMoney":
                    string sTemp = ClientUtil.ToString(this.dgDetail.Rows[e.RowIndex].Cells[colName].Value);
                    if (string.IsNullOrEmpty(sTemp))
                    {
                        msg = "不能为空，请输入数值型";
                    }
                    if (msg == "" && !CommonMethod.VeryValid(sTemp))
                    {
                        msg = "请输入数值型";
                    }


                    break;
            }
            if (msg == "")
            {
                this.dgDetail.Rows[e.RowIndex].Cells[colName].Tag = this.dgDetail.Rows[e.RowIndex].Cells[colName].Value;
            }
            else
            {
                this.dgDetail.Rows[e.RowIndex].Cells[colName].Value = this.dgDetail.Rows[e.RowIndex].Cells[colName].Tag;
                this.dgDetail.Rows[e.RowIndex].Cells[colName].Selected = true;
            }
        }

        private void dgDetail_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.ColumnIndex < 0 || e.RowIndex < 0) return;
            if (ViewState == MainViewState.Browser || ViewState == MainViewState.Initialize) return;
            bool isNotNewRow = CheckCurrentRowIsNew(true);

            switch (this.dgDetail.Columns[e.ColumnIndex].Name)
            {
                case "colMainAccSubjectName": //科目大类
                case "colAccountSubjectName": //科目名称
                    VSelectCostAccountSubject frm = new VSelectCostAccountSubject(new MCostAccountSubject());
                    frm.IsLeafSelect = false;
                    frm.StartPosition = FormStartPosition.CenterParent;
                    frm.ShowDialog();
                    CostAccountSubject cost = frm.SelectAccountSubject;
                    if (cost != null)
                    {
                        if (isNotNewRow)
                        {
                            this.dgDetail.CurrentRow.Cells[this.dgDetail.Columns[e.ColumnIndex].Name].Value = cost.Name;
                            this.dgDetail.CurrentRow.Cells[this.dgDetail.Columns[e.ColumnIndex].Name].Tag = cost;
                            if (this.dgDetail.Columns[e.ColumnIndex].Name == "colMainAccSubjectName")
                                this.dgDetail.CurrentRow.Cells[this.colMainAccSubjectCode.Name].Value = cost.Code;
                            else
                                this.dgDetail.CurrentRow.Cells[this.colAccountSubjectCode.Name].Value = cost.Code;

                        }
                        else
                        {
                            int i = this.dgDetail.Rows.Add();
                            this.dgDetail[this.dgDetail.Columns[e.ColumnIndex].Name, i].Value = cost.Name;
                            this.dgDetail[this.dgDetail.Columns[e.ColumnIndex].Name, i].Tag = cost;
                            if (this.dgDetail.Columns[e.ColumnIndex].Name == "colMainAccSubjectName")
                                this.dgDetail[this.dgDetail.Columns[this.colMainAccSubjectCode.Name].Name, i].Tag = cost;
                            else
                                this.dgDetail[this.dgDetail.Columns[this.colAccountSubjectCode.Name].Name, i].Tag = cost;

                        }
                    }
                    break;

                default:
                    break;
            }
        }

        private bool CheckCurrentRowIsNew(bool isDetail)
        {
            bool isNotNewRow = false;
            if (isDetail)
                isNotNewRow = this.dgDetail.CurrentRow.Cells[this.colSpecialType.Name].Value != null //专业类型

                              || (this.dgDetail.CurrentRow.Cells[this.colMainAccSubjectName.Name].Value != null //科目大类
                                  &&
                                  ClientUtil.ToString(
                                      this.dgDetail.CurrentRow.Cells[this.colMainAccSubjectName.Name].Value).Trim().
                                      Length > 0)

                              || (this.dgDetail.CurrentRow.Cells[this.colAccountSubjectName.Name].Value != null //科目名称
                                  &&
                                  ClientUtil.ToString(
                                      this.dgDetail.CurrentRow.Cells[this.colAccountSubjectName.Name].Value).Trim().
                                      Length > 0)

                              || (this.dgDetail.CurrentRow.Cells[this.colRate.Name].Value != null //费率
                                  &&
                                  ClientUtil.ToString(this.dgDetail.CurrentRow.Cells[this.colRate.Name].Value).Trim().
                                      Length > 0)

                              || (this.dgDetail.CurrentRow.Cells[this.colBeginMoney.Name].Value != null //开始金额
                                  &&
                                  ClientUtil.ToString(this.dgDetail.CurrentRow.Cells[this.colBeginMoney.Name].Value).
                                      Trim().Length > 0)

                              || (this.dgDetail.CurrentRow.Cells[this.colEndMoney.Name].Value != null //结束金额
                                  &&
                                  ClientUtil.ToString(this.dgDetail.CurrentRow.Cells[this.colEndMoney.Name].Value).Trim()
                                      .Length > 0)

                              || (this.dgDetail.CurrentRow.Cells[this.colDescript.Name].Value != null //备注
                                  &&
                                  ClientUtil.ToString(this.dgDetail.CurrentRow.Cells[this.colDescript.Name].Value).Trim()
                                      .Length > 0)
                    ;
            else
                isNotNewRow = (this.dgRules.CurrentRow.Cells[this.colAccountSubject_rules.Name].Value != null //科目
                               &&
                               ClientUtil.ToString(
                                   this.dgRules.CurrentRow.Cells[this.colAccountSubject_rules.Name].Value).Trim().Length >
                               0)

                              || (this.dgRules.CurrentRow.Cells[this.colFormula_rules.Name].Value != null //公式
                                  &&
                                  ClientUtil.ToString(this.dgRules.CurrentRow.Cells[this.colFormula_rules.Name].Value).
                                      Trim().Length > 0)

                              || (this.dgRules.CurrentRow.Cells[this.colDescript_rules.Name].Value != null //公式
                                  &&
                                  ClientUtil.ToString(this.dgRules.CurrentRow.Cells[this.colDescript_rules.Name].Value).
                                      Trim().Length > 0)
                    ;
            return isNotNewRow;

        }

        private void contextMenuStrip1_Opening(object sender, CancelEventArgs e)
        {
            var isEdit = ViewState == MainViewState.AddNew || ViewState == MainViewState.Modify;

            tspMenuAddSpecial.Enabled = tspMenuMainSubject.Enabled = tspMenuName.Enabled
                = tspMenuSpecials.Enabled = tabControl1.SelectedTab == tabPage1 && isEdit;

            tspMenuGetSubject.Enabled = tabControl1.SelectedTab == tabPage2 && isEdit;
        }

        private void mi_Click(object sender, EventArgs e)
        {
            contextMenuStrip1.Show();
            tspMenuSpecials.ShowDropDown();
        }

        private void tspMenuName_Click(object sender, EventArgs e)
        {
            var rIndex = -1;
            for (var i = dgDetail.Rows.Count - 1; i >= 0; i--)
            {
                if (dgDetail.Rows[i].Cells[colAccountSubjectName.Name].Value != null)
                {
                    rIndex = i;
                    break;
                }
            }

            if (rIndex < 0)
            {
                return;
            }

            var subject = dgDetail.Rows[rIndex].Cells[colAccountSubjectName.Name].Tag as CostAccountSubject;
            if (subject == null)
            {
                return;
            }

            for (int i = rIndex + 1; i < dgDetail.Rows.Count - 1; i++)
            {
                dgDetail.Rows[i].Cells[colAccountSubjectName.Name].Value = subject.Name;
                dgDetail.Rows[i].Cells[colAccountSubjectName.Name].Tag = subject;
                dgDetail.Rows[i].Cells[colAccountSubjectCode.Name].Value = subject.Code;
            }
        }

        private void tspMenuMainSubject_Click(object sender, EventArgs e)
        {
            var rIndex = -1;
            for (var i = dgDetail.Rows.Count - 1; i >= 0; i--)
            {
                if (dgDetail.Rows[i].Cells[colMainAccSubjectName.Name].Value != null)
                {
                    rIndex = i;
                    break;
                }
            }

            if (rIndex < 0)
            {
                return;
            }

            var subject = dgDetail.Rows[rIndex].Cells[colMainAccSubjectName.Name].Tag as CostAccountSubject;
            if (subject == null)
            {
                return;
            }

            for (int i = rIndex + 1; i < dgDetail.Rows.Count - 1; i++)
            {
                dgDetail.Rows[i].Cells[colMainAccSubjectName.Name].Value = subject.Name;
                dgDetail.Rows[i].Cells[colMainAccSubjectName.Name].Tag = subject;
                dgDetail.Rows[i].Cells[colMainAccSubjectCode.Name].Value = subject.Code;
            }
        }

        private void tspMenuAddSpecial_Click(object sender, EventArgs e)
        {
            foreach (var item in tspMenuSpecials.DropDownItems)
            {
                var mu = item as ToolStripMenuItem;
                if (mu == null || !mu.Checked)
                {
                    continue;
                }

                var rIndex = dgDetail.Rows.Add();
                dgDetail.Rows[rIndex].Cells[colSpecialType.Name].Value = mu.Text;
            }
        }

        private List<CostAccountSubject> GetSelectedSubjects(CustomDataGridView grid, string colName)
        {
            var subList = new List<CostAccountSubject>();
            for (int i = 0; i < grid.Rows.Count - 1; i++)
            {
                var sub = grid.Rows[i].Cells[colName].Tag as CostAccountSubject;
                if (sub != null && !subList.Exists(s => s.Code == sub.Code))
                {
                    subList.Add(sub);
                }
            }

            return subList;
        }

        private void tspMenuGetSubject_Click(object sender, EventArgs e)
        {
            var subList = GetSelectedSubjects(dgDetail, colMainAccSubjectName.Name);
            if (subList.Count == 0)
            {
                MessageBox.Show("明细定义中未设置科目大类");
                return;
            }

            var existsList = GetSelectedSubjects(dgRules, colAccountSubject_rules.Name);
            var list = subList.FindAll(a => !existsList.Exists(b => b.Code == a.Code));
            foreach (var subject in list)
            {
                var rIndex = dgRules.Rows.Add();
                dgRules.Rows[rIndex].Cells[colAccountSubject_rules.Name].Value = subject.Name;
                dgRules.Rows[rIndex].Cells[colAccountSubject_rules.Name].Tag = subject;
                dgRules.Rows[rIndex].Cells[colAccountSubjectCode_rules.Name].Value = subject.Code;
            }
        }

        #endregion

        #region Model and View exchange

        private void SetGridNoSelected(bool isDetail)
        {
            if (isDetail)
                foreach (DataGridViewRow item in this.dgDetail.Rows)
                {
                    item.Selected = false;
                }
            else
                foreach (DataGridViewRow item in this.dgRules.Rows)
                {
                    item.Selected = false;
                }
        }

        private bool ValidView()
        {
            bool b_rtn = true;
            if (string.IsNullOrEmpty(this.txtName.Text))
            {
                MessageBox.Show("[模板名称]不能为空！");
                b_rtn = false;
                this.txtName.Focus();

            }
            if (b_rtn && (this.dgDetail.RowCount < 2))
            {
                MessageBox.Show("没有[费用明细定义]行！");
                b_rtn = false;
                this.tabControl1.SelectedTab = this.tabPage1;
                this.dgDetail.Focus();
            }

            var errMes = string.Empty;
            if (b_rtn)
            {
                for (int i = 0; i < this.dgDetail.RowCount; i++)
                {
                    if (this.dgDetail.Rows[i].IsNewRow) continue;
                    
                    if (string.IsNullOrEmpty(ClientUtil.ToString(this.dgDetail[this.colMainAccSubjectName.Name, i].Value)))
                    {
                        errMes = "[科目大类]不能为空！";
                    }
                    //if (string.IsNullOrEmpty(ClientUtil.ToString(this.dgDetail[this.colSpecialType.Name, i].Value)))
                    //{
                    //    errMes = "[专业类型]不能为空！";
                    //}
                    if (string.IsNullOrEmpty(ClientUtil.ToString(this.dgDetail[this.colRate.Name, i].Value)))
                    {
                        errMes = "[费率]不能为空！";
                    }

                    if(!string.IsNullOrEmpty(errMes))
                    {
                        MessageBox.Show(errMes);
                        b_rtn = false;
                        this.tabControl1.SelectedTab = this.tabPage1;
                        SetGridNoSelected(true);
                        this.dgDetail.Rows[i].Selected = true;
                        break;
                    }
                }
            }
            if (b_rtn && (this.dgRules.RowCount < 2))
            {
                MessageBox.Show("没有[计算规则定义]行！");
                b_rtn = false;
                this.tabControl1.SelectedTab = this.tabPage2;
                this.dgRules.Focus();
            }
            if (b_rtn)
            {
                for (int i = 0; i < this.dgRules.RowCount; i++)
                {
                    if (this.dgRules.Rows[i].IsNewRow) continue;
                    if (string.IsNullOrEmpty(ClientUtil.ToString(this.dgRules[this.colAccountSubject_rules.Name, i].Value)))
                    {
                        errMes = "[费用科目]不能为空！";
                    }
                    if (string.IsNullOrEmpty(ClientUtil.ToString(this.dgRules[this.colFormula_rules.Name, i].Value)))
                    {
                        errMes = "[公式]不能为空！";
                    }

                    if (!string.IsNullOrEmpty(errMes))
                    {
                        MessageBox.Show(errMes);
                        b_rtn = false;
                        this.tabControl1.SelectedTab = this.tabPage2;
                        SetGridNoSelected(false);
                        this.dgRules.Rows[i].Selected = true;
                        break;
                    }
                }
            }
            return b_rtn;
        }

        private bool ViewToModel()
        {
            if (!ValidView()) return false;
            try
            {
                curBillMaster.Name = this.txtName.Text;
                curBillMaster.Descript = this.txtRemark.Text;
                curBillMaster.SelFeeTemplateDetails.Clear();
                foreach (DataGridViewRow var in this.dgDetail.Rows)
                {
                    if (var.IsNewRow) break;
                    SelFeeTemplateDtl curBillDtl = new SelFeeTemplateDtl();
                    if (var.Tag != null)
                    {
                        curBillDtl = var.Tag as SelFeeTemplateDtl;
                        if (curBillDtl.Id == null)
                        {
                            curBillMaster.SelFeeTemplateDetails.Remove(curBillDtl);
                        }
                    }
                    curBillDtl.SpecialType = ClientUtil.ToString(var.Cells[this.colSpecialType.Name].Value);
                    curBillDtl.AccountSubject = var.Cells[this.colAccountSubjectName.Name].Tag as CostAccountSubject;
                    curBillDtl.AccountSubjectCode = ClientUtil.ToString(var.Cells[this.colAccountSubjectCode.Name].Value);
                    curBillDtl.AccountSubjectName = ClientUtil.ToString(var.Cells[this.colAccountSubjectName.Name].Value);
                    curBillDtl.Rate = ClientUtil.ToDecimal(var.Cells[this.colRate.Name].Value);
                    curBillDtl.BeginMoney = ClientUtil.ToDecimal(var.Cells[this.colBeginMoney.Name].Value);
                    curBillDtl.EndMoney = ClientUtil.ToDecimal(var.Cells[this.colEndMoney.Name].Value);
                    curBillDtl.Descript = ClientUtil.ToString(var.Cells[this.colDescript.Name].Value);
                    curBillDtl.MainAccSubject = var.Cells[this.colMainAccSubjectName.Name].Tag as CostAccountSubject;
                    curBillDtl.MainAccSubjectCode = ClientUtil.ToString(var.Cells[this.colMainAccSubjectCode.Name].Value);
                    curBillDtl.MainAccSubjectName = ClientUtil.ToString(var.Cells[this.colMainAccSubjectName.Name].Value);
                    var.Tag = curBillDtl;
                    curBillMaster.AddDetail(curBillDtl);

                }
                curBillMaster.SelFeeTempFormulas.Clear();
                foreach (DataGridViewRow var in this.dgRules.Rows)
                {
                    if (var.IsNewRow) break;
                    SelFeeTempFormula curBillDtl = new SelFeeTempFormula();
                    if (var.Tag != null)
                    {
                        curBillDtl = var.Tag as SelFeeTempFormula;
                        if (curBillDtl.Id == null)
                        {
                            curBillMaster.SelFeeTempFormulas.Remove(curBillDtl);
                        }
                    }
                    curBillDtl.AccountSubject = var.Cells[this.colAccountSubject_rules.Name].Tag as CostAccountSubject;
                    curBillDtl.AccountSubjectCode =
                        ClientUtil.ToString(var.Cells[this.colAccountSubjectCode_rules.Name].Value);
                    curBillDtl.AccountSubjectName =
                        ClientUtil.ToString(var.Cells[this.colAccountSubject_rules.Name].Value);
                    curBillDtl.Formula = ClientUtil.ToString(var.Cells[this.colFormula_rules.Name].Value);
                    curBillDtl.FormulaCode = ClientUtil.ToString(var.Cells[this.colFormula_rules.Name].Tag);
                    curBillDtl.Descript = ClientUtil.ToString(var.Cells[this.colDescript_rules.Name].Value);
                    var.Tag = curBillDtl;
                    curBillMaster.AddFormula(curBillDtl);
                }


                return true;
            }
            catch (Exception e)
            {

                MessageBox.Show("数据错误：" + ExceptionUtil.ExceptionMessage(e));
                return false;
            }

        }

        private bool ModelToView()
        {
            try
            {
                this.txtCode.Text = curBillMaster.Code;
                this.txtName.Text = curBillMaster.Name;
                this.txtRemark.Text = curBillMaster.Descript;
                this.comDocState.Text = ClientUtil.GetDocStateName(curBillMaster.DocState); //curBillMaster.DocState
                this.dgDetail.Rows.Clear();
                foreach (SelFeeTemplateDtl item in curBillMaster.SelFeeTemplateDetails)
                {
                    int i = this.dgDetail.Rows.Add();
                    this.dgDetail[this.colSpecialType.Name, i].Value = item.SpecialType;
                    this.dgDetail[this.colAccountSubjectName.Name, i].Value = item.AccountSubjectName;
                    this.dgDetail[this.colAccountSubjectName.Name, i].Tag = item.AccountSubject;
                    this.dgDetail[this.colAccountSubjectCode.Name, i].Value = item.AccountSubjectCode;
                    this.dgDetail[this.colRate.Name, i].Value = item.Rate;
                    this.dgDetail[this.colBeginMoney.Name, i].Value = item.BeginMoney;
                    this.dgDetail[this.colEndMoney.Name, i].Value = item.EndMoney;
                    this.dgDetail[this.colDescript.Name, i].Value = item.Descript;
                    this.dgDetail[this.colMainAccSubjectName.Name, i].Value = item.MainAccSubjectName;
                    this.dgDetail[this.colMainAccSubjectName.Name, i].Tag = item.MainAccSubject;
                    this.dgDetail[this.colMainAccSubjectCode.Name, i].Value = item.MainAccSubjectCode;
                    this.dgDetail.Rows[i].Tag = item;
                }
                this.dgRules.Rows.Clear();
                foreach (SelFeeTempFormula item in curBillMaster.SelFeeTempFormulas)
                {
                    int i = this.dgRules.Rows.Add();
                    this.dgRules[this.colAccountSubject_rules.Name, i].Value = item.AccountSubjectName;
                    this.dgRules[this.colAccountSubject_rules.Name, i].Tag = item.AccountSubject;
                    this.dgRules[this.colAccountSubjectCode_rules.Name, i].Value = item.AccountSubjectCode;
                    this.dgRules[this.colFormula_rules.Name, i].Value = item.Formula;
                    this.dgRules[this.colFormula_rules.Name, i].Tag = item.FormulaCode;
                    this.dgRules[this.colDescript_rules.Name, i].Value = item.Descript;
                    this.dgRules.Rows[i].Tag = item;

                }
                return true;
            }
            catch (Exception e)
            {

                throw e;
            }

        }

        #endregion

        #region Override methods

        public void Start(string Id)
        {
            try
            {
                if (Id == "空")
                    RefreshState(MainViewState.Initialize);
                else
                {
                    curBillMaster = model.CostMonthAccSrv.GetSelFeeTemplateMasterById(Id);
                    ModelToView();
                    RefreshState(MainViewState.Browser);

                }
            }
            catch (Exception e)
            {
                MessageBox.Show("视图启动出错：" + ExceptionUtil.ExceptionMessage(e));
            }
        }

        /// <summary>
        /// 刷新控件(窗体中的控件)
        /// </summary>
        /// <param name="state"></param>
        public override void RefreshControls(MainViewState state)
        {
            base.RefreshControls(state);

            //控制自身控件
            if (ViewState == MainViewState.AddNew || ViewState == MainViewState.Modify)
            {
                ObjectLock.Unlock(pnlFloor, true);
            }
            else
            {
                ObjectLock.Lock(pnlFloor, true);
            }

            //永久锁定
            object[] os = new object[] {txtCode, comDocState};
            ObjectLock.Lock(os);

            ////string[] lockCols = new string[] { colInspectionSupplier.Name, colInspectionPerson.Name, colRectification.Name, colInspectionConclusion.Name, colInspectionRequireDate.Name, colDangerType.Name, colDangerLevel.Name, colDangerPart.Name, colInspectionRequire.Name, colInspectionContent.Name, colDescription.Name };
            //string[] lockCols = new string[] { colInspectionSupplier.Name, colDangerType.Name, colDangerPart.Name, colInspectionRequire.Name, colInspectionContent.Name, colDescription.Name };
            //dgDetail.SetColumnsReadOnly(lockCols);
        }

        public override bool NewView()
        {
            try
            {
                base.NewView();
                if (dgDetail.Rows.Count > 1 || this.dgRules.Rows.Count > 1)
                {
                    ClearView();
                }
                this.curBillMaster = new SelFeeTemplateMaster();
                curBillMaster.CreateYear = DateTime.Now.Year;
                curBillMaster.CreateMonth = DateTime.Now.Month;
                curBillMaster.CreateDate = DateTime.Now;
                curBillMaster.DocState = DocumentState.Edit; //状态
                curBillMaster.CreatePerson = ConstObject.LoginPersonInfo; //负责人
                curBillMaster.CreatePersonName = ConstObject.LoginPersonInfo.Name; //负责人名称
            }
            catch (Exception e)
            {
                MessageBox.Show(ExceptionUtil.ExceptionMessage(e), "提示", MessageBoxButtons.OK,
                                MessageBoxIcon.Information, MessageBoxDefaultButton.Button1);
                return false;
            }
            return true;
        }

        public override bool ModifyView()
        {
            if (curBillMaster.DocState == DocumentState.Edit || curBillMaster.DocState == DocumentState.Valid)
            {
                base.ModifyView();
                curBillMaster = model.CostMonthAccSrv.GetSelFeeTemplateMasterById(curBillMaster.Id);
                ModelToView();
                return true;
            }
            string message = "此单状态为【{0}】，不能修改！";
            message = string.Format(message, ClientUtil.GetDocStateName(curBillMaster.DocState));
            MessageBox.Show(message);
            return false;
        }

        public override bool SaveView()
        {
            try
            {
                this.dgRules.EndEdit();
                this.dgDetail.EndEdit();
                if (!ViewToModel()) return false;

                bool flag = false;
                if (string.IsNullOrEmpty(curBillMaster.Id))
                {
                    flag = true;
                }
                curBillMaster = model.CostMonthAccSrv.SaveOrUpdateSelFeeTemplateMaster(curBillMaster);

                //插入日志
                txtCode.Text = curBillMaster.Code;
                this.comDocState.Text = ClientUtil.GetDocStateName(curBillMaster.DocState);
                //更新Caption
                LogData log = new LogData();
                log.BillId = curBillMaster.Id;
                log.BillType = "取费模板定义";
                log.Code = curBillMaster.Code;
                log.Descript = "";
                log.OperPerson = ConstObject.LoginPersonInfo.Name;
                log.ProjectName = curBillMaster.ProjectName;
                if (flag)
                {
                    log.OperType = "新增";
                }
                else
                {
                    log.OperType = "修改";
                }
                StaticMethod.InsertLogData(log);
                this.ViewCaption = ViewName + "-" + txtCode.Text;
                MessageBox.Show("保存成功！");
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据保存错误：" + ExceptionUtil.ExceptionMessage(e));
            }
            return false;
        }

        public override bool DeleteView()
        {
            try
            {
                if (curBillMaster.DocState == DocumentState.Edit || curBillMaster.DocState == DocumentState.Valid)
                {

                    curBillMaster = model.CostMonthAccSrv.GetSelFeeTemplateMasterById(curBillMaster.Id);
                    if (curBillMaster.DocState == DocumentState.Valid || curBillMaster.DocState == DocumentState.Edit)
                    {
                        //if (!model.ProfessionInspectionSrv.DeleteByDao(curBillMaster)) return false;
                        if (!model.CostMonthAccSrv.DeleteSelFeeTemplateMaster(curBillMaster)) return false;
                        LogData log = new LogData();
                        log.BillId = curBillMaster.Id;
                        log.BillType = "取费模板定义";
                        log.Code = curBillMaster.Code;
                        log.OperType = "删除";
                        log.Descript = "";
                        log.OperPerson = ConstObject.LoginPersonInfo.Name;
                        log.ProjectName = curBillMaster.ProjectName;
                        StaticMethod.InsertLogData(log);
                        ClearView();
                        MessageBox.Show("删除成功！");
                        return true;
                    }
                    MessageBox.Show("此单状态为【" + ClientUtil.GetDocStateName(curBillMaster.DocState) + "】，不能删除！");
                    return false;
                }
                string message = "此单状态为【{0}】，不能删除！";
                message = string.Format(message, ClientUtil.GetDocStateName(curBillMaster.DocState));
                MessageBox.Show(message);
                return false;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据删除错误：" + ExceptionUtil.ExceptionMessage(e));
                return false;
            }
            ;
        }

        public override bool CancelView()
        {
            try
            {
                switch (ViewState)
                {
                    case MainViewState.Modify:
                        //重新查询数据
                        curBillMaster = model.CostMonthAccSrv.GetSelFeeTemplateMasterById(curBillMaster.Id);
                        ModelToView();
                        break;
                    default:
                        if (dgDetail.Rows.Count > 1)
                        {
                            ClearView();
                        }
                        break;
                }
                return true;
            }
            catch (Exception e)
            {
                MessageBox.Show("数据撤销错误：" + ExceptionUtil.ExceptionMessage(e));
                return false;
            }

        }

        public override void RefreshView()
        {
            try
            {
                //重新获得当前对象的值
                curBillMaster = model.CostMonthAccSrv.GetSelFeeTemplateMasterById(curBillMaster.Id);
                //给界面赋值
                ModelToView();
            }
            catch (Exception e)
            {
                MessageBox.Show("数据刷新错误：" + ExceptionUtil.ExceptionMessage(e));
            }
        }

        #endregion

        #region

        //清空数据
        private void ClearView()
        {
            ClearControl(pnlFloor);
        }

        private void ClearControl(Control c)
        {
            foreach (Control cd in c.Controls)
            {
                ClearControl(cd);
            }
            //自定义控件清空
            if (c is CustomEdit)
            {
                c.Tag = null;
                c.Text = "";
            }
            else if (c is CustomDataGridView)
            {
                (c as CustomDataGridView).Rows.Clear();
            }
        }

        private void ClearCtlContent()
        {
            ClearContent(pnlFloor);
        }

        private void ClearContent(Control c)
        {
            foreach (Control cd in c.Controls)
            {
                ClearContent(cd);
            }
            if (c is CustomEdit || c is TextBox)
            {
                c.Tag = null;
                c.Text = "";
            }
        }

        #endregion
    }

}
