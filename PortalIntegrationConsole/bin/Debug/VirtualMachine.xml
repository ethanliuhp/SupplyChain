<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VirtualMachine</name>
    </assembly>
    <members>
        <member name="T:VirtualMachine.SystemAspect.Security.SecurityEssense">
            <summary>
            权限配置基类，主要用于系统角色配置
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityEssense.AuthoriseOnPerRole(System.Int64,System.Int64)">
            <summary>
            判断是否根据人员上岗记录确定权限，此权限优先级别最高
            </summary>
            <param name="roleId">岗位ID</param>
            <param name="perId">操作员ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityEssense.GetOperOnRoles(System.Int64)">
            <summary>
            根据操作员获取所有岗位
            </summary>
            <param name="operId">操作员ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityEssense.RtnProtectedClass(System.String)">
            <summary>
            根据类名获取实例权限保护类
            </summary>
            <param name="clsName">类名</param>
            <returns>ProtectedClass</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityEssense.ConvertSameProClass(System.Type,VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass)">
            <summary>
            角色相同类转换
            </summary>
            <param name="inProCls">保护类</param>
            <returns>ProtectedClass</returns>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SecurityEssense.NakedDao">
            <summary>
            无权限Dao
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SecurityEssense.SysManagerRole">
            <summary>
            系统管理员岗位ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SecurityEssense.PartSysManagerRole">
            <summary>
            分系统管理员岗位ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SecurityEssense.SysRoleClass">
            <summary>
            系统角色类，多个类以","分割
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.OperInPermit(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations)">
            <summary>
            判断操作在赋权表中是否存在
            </summary>
            <param name="inOper"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnDomainByName(System.String)">
            <summary>
            根据类名返回DomainClass定义
            </summary>
            <param name="inDomain">类名</param>
            <returns>DomainClass</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnServiceByName(System.String,System.String)">
            <summary>
            根据类名和方法名返回ServiceMethod定义
            </summary>
            <param name="inService">类名</param>
            <param name="inMethod">方法名</param>
            <returns>ServiceMethod</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.SaveFuncPermission(System.Int64,System.Collections.IList)">
            <summary>
            功能权限设置存盘
            </summary>
            <param name="roleId">角色ID</param>
            <param name="lsPermissions">功能权限集合</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.SaveFuncPermission(System.Int64[],System.Collections.IList)">
            <summary>
            功能权限设置存盘，根据业务组织设置，其下岗位自动赋权
            </summary>
            <param name="allRoles">岗位ID集合</param>
            <param name="lsPermissions">功能权限集合</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.DeleteRoleAllFuncPermissin(System.Int64)">
            <summary>
            功能权限存盘前将相应权限删除
            </summary>
            <param name="roleId">角色ID</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.PermitOperSave(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations)">
            <summary>
            根据传入的操作权限配置存盘
            </summary>
            <param name="inPermit">权限设置</param>        
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnRolePermitByRole(System.Int64)">
            <summary>
            根据角色ID返回所有该角色的权限
            </summary>
            <param name="inRoleId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.ShowMenuOperations(System.Int64)">
            <summary>
            根据当前菜单ID返回当前菜单定义的所有功能操作的枚举类型
            </summary>
            <param name="menuId">菜单ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.ShowMenuOpers(System.Int64)">
            <summary>
            根据当前菜单ID返回所有功能操作
            </summary>
            <param name="menuId">菜单ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnAllMenusByRole(System.Int64)">
            <summary>
            根据角色显示所有有权限的菜单
            </summary>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnAllMenusByRole(System.Int64,System.Int64)">
            <summary>
            根据角色ID和菜单起始节点显示有权限的菜单
            </summary>
            <param name="roleId">角色ID</param>
            <param name="startMenuId">起始菜单ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.ListFatherMenu(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu,System.Collections.IList@,System.Int64)">
            <summary>
            根据菜单判断集合中是否存在父级菜单，不存在即加入
            </summary>
            <param name="nowMenu">当前菜单</param>
            <param name="lsMenu">具有权限菜单集合</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.OrderMenu(System.Collections.IList)">
            <summary>
            根据排序号对菜单排序
            </summary>
            <param name="lsMenu">菜单集合</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnAllOperationByRole(System.Int64)">
            <summary>
            根据角色返回所有具有权限的操作
            </summary>
            <param name="roleId">角色ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnAllOperationByRole(System.Int64,System.Int64)">
            <summary>
            根据角色和菜单ID返回所有具有权限的操作
            </summary>
            <param name="roleId">角色ID</param>
            <param name="menuId">菜单ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.CheckOperationByState(System.Int32,System.Int32,VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations,System.Int64)">
            <summary>
            根据状态权限校验是否具有相应操作的权限
            </summary>
            <param name="stateType">状态权限类型</param>
            <param name="nowState">当前状态</param>
            <param name="nowOper">当前功能操作</param>
            <param name="roleId">角色ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.ShowAllOperations(System.Object,System.Int64,System.Int64)">
            <summary>
            根据单据状态显示业务对象当前角色所能执行的操作
            </summary>
            <param name="nowState">当前状态</param>
            <param name="menuId">业务对象</param>
            <param name="roleId">当前角色</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnSysMenuByFatherId(System.Int64)">
            <summary>
            根据菜单的父节点查找所有的菜单项目
            </summary>
            <param name="inFatherId">菜单项目父节点ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnSysOperByMenu(System.Int64)">
            <summary>
            返回当前菜单项目的所有操作
            </summary>
            <param name="inMenuId">菜单项目ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnSysMenuById(System.Int64)">
            <summary>
            根据菜单项目ID返回菜单项目
            </summary>
            <param name="inMenuId">菜单项目ID</param>
            <returns>菜单项目</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.RtnSysOperationById(System.Int64)">
            <summary>
            根据功能操作ID返回功能操作
            </summary>
            <param name="operId">功能操作ID</param>
            <returns>SysOperations</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.SaveMenuUpdateFather(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu,VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu)">
            <summary>
            业务菜单子节点存盘，更新父节点属性
            </summary>
            <param name="inMenu">子节点</param>
            <param name="fatherMenu">父节点</param>
            <returns>true/false</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.SaveOperations(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations)">
            <summary>
            功能操作存盘
            </summary>
            <param name="inOper">功能操作</param>
            <returns>ture/false</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.UpdataSysMenu(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu)">
            <summary>
            业务菜单更新
            </summary>
            <param name="inMenu">业务菜单</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.UpdateSysOperation(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations)">
            <summary>
            业务操作更新
            </summary>
            <param name="inOper">业务操作</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.DeleteSysMenu(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu)">
            <summary>
            业务菜单删除
            </summary>
            <param name="inMenu">业务菜单</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.SecurityDao.DeleteSysOperation(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations)">
            <summary>
            业务操作删除
            </summary>
            <param name="inOper">业务操作</param>
            <returns>bool</returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethod">
            <summary>
            需要保护的Service方法
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethod.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethod.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethod.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethod.ClassName">
            <summary>
            保护的类名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethod.MethodName">
            <summary>
            保护的Service的方法名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethod.DisplayName">
            <summary>
            显示名称
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission">
            <summary>
            代表对域对象字段访问许可
            当前实现只支持类级访问许可,不支持字段级访问许可,FieldName总是"*"
            目标CLASS必须在DOMAIN包中
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission.TheRole">
            <summary>
            角色(业务岗位)
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission.Target">
            <summary>
            具有权限的DomainClass
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission.FieldName">
            <summary>
            具有权限Domain中对应的属性名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassPermission.Action">
            <summary>
            具有权限Domain中的操作
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.HibernateConfigure">
            <summary>
            NHibernate配置
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable">
            <summary>
            类数据库表
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.TableName">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.ShowName">
            <summary>
            描述名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.TableLevel">
            <summary>
            表的级次 0 主表 1 子表 2 三级子表 3
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.RelateBasicCls">
            <summary>
            是否关联基类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.PropColumns">
            <summary>
            字段集合
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassTable.ClsData">
            <summary>
            关联数据字典
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.SimpleExpression">
            <summary>
            The base class for an <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that compares a single Property
            to a value.
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.AbstractCriterion">
            <summary>
            Base class for <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> implementations.
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.ICriterion">
            <summary>
            An object-oriented representation of a query criterion that may be used as a constraint
            in a <see cref="!:ICriteria"/> query.
            </summary>
            <remarks>
            Built-in criterion types are provided by the <c>Expression</c> factory class.
            This interface might be implemented by application classes but, more commonly, application 
            criterion types would extend <c>AbstractCriterion</c>.
            </remarks>
        </member>
        <member name="M:VirtualMachine.Core.Expression.SimpleExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.SimpleExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.SimpleExpression.ToString">
            <summary></summary>
        </member>
        <member name="P:VirtualMachine.Core.Expression.SimpleExpression.PropertyName">
            <summary>
            Gets the named Property for the Expression.
            </summary>
            <value>A string that is the name of the Property.</value>
        </member>
        <member name="P:VirtualMachine.Core.Expression.SimpleExpression.Value">
            <summary>
            Gets the Value for the Expression.
            </summary>
            <value>An object that is the value for the Expression.</value>
        </member>
        <member name="P:VirtualMachine.Core.Expression.SimpleExpression.Op">
            <summary>
            Get the Sql operator to use for the specific 
            subclass of <see cref="T:VirtualMachine.Core.Expression.SimpleExpression"/>.
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.NotNullExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents "not null" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.NotNullExpression.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.NotNullExpression"/> class for a named
            Property that should not be null.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.AssemblyUtil.LoadFrom(System.String)">
            <summary>
            根据程序集路径获取程序集
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Session.SessionManageAspect">
            <summary>
            SessionManageAspect 的摘要说明。
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu">
            <summary>
            系统菜单项目
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.Name">
            <summary>
            菜单显示名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.MenuLevel">
            <summary>
            菜单级别 99 末级
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.MenuType">
            <summary>
            菜单类型 0 非末级 1 业务单据 2 关联操作 3 统计查询 4 外部功能
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.BusObject">
            <summary>
            具体业务对象
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.MenuFather">
            <summary>
            菜单的父节点
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.Syscode">
            <summary>
            菜单树形显示的字符串，通过“.”分割
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.MenuOperations">
            <summary>
            功能菜单对应的功能操作
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.ClassName">
            <summary>
            实例权限控制用类名，如果一个功能菜单涉及多个类，在此定义最主要类的类名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.OwnerField">
            <summary>
            实例权限用，单据制单人属性的名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.NodeCodeField">
            <summary>
            实例权限用，单据业务组织、资源树、结构树中的SysCode属性名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.SysLink">
            <summary>
            功能调用地址
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.SysLinkSec">
            <summary>
            功能调用地址预留
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.OrderNO">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu.DefaultOper">
            <summary>
            默认操作，1 表示MVC默认功能按钮 0 表示自定义功能按钮
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.IDao">
            <summary>
            查询对象的接口
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.IDao.Max(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最大值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最大值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.IDao.Min(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最小值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最小值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.IDao.Average(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最平均值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最平均值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.IDao.Sum(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求和
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最和的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.IDao.Count(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            计数
            </summary>
            <param name="clazz">类型</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.DogIsOk">
            <summary>
            用于加密
            加密狗状态是否正常
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.ObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            对象查询
            </summary>
            <param name="clazz"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.QueryObjectsWithOneCollection(System.Type,VirtualMachine.Core.ObjectQuery,NHibernate.ISession,System.Collections.IList)">
            <summary>
            query包含一个或者零个贪婪集合字段
            </summary>
            <param name="clazz"></param>
            <param name="query"></param>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Deattach(System.Object)">
            <summary>
            将对象从Session中排除
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Min(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最小值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最小值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Average(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最平均值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最平均值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Sum(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求和
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最和的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Count(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            计数
            </summary>
            <param name="clazz">类型</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.CollectionPropertyGroup">
            <summary>
            集合字段分组对象,Name可能是复杂名字(x.y.z)
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.PropertyPathManager">
            <summary>
            unit test:UtAliasManager.TestPropertyPathManager
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.PropertyPathManager.ExtractCollectionPart(System.String,System.Type)">
            <summary>
            从属性路径中解析出前面的集合属性路径
            "TheCategory.Books"==ExtractCollectionPart("TheCategory.Books.Name");
            </summary>
            <param name="path"></param>
            <param name="aType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.PropertyPathManager.AnalyseFetchMode(System.Collections.IDictionary)">
            <summary>
            将集合属性分组提取到properties中，并且从fetchModes里删除
            </summary>
            <param name="fetchModes"></param>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.FilterWorker">
            <summary>
            过滤对象的集合类字段
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.ObjectQueryUtil">
            <summary>
            翻译ObjectQuery.解析Criterions字符串,自动生成子查询
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.ObjectQueryUtil.TranlateFetchMode(VirtualMachine.Core.ObjectQuery)">
            <summary>
            转换FetchMode
            比如将X.Y.Z翻译为三个FetchMode
            X
            X.Y
            X.Y.Z
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.ObjectQueryUtil.IsComplexName(System.String)">
            <summary>
            是否复杂名字
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.ObjectQueryUtil.ListAtomicCriterions(NHibernate.Criterion.ICriterion,Iesi.Collections.ISet,Iesi.Collections.ISet)">
            <summary>
            list all criterion has not logic expression,and it's property name is complex
            </summary>
            <param name="cri"></param>
            <param name="atomicCriterions"></param>
            <param name="complexPropertyNames"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.ObjectQueryUtil.TranslateObjectQuery(VirtualMachine.Core.ObjectQuery,System.Type)">
            <summary>
            分析FetchMode和Criterion中"."为分割符的字符串，为它们创建别名，并且用别名替换Criterion中的属性名
            返回别名列表
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.ObjectQueryUtil.ObjectQueryToHql(System.Type,VirtualMachine.Core.ObjectQuery,System.String,System.String)">
            <summary>
            翻译ObjectQuery到Hql
            </summary>
            <param name="clazz"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Alias.Clazz">
            <summary>
            当前别名对应的类型
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Alias.Path">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.Alias.Alias1">
            <summary>
            别名名称
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.AliasManager.TranslatePath(System.String)">
            <summary>
            翻译属性串为带别名的属性串
            input:class1.class2.class3.field1
            output:class1class2class3.field1
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateDaoImpl.AliasManager.CreateAliasList(Iesi.Collections.ISet)">
            <summary>
            input:
              "TheBookInfo.Owner.TheAddress.TheCountry.Name"
            output:
            "TheBookInfo", "TheBookInfo";
            "TheBookInfo.Owner", "TheBookInfoOwner";
            "TheBookInfoOwner.TheAddress.TheCountry", "TheBookInfoOwnerTheAddressTheCountry";
            UnitTest:
              UtAliasManager
            </summary>
            <param name="complexPropertyNames"></param>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep">
            <summary>
            审批步骤
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.Index">
            <summary>
            步骤号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.ShowName">
            <summary>
            审批步骤显示名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.TheAuditDefine">
            <summary>
            审批单据
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.TheAuditScheme">
            <summary>
            审批方案
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep.RoleRelation">
            <summary>
            审批角色关系
            0 单角色审批
            1 多角色且关系审批
            2 多角色或关系审批
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo">
            <summary>
            审批值对象
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.AuditType">
            <summary>
            审批类型
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.BusEntityId">
            <summary>
            审批对象ID
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.AuditDate">
            <summary>
            审批时间
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.NowStep">
            <summary>
            当前审批步骤，如果不确定赋null
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.ParaArg">
            <summary>
            审批相关参数
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.AuditOpinion">
            <summary>
            审批意见
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.NewObj">
            <summary>
            审批新生成对象
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo.ResultInfo">
            <summary>
            审批结果
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.AuditMethodEnum">
            <summary>
            审批方式枚举
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.AuditMethodEnum.AuditPass">
            <summary>
            审批通过
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.AuditMethodEnum.UnAudit">
            <summary>
            反审
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.AuditMethodEnum.AuditFail">
            <summary>
            审批不通过
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Util.ConsoleCaptureWriter">
            <summary>
            Console捕获器
            用法:
                FeedBackWriter aa = new FeedBackWriter(文本框名称, false, ";");
                Console.SetOut(aa);
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.ConsoleCaptureWriter.#ctor(System.Windows.Forms.TextBox)">
            <summary>
            
            </summary>
            <param name="textBox"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ConsoleCaptureWriter.#ctor(System.Windows.Forms.TextBox,System.Boolean)">
            <summary>
            
            </summary>
            <param name="textBox"></param>
            <param name="isShowTimeLineHeader"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ConsoleCaptureWriter.#ctor(System.Windows.Forms.TextBox,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="textBox">文本框</param>
            <param name="isShowTimeLineHeader">是否行头显示时间</param>
            <param name="lineSuffix">行尾符号</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ConsoleCaptureWriter.#ctor(System.Windows.Forms.TextBox,System.String)">
            <summary>
            
            </summary>
            <param name="textBox">文本框</param>
            <param name="lineSuffix">行尾符号</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ConsoleCaptureWriter.Write(System.String)">
            <summary>
            写单行
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ConsoleCaptureWriter.WriteLine(System.String)">
            <summary>
            写单行，并换行
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ConsoleCaptureWriter.ReplaceString(System.String)">
            <summary>
            按指定的替换每个捕获到的字符串
            </summary>
            <param name="text">捕获到的字符串</param>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.Component.Util.ConsoleCaptureWriter.HashtableReplace">
            <summary>
            需要替换的字符串(key原值，value 对应的新值)
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Util.ConsoleCaptureWriter.IsTimeLineHeader">
            <summary>
            是否每个命令前显示时间
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Util.ConsoleCaptureWriter.Encoding">
            <summary>
            
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Util.ConsoleCaptureWriter.SetTextCallback">
            <summary>
            定义TextBox事件
            </summary>
            <param name="name">写TextBox内容</param>
        </member>
        <member name="T:VirtualMachine.Component.ServiceFactory">
            <summary>
            客户端服务工厂
            2007.3.16 谷词 除了GetContexts方法以外,其他所有的方法都已经过时,
            请使用ContextConfig初始化Context
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ServiceFactory.FindDogDll">
            <summary>
            用于加密
            是否找到加密狗驱动
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ServiceFactory.Data">
            <summary>
            用于加密
            加密狗中的数据
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ServiceFactory.timer">
            <summary>
            用于加密
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.ReadDog(System.Object,System.EventArgs)">
            <summary>
            用于加密
            读加密狗
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.InitService(System.String)">
            <summary>
            服务初始化
            如果App.config中的RemoteSwitch为0则加载本地的AppContext,否则加载远程AppContext.
            加载本地的AppContext时候 参数appName没有意义,配置文件地址从App.config中的DefaultAppContextPath获得
            加载远程AppContext时,如果App.config中包含RemoteConfigFileName,则服务器
            根据此文件生成客户端配置文件(只包含appName所指称的程序中的部分服务组件).
            如果没有找到RemoteConfigFileName，则在客户端生成appName所指称的程序中全部服务组件代理
            例子:
            ServiceFactory factory = new ServiceFactory();
            factory.InitService("app2");
            ctx = AppDomain.CurrentDomain.GetData("AppContext") as Spring.Context.IApplicationContext;
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.InitService">
            <summary>
            服务初始化
            如果App.config中的RemoteSwitch为0则加载本地的AppContext,否则加载远程AppContext.
            加载本地的AppContext时候 参数appName没有意义,配置文件地址从App.config中的DefaultAppContextPath获得
            加载远程AppContext时,如果App.config中包含RemoteConfigFileName,则服务器
            根据此文件生成客户端配置文件(只包含appName所指称的程序中的部分服务组件).
            如果没有找到RemoteConfigFileName，则根据App.config中AppName生成客户端配置文件，其中包括AppName所指称的程序中全部服务组件代理
            加载远程AppContext时,ServiceFactory会注册一个客户端命令侦听器，同时CacheSynchornyzer作版本检查,注册自己到Server
            例子:
            ServiceFactory factory = new ServiceFactory();
            factory.InitService();
            ctx = AppDomain.CurrentDomain.GetData("AppContext") as Spring.Context.IApplicationContext;
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.GetServiceByName(System.String)">
            <summary>
            根据帐套获取服务
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.InitRemoteService(System.String,System.String)">
            <summary>
            加载远程化服务
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.FindUnusedPort(System.Net.IPAddress)">
            <summary>
            查找可用的端口
            </summary>
            <param name="localAddr"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.SetContext(System.String)">
            <summary>
            设置生成config文件的ip,port 信息
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.GetSubString(System.String,System.String,System.String)">
            <summary>
            左匹配.
            </summary>
            <param name="sourceString"></param>
            <param name="beginRemovedString"></param>
            <param name="endRemovedString"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.ServiceFactory.InitLocalService">
            <summary>
            加载本地化服务
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission">
            <summary>
            角色实例权限设置
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.RoleId">
            <summary>
            角色ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.BusObject">
            <summary>
            业务对象(废弃)
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.Permissions">
            <summary>
            拥有的一组权限
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.ExcludePermissions">
            <summary>
            需要排除的一组权限
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.PermitType">
            <summary>
            赋权方式 0 根据岗位设置权限 1 根据人员上岗设置权限
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.OperOnRole">
            <summary>
            人员上岗情况，优先级最先 0 表示按岗位设置
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.ProtectCls">
            <summary>
            实例权限保护类
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission.AuthorOperId">
            <summary>
            赋权人ID
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Log.DaoLogEntry">
            <summary>
            一条域对象变化日志
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Log.DaoLogEntry.Action">
            <summary>
            操作类型，可能是
            1：增，2：删，3：改
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Log.DaoLogEntry.Role">
            <summary>
            登陆角色
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Log.DaoLogEntry.User">
            <summary>
            操作员
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Log.DaoLogEntry.DomainType">
            <summary>
            域对象类
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Log.DaoLogEntry.DirtyPropertys">
            <summary>
            脏属性列表。一组ChangedProperty
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.ClientSideProxy.ICommandProcessor.BeforeExecuteCommand(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            <summary>
            处理Command
            如果返回false表示Command还没有被执行
            如果返回true表示Command已经被执行.结果放在command.RetureValue中
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.FlushCachInterceptor">
            <summary>
            清空服务缓存的拦截器
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Cache.FlushCachInterceptor.Mediator">
            <summary>
            清空服务缓存的消息广播中心
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Cache.FlushCachInterceptor.CacheManagerName">
            <summary>
            服务缓存区间名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Cache.FlushCachInterceptor.FlushMethodNames">
            <summary>
            触发清空服务缓存的方法名
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject">
            <summary>
            业务对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.ObjType">
            <summary>
            业务类型
            1 业务实体 2 关联操作 3 统计查询 4 外部功能
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.OrderNO">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.BelongModule">
            <summary>
            所归属的模块
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.AllRelateClass">
            <summary>
            包含的类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.SysLink">
            <summary>
            功能调用地址
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject.SysLinkSec">
            <summary>
            功能调用地址预留
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter">
            <summary>
            业务系统
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.OrderNO">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter.BusModules">
            <summary>
            模块集合
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessOperators">
            <summary>
            业务系统使用人员
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessOperators.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessOperators.PerName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.PropertyExpression">
            <summary>
            Superclass for an <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents a
            constraint between two properties (with SQL binary operators).
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.PropertyExpression.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.PropertyExpression"/> class 
            that compares two mapped properties.
            </summary>
            <param name="lhsPropertyName">The name of the Property to use as the left hand side.</param>
            <param name="rhsPropertyName">The name of the Property to use as the right hand side.</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.PropertyExpression.ToString">
            <summary></summary>
        </member>
        <member name="P:VirtualMachine.Core.Expression.PropertyExpression.Op">
            <summary>
            Get the Sql operator to use for the property expression.
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.MatchMode">
            <summary>
            Represents an strategy for matching strings using "like".
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.#ctor(System.Int32,System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.MatchMode"/> class.
            </summary>
            <param name="intCode">The code that identifies the match mode.</param>
            <param name="name">The friendly name of the match mode.</param>
            <remarks>
            The parameter <c>intCode</c> is used as the key of <see cref="T:System.Collections.IDictionary"/>
            to store instances and to ensure only instance of a particular <see cref="T:VirtualMachine.Core.Expression.MatchMode"/>
            is created.
            </remarks>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.ToString">
            <summary>
            The string representation of the <see cref="T:VirtualMachine.Core.Expression.MatchMode"/>.
            </summary>
            <returns>The friendly name used to describe the <see cref="T:VirtualMachine.Core.Expression.MatchMode"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.ToMatchString(System.String)">
            <summary>
            Convert the pattern, by appending/prepending "%"
            </summary>
            <param name="pattern">The string to convert to the appropriate match pattern.</param>
            <returns>
            A <see cref="T:System.String"/> that contains a "%" in the appropriate place
            for the Match Strategy.
            </returns>
        </member>
        <member name="F:VirtualMachine.Core.Expression.MatchMode.Exact">
            <summary>
            Match the entire string to the pattern
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Expression.MatchMode.Start">
            <summary>
            Match the start of the string to the pattern
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Expression.MatchMode.End">
            <summary>
            Match the end of the string to the pattern
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Expression.MatchMode.Anywhere">
            <summary>
            Match the pattern anywhere in the string
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.MatchMode.ExactMatchMode">
            <summary>
            The <see cref="T:VirtualMachine.Core.Expression.MatchMode"/> that matches the entire string to the pattern.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.ExactMatchMode.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.MatchMode.ExactMatchMode"/> class.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.ExactMatchMode.ToMatchString(System.String)">
            <summary>
            Converts the string to the Exact MatchMode.
            </summary>
            <param name="pattern">The string to convert to the appropriate match pattern.</param>
            <returns>The <c>pattern</c> exactly the same as it was passed in.</returns>
        </member>
        <member name="T:VirtualMachine.Core.Expression.MatchMode.StartMatchMode">
            <summary>
            The <see cref="T:VirtualMachine.Core.Expression.MatchMode"/> that matches the start of the string to the pattern.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.StartMatchMode.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.MatchMode.StartMatchMode"/> class.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.StartMatchMode.ToMatchString(System.String)">
            <summary>
            Converts the string to the Start MatchMode.
            </summary>
            <param name="pattern">The string to convert to the appropriate match pattern.</param>
            <returns>The <c>pattern</c> with a "<c>%</c>" appended at the end.</returns>
        </member>
        <member name="T:VirtualMachine.Core.Expression.MatchMode.EndMatchMode">
            <summary>
            The <see cref="T:VirtualMachine.Core.Expression.MatchMode"/> that matches the end of the string to the pattern.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.EndMatchMode.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.MatchMode.EndMatchMode"/> class.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.EndMatchMode.ToMatchString(System.String)">
            <summary>
            Converts the string to the End MatchMode.
            </summary>
            <param name="pattern">The string to convert to the appropriate match pattern.</param>
            <returns>The <c>pattern</c> with a "<c>%</c>" appended at the beginning.</returns>
        </member>
        <member name="T:VirtualMachine.Core.Expression.MatchMode.AnywhereMatchMode">
            <summary>
            The <see cref="T:VirtualMachine.Core.Expression.MatchMode"/> that exactly matches the string
            by appending "<c>%</c>" to the beginning and end.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.AnywhereMatchMode.#ctor">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.MatchMode.AnywhereMatchMode"/> class.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.MatchMode.AnywhereMatchMode.ToMatchString(System.String)">
            <summary>
            Converts the string to the Exact MatchMode.
            </summary>
            <param name="pattern">The string to convert to the appropriate match pattern.</param>
            <returns>The <c>pattern</c> with a "<c>%</c>" appended at the beginning and the end.</returns>
        </member>
        <member name="T:VirtualMachine.Core.Attributes.ComposeAttribute">
            <summary>
            Uml中的组成关系
            Map文件中的Cascade策略为All-Delete-Orphan
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.Transform">
            <summary>
            程序转化策略
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.ITransform">
            <summary>
            ITransform代表一个技术切面，它既是编译器也是运行时
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.ITransform.TransformApp(VirtualMachine.Core.AppHost.DataOfTransform)">
            <summary>
            转化程序
            </summary>
            <param name="app"></param>
            <param name="data"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.ITransform.Init">
            <summary>
            初始化本切面
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Transform.TransformApp(VirtualMachine.Core.AppHost.DataOfTransform)">
            <summary>
            转化程序
            </summary>
            <param name="app"></param>
            <param name="data"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Transform.Init">
            <summary>
            加载一个程序
            </summary>
            <param name="app"></param>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.Transform.IsScript">
            <summary>
            是否是脚本，脚本可以独立运行，非脚本只能嵌入到其他脚本中运行
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.AppHost.Design.AppServer.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.AppServer.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.AppServer.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.DataAccess.OracleDataAccess">
            <summary>
            Oracle数据库操作数据
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.IDataAccess.GetOutParameterValue(System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter},System.String,System.String)">
            <summary>
            执行存储过程获取单个返回值
            </summary>
            <param name="lsParams">参数</param>
            <param name="commStr">存储过程</param>
            <param name="paramKey">返回值</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.IDataAccess.GetOutParameterValues(System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter},System.String,System.String[])">
            <summary>
            执行存储过程返回多个返回值
            </summary>
            <param name="lsParams">参数</param>
            <param name="commStr">存储过程</param>
            <param name="paramKey">返回值数组</param>
            <returns>object[]</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.OpenConnection">
            <summary>
            打开联接
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.CloseConnection">
            <summary>
            关闭联接
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.SetCommandParameter(Oracle.DataAccess.Client.OracleCommand,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter},System.Boolean)">
            <summary>
            参数设置
            </summary>
            <param name="sqlComm">OracleCommand</param>
            <param name="lsParams">参数集合</param>
            <param name="isForQuery">是否为Query设置参数</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.SetProcedureOutParam(Oracle.DataAccess.Client.OracleCommand)">
            <summary>
            确定存储过程的返回值
            </summary>
            <param name="procComm">OracleCommand</param>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.OpenQueryDataTable(System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            传入查询Sql语句,返回DataTable
            </summary>
            <param name="queryStr">查询语句</param>
            <param name="lsParams">参数集合</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.OpenQueryDataSet(System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            传入Sql语句，返回DataSet
            </summary>
            <param name="queryStr">sql语句</param>
            <param name="lsParams">参数集合</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.OpenQueryDataSetManyTable(System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter},System.Data.DataSet,System.String)">
            <summary>
            查询结果在同一DataSet 多个Table
            </summary>
            <param name="queryStr">查询语句</param>
            <param name="lsParams">参数</param>
            <param name="fillDs">DataSet</param>
            <param name="tableName">表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.OpenQueryReader(System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            传入Sql语句，返回DataReader
            </summary>
            <param name="sqlQuery">Sql字串</param>
            <param name="lsParams">参数集合</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.OpenQueryScalar(System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            传入Sql语句，返回Scalar
            </summary>
            <param name="queryStr"></param>
            <param name="lsParams">参数集合</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.ExecuteNonQuery(System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            执行SQL语句没有返回值
            </summary>
            <param name="commStr">Sql字串</param>
            <param name="lsParams">参数集合</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.ExecuteNonQuery(System.Data.CommandType,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter},System.String)">
            <summary>
            执行Sql没有返回值
            </summary>
            <param name="commType">命令类型</param>
            <param name="commStr">Sql字串</param>
            <param name="lsParams">参数集合</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.ExecuteDataTable(System.Data.CommandType,System.String,System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            执行Sql返回DataTable
            </summary>
            <param name="commType">命令类型</param>
            <param name="commStr">执行Sql</param>
            <param name="selectSql">查询Sql</param>
            <param name="lsParams">参数集合</param>
            <returns>DataTable</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.ExecuteDataSet(System.Data.CommandType,System.String,System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            执行Sql返回DataSet
            </summary>
            <param name="commType">命令类型</param>
            <param name="commStr">执行Sql</param>
            <param name="selectSql">查询Sql</param>
            <param name="lsParams">参数集合</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.ExecuteDataReader(System.Data.CommandType,System.String,System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            执行Sql返回IDataReader
            </summary>
            <param name="commType">命令类型</param>
            <param name="commStr">执行Sql</param>
            <param name="selectSql">查询Sql</param>
            <param name="lsParams">参数集合</param>
            <returns>IDataReader</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.ExecuteScalar(System.Data.CommandType,System.String,System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            执行Sql返回Scalar
            </summary>
            <param name="commType">命令类型</param>
            <param name="commStr">执行Sql</param>
            <param name="selectSql">查询Sql</param>
            <param name="lsParams">参数集合</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.SetInParameterForQuery(System.String,Oracle.DataAccess.Client.OracleDbType,System.Object,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter}@)">
            <summary>
            设置查询传入参数
            </summary>
            <param name="inParamKey">参数</param>
            <param name="inParamType">参数类型</param>
            <param name="inParamValue">参数值</param>
            <param name="lsParams">参数集合</param>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.SetInParameterForExec(System.String,Oracle.DataAccess.Client.OracleDbType,System.Object,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter}@)">
            <summary>
            设置执行传入参数
            </summary>
            <param name="inParamKey">参数</param>
            <param name="inParamType">参数类型</param>
            <param name="inParamValue">参数值</param>
            <param name="lsParams">参数集合</param>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.SetOutParameter(System.String,Oracle.DataAccess.Client.OracleDbType,System.Int32,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter}@)">
            <summary>
            设置传出参数
            </summary>
            <param name="inParamKey">参数</param>
            <param name="inParamType">参数类型</param>
            <param name="inParamSize">参数大小</param>
            <param name="lsParams">参数集合</param>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.GetOutParameterValue(System.String,System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter})">
            <summary>
            传入参数定义，获取参数返回值
            </summary>
            <param name="paramKey">参数定义</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.GetOutParameterValue(System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter},System.String,System.String)">
            <summary>
            执行存储过程获得返回值，只限一个返回值
            </summary>
            <param name="lsParams">传入参数</param>
            <param name="commStr">执行存储过程</param>
            <param name="paramKey">参数</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.OracleDataAccess.GetOutParameterValues(System.Collections.Generic.IList{VirtualMachine.Core.DataAccess.DataAccessParameter},System.String,System.String[])">
            <summary>
            执行存储过程，返回多个值
            </summary>
            <param name="lsParams">传入参数</param>
            <param name="commStr">执行存储过程</param>
            <param name="paramKey">参数集合</param>
            <returns>object[]</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityUtil.SetLogVmInfo(System.Int64,System.Int64,System.String)">
            <summary>
            设置VM所需登录信息
            </summary>
            <param name="roleId">岗位ID</param>
            <param name="operId">操作员ID</param>
            <param name="roleSyscode">岗位Syscode</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityUtil.SetLogVmInfo(System.Int64,System.Int64,System.String,System.String,System.DateTime)">
            <summary>
            设置VM所需登录信息
            </summary>
            <param name="roleId">岗位ID</param>
            <param name="operId">操作员ID</param>
            <param name="roleSyscode">岗位Syscode</param>
            <param name="groupName">帐套名</param>
            <param name="loginTime">登录时间</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityUtil.GetLogVmInfo">
            <summary>
            获取VM登录信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityUtil.GetLogRoleId">
            <summary>
            获取登录岗位ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityUtil.GetLogOperId">
            <summary>
            获取登录操作员ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityUtil.GetLogSyscode">
            <summary>
            获取登录岗位Syscode
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SecurityUtil.GetLogDate">
            <summary>
            获取登录时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethodPermission">
            <summary>
            代表一个方法调用的许可(一个user case 许可)
            目标CLASS必须在SERVICE包中
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethodPermission.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethodPermission.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethodPermission.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethodPermission.TheRole">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.ServiceMethodPermission.Target">
            <summary>
            对应的Service方法
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.Util.RemoteInterceptor.ReplaceExpression(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            <summary>
            将command的参数中的nhibernate查询表达式，替换为我们自定义的可序列化的表达式
            </summary>
            <param name="command"></param>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.IFetchModeProxy.IsLazyProxy">
            <summary>
            是否是懒惰代理，懒惰代理只有Id属性可以被访问
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.IFetchModeProxy.Target">
            <summary>
            被代理的目标
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.IFetchModeProxy.FetchModes">
            <summary>
            贪婪加载的路径集合
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.IFetchModeProxy.Factory">
            <summary>
            生成代理的工厂
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.IFetchModeProxy.FetchModeService">
            <summary>
            FetchMode管理器
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.Sample.SampleEntityProxy.FetchModes">
            <summary>
            贪婪加载的路径集合
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.HibernateSessionFactoryBuilder">
            <summary>
             NHibernate SessionFactory生成器
             </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Persistent.HibernateSessionFactoryBuilder.timer">
            <summary>
            用于加密
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.HibernateSessionFactoryBuilder.VerifyDog(System.Object,System.EventArgs)">
            <summary>
            用于加密
            校验加密狗数据
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Disconnected.LogicApp.WriteMethods">
            <summary>
            写方法列表
            格式:springid.methodName
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Disconnected.LogicApp.ReadMethods">
            <summary>
            读方法列表
            格式:springid.methodName
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails">
            <summary>
            表单从表
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.GetRelationByRule(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            根据规则查询关系
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.GetReftatus(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            获得指定规则的引用状态
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.ChangeRefStatus(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Decimal)">
            <summary>
            修改引用状态
            </summary>
            <param name="rule">当前规则</param>
            <param name="changeValue">改变的值</param>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.InitialDetailByForward(System.Object,System.Int32)">
            <summary>
            根据前驱初始化当前相关属性
            </summary>
            <param name="forwardDetail">前驱明细</param>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.InitialDetailByForwards(System.Collections.IList,System.Int32)">
            <summary>
            根据前驱集合初始化当前相关属性
            </summary>
            <param name="forwardDetails"></param>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.No">
            <summary>
            序号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.Master">
            <summary>
            表单主表
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.ForwardDets">
            <summary>
            明细前驱对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.IsOver">
            <summary>
            引用标志 0 未完成 1 已完成
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.RefQuantity">
            <summary>
            相对于当前规则的已引用量，临时变量，不做数据库持久化
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntityDetails.RefStatus">
            <summary>
            引用状态列表 目标类型 DetailRefStatus
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.LePropertyExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "less than or equal" constraint 
            between two properties.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.LePropertyExpression.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VirtualMachine.Core.Expression.LePropertyExpression"/> class
            that compares two mapped properties using an "less than or equal" constraint.
            </summary>
            <param name="lhsPropertyName">The name of the Property to use as the left hand side.</param>
            <param name="rhsPropertyName">The name of the Property to use as the right hand side.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LePropertyExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.LePropertyExpression"/>.
            </summary>
            <value>The string "<c> &lt;= </c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.Expression.GeExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "greater than or equal" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.GeExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.GeExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.GeExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.GeExpression"/>.
            </summary>
            <value>The string "<c> &gt;= </c>"</value>
        </member>
        <member name="M:VirtualMachine.Component.Util.ExpressionUtil.AddPrefix(NHibernate.Criterion.ICriterion,System.String)">
            <summary>
            为属性名添加前缀
            </summary>
            <param name="cri"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ExpressionUtil.AddPrefix(VirtualMachine.Core.ObjectQuery,System.String,System.Boolean)">
            <summary>
            为查询中所有的查询条件,fetchmode ,order 添加前缀
            查询条件全部变成Virtuamachine的表达式
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ExpressionUtil.VeToNe(VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            翻译虚拟机查询表达式到nhibernate查询表达式
            </summary>
            <param name="cri"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ExpressionUtil.NeToVe(NHibernate.Criterion.ICriterion)">
            <summary>
            翻译Nhibernate查询表达式到虚拟机查询表达式
            </summary>
            <param name="cri"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ExpressionUtil.ConvertToSerializable(VirtualMachine.Core.ObjectQuery)">
            <summary>
            将query中的nhibernate的criterion翻译为虚拟机的可序列化的查询表达式
            将nhibernate的Order翻译为可序列化的Order
            将FetchMode翻译为字符串
            </summary>
            <param name="query"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ExpressionUtil.ConvertToHibernateCriterion(VirtualMachine.Core.ObjectQuery)">
            <summary>
            将query中的虚拟机的可序列化的查询表达式翻译为nhibernate的criterion
            将可序列化的Order翻译为nhibernate的Order
            将字符串翻译为FetchMode 
            </summary>
            <param name="query"></param>
        </member>
        <member name="T:VirtualMachine.Core.Expression.Conjunction">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that Junctions together multiple 
            <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s with an <c>and</c>
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.Junction">
            <summary>
            A sequence of logical <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s combined by some associative
            logical operator.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Junction.Add(VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Adds an <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to the list of <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s
            to junction together.
            </summary>
            <param name="criterion">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to add.</param>
            <returns>
            This <see cref="T:VirtualMachine.Core.Expression.Junction"/> instance.
            </returns>
        </member>
        <member name="P:VirtualMachine.Core.Expression.Junction.Op">
            <summary>
            Get the Sql operator to put between multiple <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s.
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.Expression.Conjunction.Op">
            <summary>
            Get the Sql operator to put between multiple <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s.
            </summary>
            <value>The string "<c> and </c>"</value>
        </member>
        <member name="T:VirtualMachine.Component.Util.ValidateUtil">
            <summary>
            常用校验函数
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.ValidateUtil.isBlank(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="strInput">传入字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ValidateUtil.isNumeric(System.String)">
            <summary>
            是否为数字
            </summary>
            <param name="strInput">传入字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ValidateUtil.isDate(System.String)">
            <summary>
            是否为日期
            </summary>
            <param name="strInput">传入字符串</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ValidateUtil.checkDatePart(System.String,System.String,System.String)">
            <summary>
            校验年月日是否合法
            </summary>
            <param name="year">年</param>
            <param name="month">月</param>
            <param name="day">日</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ValidateUtil.isNull(System.String)">
            <summary>
            是否为null
            </summary>
            <param name="strInput">输入字符串</param>
            <returns>bool</returns>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryRuleService">
            <summary>
            分类树规则Service
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryRuleService.SaveCategoryRule(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule)">
            <summary>
            分类树规则存盘
            </summary>
            <param name="rule">分类树规则</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryRuleService.DeleteCategoryRule(System.Collections.IList)">
            <summary>
            分类树规则删除
            </summary>
            <param name="lstRule">分类树规则</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryRuleService.DeleteCategoryRule(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule)">
            <summary>
            分类树规则删除
            </summary>
            <param name="rule">分类树规则</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryRuleService.GetCategoryRules(System.Type)">
            <summary>
            根据分类树获取所有分类树规则
            </summary>
            <param name="treeType">类型</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryRuleService.GetCategoryRules(System.Type,System.Type)">
            <summary>
            根据父节点获取所有分类树规则
            </summary>
            <param name="treeType">类型</param>
            <param name="parentNodeType">父节点类型</param>
            <returns>IList</returns>
        </member>
        <member name="T:VirtualMachine.Core.Attributes.MasterRefStatusType">
            <summary>
            主表引用状态类类型
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Attributes.MasterRefStatusType.RefType">
            <summary>
            状态类类型
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Attributes.DetailRefStatusType">
            <summary>
            明细引用状态类类型
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Attributes.DetailRefStatusType.FieldName">
            <summary>
            明细字段名
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Attributes.DetailRefStatusType.RefType">
            <summary>
            状态类类型
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Attributes.DetailRefStatusType.DetailType">
            <summary>
            明细类类型
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.AppModel.ApplicatinModel">
            <summary>
            技术无关的纯业务程序描述
            unit test:VirtualMachineTest.Core.AppModel.UtAppModel
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.StateTrack.ServerSideTrack.Start">
            <summary>
            启动,构造初始状态
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.LogService.ILogService">
            <summary>
            日志服务接口
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.ISysAuthentic.GetOperatorByRole(System.Int64)">
            <summary>
            根据岗位确定在岗的操作员
            </summary>
            <param name="roleId">岗位ID</param>
            <returns>IList</returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InstancePermission">
            <summary>
            权限
            实例安全的原子单元
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InstancePermission.PermissionRebuildObjectQuery(VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass,System.Int64)">
            <summary>
            虚方法根据权限设置修改ObjectQuery
            </summary>
            <param name="nowQuery">当前ObjectQuery</param>
            <param name="proClass">当前受保护类</param>
            <returns>ObjectQuery</returns>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InstancePermission.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InstancePermission.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InstancePermission.RolePermission">
            <summary>
            角色权限设置
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InstancePermission.SourceType">
            <summary>
            指定实例权限的来源, 1 所赋权限
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.ICommandHandler.ExecuteCommand(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            <summary>
            执行命令
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.CommandHandler.ExecuteCommand(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            <summary>
            执行命令
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.FetchModeManager.IsEager(System.String,System.Object)">
            
            <param name="propertyName"></param>
            <param name="target"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.FetchModeManager.CreateFetchModeList(System.String,System.Object)">
            
            <param name="propertyName"></param>
            <param name="target"></param>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass">
            <summary>
            常驻内存类
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass.OrderNo">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass.EagerProp">
            <summary>
            需要Eager的属性，如果没有Transient标签，第一次初始化时需要将外联对象Eager出来
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryClass.LsCons">
            <summary>
            进入内存实例的条件
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.FindSchemesByDefineAndRole(System.Type,System.Int64)">
            <summary>
            根据审批单据和角色下拉选择审批方案
            </summary>
            <param name="auditType">审批单据</param>
            <param name="auditRole">审批角色</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.FindStepByRole(System.Type,System.Int64,System.Int64)">
            <summary>
            根据审批单据角色和审批方案确定审批步骤
            </summary>
            <param name="auditClass">审批单据</param>
            <param name="roleId">角色</param>
            <param name="schemeId">审批方案ID</param>
            <returns>AuditStep</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.FindAllPermitStepByRole(System.Type,System.Int64,System.Int64)">
            <summary>
            根据单据和审批单据、审批方案确定具有权限的步骤
            </summary>
            <param name="auditClass">审批单据</param>
            <param name="roleId">角色</param>
            <param name="schemeId">审批方案</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.AuditShowProperties(System.Type,System.Int64)">
            <summary>
            显示审批单据显示属性
            </summary>
            <param name="nowType">类型</param>
            <param name="schemeId">审批方案Id</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.FindObjectForAudit(System.Type,VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep,System.Int64)">
            <summary>
            根据审批单据审批步骤角色确定待审清单
            </summary>
            <param name="auditobj">审批单据</param>
            <param name="stepnow">审批步骤</param>
            <param name="auditRoleId">角色</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.FindObjectForUnAudit(System.Type,VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep,System.Int64)">
            <summary>
            根据审批单据审批步骤角色确定待反审单据
            </summary>
            <param name="auditobj">审批单据</param>
            <param name="stepnow">审批角色</param>
            <param name="auditRoleId">角色</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.BatchAuditOperation(System.Collections.Generic.IList{VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo},VirtualMachine.Patterns.BusinessEssence.Domain.AuditMethodEnum)">
            <summary>
            批量操作
            </summary>
            <param name="lsInfo">信息集合</param>
            <param name="operType">操作类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.Audit(VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo)">
            <summary>
            审批操作
            </summary>
            <param name="nowAudit">条件</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.AuditLose(VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo)">
            <summary>
            审批不通过
            </summary>
            <param name="failInfo">条件</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.UnAudit(VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo)">
            <summary>
            反审
            </summary>
            <param name="nowInfo">条件</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditService.ShowAuditFails(System.Int64,System.Int64)">
            <summary>
            显示所有反审不通过单据
            </summary>
            <param name="operId">操作员ID</param>
            <param name="roleId">岗位ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.GetAuditDefineByType(System.Type)">
            <summary>
            根据类型获取审批单据定义
            </summary>
            <param name="nowType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.RtnLastStep(VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep)">
            <summary>
            根据传入的审批步骤返回上一步审批的审批步骤
            </summary>
            <param name="inStep">传入审批步骤</param>
            <returns>AuditStep</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.RtnNextStep(VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep)">
            <summary>
            返回传入的审批步骤的下一步审批的审批步骤
            </summary>
            <param name="inStep">审批步骤</param>
            <returns>AuditStep</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.RtnAuditRoles(VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep)">
            <summary>
            根据传入的审批步骤，返回具有审批权限的角色
            </summary>
            <param name="inStep">审批步骤</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.ModifyNextRoles(System.String,System.String)">
            <summary>
            根据当前角色和下步角色字符串，将当前角色从下步角色字符串中排除
            用于角色关系为且关系的情况
            </summary>
            <param name="nowRole">当前角色</param>
            <param name="nextRoles">下步审批角色字串</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.AddNextRoles(System.String,System.String)">
            <summary>
            根据当前角色和下步角色字符串，将当前角色加入下步角色字符串中
            用于角色关系为且关系的情况
            </summary>
            <param name="nowRole">当前角色</param>
            <param name="nextRoles">下步审批角色字串</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.RtnAllPermitStepsByRole(System.Type,System.Int64)">
            <summary>
            根据待审批单据和审批角色返回角色具有当前单据所有审批方案的审批步骤
            </summary>
            <param name="auditObj">审批单据字符串</param>
            <param name="auditRole">审批角色</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.RtnAllPermitStepsByRole(System.Int64,System.Int64)">
            <summary>
            根据审批方案和审批角色确定具有权限的审批步骤
            </summary>
            <param name="schemeId">审批方案ID</param>
            <param name="auditRoleId">审批角色ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.RtnFirstStep(System.Int64,System.Int64)">
            <summary>
            根据业务单据和审批方案确定第一步审批步骤
            </summary>
            <param name="inDefineId">审批单据</param>
            <param name="inSchemeId">审批方案</param>
            <returns>AuditStep</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.RtnNextStepRoles(VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep)">
            <summary>
            根据传入的审批步骤，返回具有审批步骤的角色的字符串
            格式为"*1*,*2*"
            </summary>
            <param name="inStep">审批步骤</param>
            <returns>角色字符串</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.AuditShowProperties(System.Type,System.Int64)">
            <summary>
            显示审批单据显示属性
            </summary>
            <param name="nowType">类型</param>
            <param name="schemeId">审批方案Id</param>
            <returns>IList</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindSchemesByDefineAndRole(System.Type,System.Int64)" -->
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindStepByRole(System.Type,System.Int64,System.Int64)">
            <summary>
            根据角色确定当前角色具有具体审批方案的审批权限的步骤
            </summary>
            <param name="auditobj">对象字串</param>
            <param name="role">角色</param>
            <param name="schemeId">审批方案ID</param>
            <returns>AuditStep</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindAllPermitStepByRole(System.Type,System.Int64,System.Int64)" -->
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindObjectForAudit(System.Type,VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep,System.Int64)">
            <summary>
            根据当前的审批步骤，显示待审核的单据清单
            </summary>
            <param name="auditobj">审批对象字串</param>
            <param name="stepnow">当前审批步骤</param>
            <param name="stepnow">当前审批角色</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindObjectForUnAudit(System.Type,VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep,System.Int64)">
            <summary>
            根据当前审批步骤，显示待反审的单据清单，此版本中一旦反审就返回上一审批步骤
            </summary>
            <param name="auditobj">审批对象字串</param>
            <param name="stepnow">当前步骤</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindObjectForAuditAllScheme(System.Type,System.Int64)">
            <summary>
            根据当前审批单据和当前角色，显示所有审批方案的待审单据
            </summary>
            <param name="auditObj">审批单据</param>
            <param name="auditRole">审批角色</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindObjectForAuditByScheme(System.Type,System.Int64,System.Int64)">
            <summary>
            根据当前审批单据、审批方案和审批角色，显示待审单据清单
            </summary>
            <param name="auditObj">审批单据类型</param>
            <param name="schemeId">审批方案ID</param>
            <param name="auditRoleId">角色ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindObjectForUnAuditAllScheme(System.Type,System.Int64)">
            <summary>
            根据当前审批单据和当前角色，显示所有审批方案的待反审单据
            </summary>
            <param name="auditObj">审批业务单据</param>
            <param name="auditRole">审批角色</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.FindObjectForUnAuditByScheme(System.Type,System.Int64,System.Int64)">
            <summary>
            根据当前单据、审批方案和当前角色，显示具体审批方案的待反审单据
            </summary>
            <param name="auditObj">审批业务单据</param>
            <param name="schemeId">审批方案ID</param>
            <param name="auditRoleId">角色ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.BatchAuditOperation(System.Collections.Generic.IList{VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo},VirtualMachine.Patterns.BusinessEssence.Domain.AuditMethodEnum)">
            <summary>
            批量操作
            </summary>
            <param name="lsInfo">信息集合</param>
            <param name="operType">操作类型 0 审批 1 反审 2 审批不通过</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.Audit(VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo)">
            <summary>
            审批操作
            </summary>
            <param name="nowAudit">审批操作值对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.AuditLose(VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo)">
            <summary>
            审批不通过
            </summary>
            <param name="failInfo">审批信息</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.ShowAuditFails(System.Int64,System.Int64)">
            <summary>
            根据用户和角色确定审批不通过的单据信息
            </summary>
            <param name="operId">用户ID</param>
            <param name="roleId">角色ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditService.UnAudit(VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditInfo)">
            <summary>
            反审操作
            </summary>
            <param name="nowInfo">审批信息</param>
            <returns>bool</returns>
        </member>
        <member name="T:VirtualMachine.Core.TransManagerAttribute">
            <summary>
            事务标签
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.EqPropertyExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "equal" constraint 
            between two properties.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.EqPropertyExpression.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VirtualMachine.Core.Expression.EqPropertyExpression"/> class
            that compares two mapped properties using an "equal" constraint.
            </summary>
            <param name="lhsPropertyName">The name of the Property to use as the left hand side.</param>
            <param name="rhsPropertyName">The name of the Property to use as the right hand side.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.EqPropertyExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.EqPropertyExpression"/>.
            </summary>
            <value>The string "<c> = </c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.IAppContainer">
            <summary>
            应用程序容器接口，此接口供业务程序员使用
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.IAppContainer.AddAssembly(System.String,System.String)">
            
            <param name="appName"></param>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.IAppContainer.AddApp(System.String)">
            <summary>
            添加一个程序，如果appName已存在则先删除它
            并且为它指定默认的编译器和运行时MemoryDaoTransform
            并且为它指定默认的CodeBaseDir
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.IAppContainer.StartApp(System.String)">
            <summary>
            转化并且启动程序，并且将它设为默认的程序
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.IAppContainer.GetObject(System.String)">
            
            <param name="componentName"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.IAppContainer.GetObject(System.String,System.String)">
            
            <param name="appName"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.IFastPropertyRetrieve.RegisterAssembly(System.String)">
            <summary>
            为程序集中所有打有Entity标签的类生成PropertyAccessor
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.IFastPropertyRetrieve.Get(System.Object,System.String)">
            <summary>
            获取一个对象的属性
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.IFastPropertyRetrieve.Set(System.Object,System.String,System.Object)">
            <summary>
            设置一个对象的属性
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.IFastPropertyRetrieve.IsEntityType(System.Type)">
            <summary>
            判断一个类是否有Entity标签
            </summary>
            <param name="clazz"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Component.Util.DateUtil">
            <summary>
            日期相关常用函数
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetDaysOfYear(System.Int32)">
            <summary>
            具体年度有多少天
            </summary>
            <param name="iYear">年</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetDaysOfYear(System.DateTime)">
            <summary>
            具体日期中年度有多少天
            </summary>
            <param name="idt">日期</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.IsRuYear(System.Int32)">
            <summary>
            是否闰年
            </summary>
            <param name="iYear">年</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.IsRuYear(System.DateTime)">
            <summary>
            是否闰年
            </summary>
            <param name="idt">日期</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetDayOfMonth(System.Int32,System.Int32)">
            <summary>
            本月有多少天
            </summary>
            <param name="iYear">年</param>
            <param name="iMonth">月</param>
            <returns>天数</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetDayOfMonth(System.DateTime)">
            <summary>
            本月有多少天
            </summary>
            <param name="dt">日期</param>
            <returns>天数</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetWeekNameOfDay(System.DateTime)">
            <summary>
            返回当前日期的星期
            </summary>
            <param name="idt">日期</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetWeekNumberOfDay(System.DateTime)">
            <summary>
            返回当前日期星期的编号
            </summary>
            <param name="idt">日期</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.DiffDays(System.DateTime,System.DateTime)">
            <summary>
            返回两个日期间相差的天数
            </summary>
            <param name="dtfrm">起始日期</param>
            <param name="dtto">截至日期</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.ConvertStringToDate(System.String)">
            <summary>
            将输入的字符串转化为日期。如果字符串的格式非法，则返回"1000-1-1"
            </summary>
            <param name="strInput">输入字符串</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.ConvertDateToString(System.DateTime,System.String)">
            <summary>
            将日期对象转化为格式字符串
            </summary>
            <param name="oDateTime">日期对象</param>
            <param name="strFormat">
            格式：
            	"SHORTDATE"===短日期
            	"LONGDATE"==长日期
            	其它====自定义格式
            </param>
            <returns>日期字符串</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.AddMinusDays(System.DateTime,System.Int32,System.Int32)">
            <summary>
            根据传入日期计算提前或者退后天数的日期
            </summary>
            <param name="inDate">传入日期</param>
            <param name="inDays">差异天数</param>
            <param name="AddOrMinus">提前(1)或者退后(-1)</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetFirstDay(System.DateTime)">
            <summary>
            根据日期获取当前月份的第一天
            </summary>
            <param name="inDate">日期</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetFirstDay(System.Int32,System.Int32)">
            <summary>
            根据年月获取当前月份的第一天
            </summary>
            <param name="inYear">年</param>
            <param name="inMonth">月</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetEndDay(System.DateTime)">
            <summary>
            获取当前月份的最末一天
            </summary>
            <param name="inDate">日期</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetEndDay(System.Int32,System.Int32)">
            <summary>
            获取当前月份的最后一天
            </summary>
            <param name="inYear">年</param>
            <param name="inMonth">月</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.FormatToBeginLongTime(System.DateTime)">
            <summary>
            格式化日期为长时间格式　2001-01-01===>2001-01-01 00:00:00
            </summary>
            <param name="beginDate"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.FormatToBeginLongTime(System.String)">
            <summary>
            格式化日期为长时间格式　2001-01-01===>2001-01-01 00:00:00
            </summary>
            <param name="beginDate"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.FormatToEndLongTime(System.DateTime)">
            <summary>
            格式化日期为长时间格式　2001-01-01===>2001-01-01 23:59:59
            </summary>
            <param name="beginDate"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.FormatToEndLongTime(System.String)">
            <summary>
            格式化日期为长时间格式　2001-01-01===>2001-01-01 23:59:59
            </summary>
            <param name="beginDate"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetLastYearAndMonth(System.Int32,System.Int32)">
            <summary>
            获取当前会计期的上一个会计期
            </summary>
            <param name="nowYear">年</param>
            <param name="nowMonth">月</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.DateUtil.GetNextYearAndMonth(System.Int32,System.Int32)">
            <summary>
            获取当前会计期的下一个会计期
            </summary>
            <param name="nowYear">年</param>
            <param name="nowMonth">月</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.SaveBusinessCenter(VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter)">
            <summary>
            业务系统存盘
            </summary>
            <param name="inBusCenter">业务系统</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.UpdateBusinessCenter(VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter)">
            <summary>
            业务系统修改
            </summary>
            <param name="inBusCenter">业务系统</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.DeleteBusinessCenter(VirtualMachine.Patterns.DataDictionary.Domain.BusinessCenter)">
            <summary>
            业务系统删除
            </summary>
            <param name="inBusCenter">业务系统</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.ListAllBusCenter">
            <summary>
            返回所有业务系统
            </summary>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.RtnBusCenterById(System.Int64)">
            <summary>
            根据ID返回业务系统
            </summary>
            <param name="inCenterId">业务系统ID</param>
            <returns>业务系统</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.SaveBusinessModule(VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule)">
            <summary>
            业务模块存盘
            </summary>
            <param name="inBusModule">业务模块</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.UpdateBusinessModule(VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule)">
            <summary>
            业务模块修改
            </summary>
            <param name="inBusModule">业务模块</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.DeleteBusinessModule(VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule)">
            <summary>
            业务模块删除
            </summary>
            <param name="inBusModule">业务模块</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.ListAllBusModule">
            <summary>
            返回所有业务模块
            </summary>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.ListBusModuleByCenter(System.Int64)">
            <summary>
            根据业务系统ID返回所有业务模块
            </summary>
            <param name="inCenterId">业务系统ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.RtnBusModuleById(System.Int64)">
            <summary>
            根据业务模块ID返回业务模块
            </summary>
            <param name="inBusModuleId">业务模块ID</param>
            <returns>业务模块</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.SaveBusinessObject(VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject)">
            <summary>
            业务对象存盘
            </summary>
            <param name="inBusObject">业务对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.UpdateBusinessObject(VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject)">
            <summary>
            业务对象修改
            </summary>
            <param name="inBusObject">业务对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.DeleteBusinessObject(VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject)">
            <summary>
            业务对象删除
            </summary>
            <param name="inBusObject">业务对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.ListAllBusObject">
            <summary>
            返回所有业务对象
            </summary>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.ListBusObjectByModule(System.Int64)">
            <summary>
            根据业务模块ID返回所有业务对象
            </summary>
            <param name="inModuleId">业务模块ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.RtnBusObjectById(System.Int64)">
            <summary>
            根据业务对象ID返回业务对象
            </summary>
            <param name="inBusObjectId">业务对象ID</param>
            <returns>业务对象</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.RtnBusObjectWithRelations(System.Int64)">
            <summary>
            根据业务对象ID返回业务对象与类的关系
            </summary>
            <param name="busObjId">业务对象ID</param>
            <returns>BusinessObject</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.RtnBusObjectByExample(VirtualMachine.Patterns.DataDictionary.Domain.BusinessObject)">
            <summary>
            根据业务对象例子查找业务对象
            </summary>
            <param name="busObject">业务对象</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.BusinessBasicService.RtnBusObjectClassName(System.Int64,System.Boolean)">
            <summary>
            根据业务对象返回业务对象具体关联类
            </summary>
            <param name="busObjId">业务对象ID</param>
            <param name="isMain">是否主类</param>
            <returns>string</returns>
        </member>
        <member name="T:VirtualMachine.Component.Util.ArrayUtil">
            <summary>
            集合相关静态方法
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.ArrayUtil.ConvertListToArray(System.Collections.Generic.IList{System.Int64})">
            <summary>
            根据集合返回数组
            </summary>
            <param name="lsObjIds">集合</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ArrayUtil.ConvertListToArray(System.Collections.IList)">
            <summary>
            根据集合返回数组
            </summary>
            <param name="lsObjIds">集合</param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropProtectedClass">
            <summary>
            需要属性保护的类
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropProtectedClass.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropProtectedClass.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropProtectedClass.ClsDataId">
            <summary>
            对应数据字典ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropProtectedClass.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextTemplate">
            <summary>
            AppContext模板
            </summary>
            <remarks>帐套管理</remarks>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextTemplate.CreateAppContext(VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext)">
            <summary>
            创建AppContext
            </summary>
            <param name="contextInfo">context值对象</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextTemplate.ModifyContextConfigFile(System.String,System.String)">
            <summary>
            将链接字符串写入Context配置文件
            </summary>
            <param name="connStr"></param>
            <param name="contextConfigFileName"></param>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.DatabaseBuilder">
            <summary>
            建库脚本
            </summary>
            <remarks>帐套管理</remarks>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.DatabaseBuilder.CreateDatabase(System.String[])">
            <summary>
            后置条件:数据库已经创建,表已创建
            </summary>
            <param name="templateName">建库脚本文件名</param>
            <returns>连接字符串</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.DatabaseBuilder.CreateDbUser(System.String,System.String)">
            <summary>
            创建数据库用户
            </summary>
            <returns>连接字符串</returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Remoting.ClientSideProxy.Proxy">
            <summary>
            客户端代理，代理所有对象的所有方法
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.ClientSideProxy.Proxy.ReplaceExpression(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            <summary>
            将command的参数中的nhibernate查询表达式，替换为我们自定义的可序列化的表达式
            </summary>
            <param name="command"></param>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull">
            <summary>
            基于对象数据库的IDao实现,支持Cascade Save Update,支持Fetch Model
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl">
            <summary>
            基于对象数据库的IDao实现,支持Cascade Save Update,不支持Fetch Model
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.entityNameSpaces">
            <summary>
            所有打有Entity标签的类的名称空间集合
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.assemblyFileShortNames">
            <summary>
            注册的程序集短名字（不包括路径）
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.RegisterAssembly(System.String)">
            <summary>
            在OdbDaoImpl中注册程序集(供QueryByCql使用)并添加索引
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.QueryByCql(System.String)">
            <summary>
            
            </summary>
            <param name="cql"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.Save(System.Object)">
            <summary>
            保存一个对象或对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.Update(System.Object)">
            <summary>
            更新一个对象或对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.SaveOrUpdate(System.Object)">
            <summary>
            保存或更新一个对象或对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.Delete(System.Object)">
            <summary>
            删除一个对象或对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.ICriterionToConstraint(Db4objects.Db4o.Query.IQuery,NHibernate.Criterion.ICriterion)">
            <summary>
            翻译ICriterion到Constraint
            </summary>
            <param name="query"></param>
            <param name="cri"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.SearchObjects(System.Type,VirtualMachine.Core.ObjectQuery,Db4objects.Db4o.Query.IQuery)">
            <summary>
            简单搜索对象，不考虑对象间的聚合和组成关系，不考虑FetchModel
            </summary>
            <param name="clazz"></param>
            <param name="query"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.ObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            对象查询，不支持子查询,不支持Fetch model
            </summary>
            <param name="clazz"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.IsInitialized(System.Object)">
            <summary>
            对象是否是一个延迟加载代理
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.InitializeObj(System.Object)">
            <summary>
            激活延迟加载的对象，并且加载与它聚合的相关对象(只激活集合字段)
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.Min(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最小值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最小值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.Average(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最平均值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最平均值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.Sum(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求和
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最和的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImpl.Count(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            计数
            </summary>
            <param name="clazz">类型</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.Save(System.Object)">
            <summary>
            保存一个对象或对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.Update(System.Object)">
            <summary>
            更新一个对象或对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.SaveOrUpdate(System.Object)">
            <summary>
            保存或更新一个对象或对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.Delete(System.Object)">
            <summary>
            删除一个对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.Delete(System.Collections.IList)">
            <summary>
            删除对象列表
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.IsInitialized(System.Object)">
            <summary>
            对象是否是一个延迟加载代理
            </summary>
            <param name="proxy"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.InitializeObj(System.Object)">
            <summary>
            激活延迟加载的对象，并且加载与它聚合的相关对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.OdbDaoImplFull.ObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            对象查询，不支持子查询
            </summary>
            <param name="clazz"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.DaoCacheInterceptor">
            <summary>
            域对象缓存拦截器,此类不成熟,请不要使用
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Cache.DaoCacheInterceptor.CacheManagerName">
            <summary>
            缓存区间
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Cache.DaoCacheInterceptor.CachedTypeNames">
            <summary>
            需要缓存的类名
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult">
            <summary>
            审批结果
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult.AuditDate">
            <summary>
            审核时间
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult.State">
            <summary>
            状态 1 表示审批通过 9 前续审批不通过 10 执行审批不通过的步骤
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult.TheAuditStep">
            <summary>
            审核步骤
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult.AuditOpinion">
            <summary>
            审批意见
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditResult.TheProcess">
            <summary>
            审核表单
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.AuditDefine">
            <summary>
            审批业务单据
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditDefine.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditDefine.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditDefine.ProcessClassName">
            <summary>
            审批单据类名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditDefine.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditDefine.ShowName">
            <summary>
            审批单据显示名称
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.ObjectQuery">
            <summary>
            对象查询表达式
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.ObjectQuery.ChildObjectQuerys">
            <link>aggregation</link>
             <supplierCardinality>0..*</supplierCardinality>
             <associates>VirtualMachine.Core.ObjectQuery</associates>
        </member>
        <member name="T:VirtualMachine.Core.Expression.LtExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "less than" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.LtExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.LtExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LtExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.LtExpression"/>.
            </summary>
            <value>The string "<c> &lt; </c>"</value>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryTreeService">
            <summary>
            分类树Service
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryTreeService.GetCategoryTreeList">
            <summary>
            获取分类树清单
            </summary>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryTreeService.GetCategoryTreeByType(System.Type)">
            <summary>
            根据类型获取分类树
            </summary>
            <param name="treeType">类型</param>
            <returns>CategoryTree</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryTreeService.SaveCategoryTree(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree)">
            <summary>
            分类树存盘
            </summary>
            <param name="tree">分类树</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryTreeService.DeleteCategoryTree(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree,System.Type)">
            <summary>
            分类树删除
            </summary>
            <param name="tree">分类树</param>
            <param name="type">类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryRuleService.SaveCategoryRule(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule)">
            <summary>
            保存规则
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryRuleService.DeleteCategoryRule(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule)">
            <summary>
            删除规则对象
            </summary>
            <param name="rule"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryRuleService.DeleteCategoryRule(System.Collections.IList)">
            <summary>
            删除规则对象集合
            </summary>
            <param name="lstRule"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryRuleService.GetCategoryRules(System.Type)">
            <summary>
            根据树D获取树规则集合
            </summary>
            <param name="treeType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryRuleService.GetCategoryRules(System.Type,System.Type)">
            <summary>
            根据父类型获取规则集合
            </summary>
            <param name="parentNode"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao">
            <summary>
            功能权限Service
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.RtnAllMenusByRole(System.Int64,System.Int64,System.String)">
            <summary>
            根据岗位、用户和起始菜单Syscode(通过此值来确定进入具体系统) 
            从确定的初始节点显示具有权限的菜单
            </summary>
            <param name="roleId">角色ID</param>
            <param name="operId">操作员ID</param>
            <param name="menuSyscode">起始菜单Syscode</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.RtnAllMenusByRole(System.Int64,System.Int64)">
            <summary>
            根据岗位、用户 确定具有权限的菜单
            菜单显示的起点始终为菜单起点 1 "1.",从最根节点显示具有权限的菜单
            </summary>
            <param name="roleId">角色ID</param>
            <param name="operId">操作员ID</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.RtnAllMenusByRole">
            <summary>
            根据登录身份以及起始Syscode确定具有权限的菜单
            </summary>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.GetAllPermitMenusByOperId(System.String)">
            <summary>
            根据操作员，起始菜单节点获取具有权限的菜单
            多岗位循环处理，构造一个菜单权限集合
            </summary>
            <param name="startSyscode">起始菜单SysCode</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.RtnAllOperationByRole(System.Int64)">
            <summary>
            根据登录身份和菜单确定有权的操作
            </summary>
            <param name="menuId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.RtnAllOperationByRole(System.Int64,System.Int64,System.Int64)">
            <summary>
            根据最明细菜单显示具有权限的功能操作
            </summary>
            <param name="roleId"></param>
            <param name="operId"></param>
            <param name="menuId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.ShowAllOperations">
            <summary>
            显示所有功能操作，权限配置显示时用
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.IFuncSecurityDao.RtnOperationByStatePmt(System.Object,System.Collections.IList,System.Int64,System.Int64)">
            <summary>
            首先根据功能权限确定具体操作后，根据具体表单的状态，通过状态权限筛选
            </summary>
            <param name="objState"></param>
            <param name="lsOper"></param>
            <param name="menuId"></param>
            <param name="roleId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.OrderMenu(System.Collections.IList)">
            <summary>
            根据排序号对菜单排序
            </summary>
            <param name="lsMenu">菜单集合</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.OrderOperations(System.Collections.IList)">
            <summary>
            根据排序号对操作排序
            </summary>
            <param name="lsOper"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.ListFatherMenu(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu,System.Collections.IList@,System.String)">
            <summary>
            根据菜单判断集合中是否存在父级菜单，不存在即加入
            </summary>
            <param name="nowMenu">当前菜单</param>
            <param name="lsMenu">具有权限菜单集合</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.AddChildMenus(System.Collections.IList@,System.String)">
            <summary>
            根据SysCode将子菜单加入集合,赋权人实例权限拷贝
            </summary>
            <param name="lsMenus">菜单集合</param>
            <param name="menuSyscode">菜单Syscode</param>
            <param name="authorId">授权人ID</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.RtnAllMenusByRole">
            <summary>
            获取菜单
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.GetAllPermitMenusByOperId(System.String)">
            <summary>
            根据操作员，起始菜单节点获取具有权限的菜单
            多岗位循环处理，构造一个菜单权限集合
            </summary>
            <param name="startSyscode">起始菜单SysCode</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.RtnAllMenusByRole(System.Int64,System.Int64,System.String)">
            <summary>
            根据岗位、用户和起始菜单Syscode 确定具有权限的菜单
            系统初始化时已经将系统菜单项目确定，通过确定具体Syscode来确定登录具体系统
            </summary>
            <param name="roleId">当前岗位ID</param>
            <param name="operId">当前用户ID</param>
            <param name="menuSyscode">起始菜单Syscode</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.RtnAllMenusByRole(System.Int64,System.Int64)">
            <summary>
            根据岗位、用户 确定具有权限的菜单
            菜单显示的起点始终为菜单起点 1 "1."
            </summary>
            <param name="roleId"></param>
            <param name="operId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.GetOperationsByMenu(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu)">
            <summary>
            根据菜单确定菜单下所有操作
            </summary>
            <param name="nowMenu">系统菜单</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.GetAuthorOperations(System.Collections.IList,VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysMenu)">
            <summary>
            根据权限确定当前菜单具有权限的操作
            因为功能权限赋权中可以对中间节点赋权，须做如下处理
            </summary>
            <param name="lsPmt"></param>
            <param name="nowMenu"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.RtnAllOperationByRole(System.Int64)">
            <summary>
            根据菜单获取有权功能操作
            </summary>
            <param name="menuId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.RtnAllOperationByRole(System.Int64,System.Int64,System.Int64)">
            <summary>
            根据最明细菜单显示具有权限的功能操作
            </summary>
            <param name="roleId">岗位ID</param>
            <param name="operId">操作员ID</param>
            <param name="menuId">最明细菜单ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.ShowAllOperations">
            <summary>
            显示所有功能操作，权限配置显示时用
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.HasSetStatePermission(System.Int64,System.Int64)">
            <summary>
            判断具体操作对象是否设置状态权限
            </summary>
            <param name="menuId">菜单ID</param>
            <param name="operationId">操作ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.CheckDefaultStatePmt(System.Int32,VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations,System.Int32)">
            <summary>
            判断操作在默认状态权限中是否存在
            </summary>
            <param name="nowState">单据状态</param>
            <param name="nowOper">操作</param>
            <param name="objType">单据类型 0 表单 否则其他</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.CheckOperationByState(System.Int32,VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations,System.Int64,System.Int64)">
            <summary>
            根据状态权限校验是否具有相应操作的权限
            </summary>
            <param name="stateType">状态权限类型</param>
            <param name="nowState">当前状态</param>
            <param name="nowOper">当前功能操作</param>
            <param name="roleId">角色ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.RtnOperationByStatePmt(System.Object,System.Collections.IList,System.Int64,System.Int64)">
            <summary>
            首先根据功能权限确定具体操作后，根据具体表单的状态，通过状态权限筛选
            </summary>
            <param name="objState">当前单据状态</param>
            <param name="lsOper">功能操作集合</param>
            <param name="menuId">菜单ID</param>
            <param name="roleId">岗位ID</param>
            <returns>IList</returns>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.FuncSecurityDao.StartSyscode">
            <summary>
            功能菜单起始Syscode
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClass.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClass.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClass.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClass.ClassName">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClass.DisplayName">
            <summary>
            显示名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClass.TheVirPackage">
            <summary>
            虚拟包
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.CacheIntercetor">
            <summary>
            服务缓存拦截器
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Cache.CacheIntercetor.CacheManagerName">
            <summary>
            缓存区间
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Cache.CacheIntercetor.CacheMethodNames">
            <summary>
            需要缓存的方法名
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode">
            <summary>
            结构树节点
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.AdjustConnectionSysCode(VirtualMachine.Patterns.StructureTreePattern.Domain.Connection)">
            <summary>
            调整SYSCODE
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.GetFullPath">
            <summary>
            获取节点路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.AddDownConnection(VirtualMachine.Patterns.StructureTreePattern.Domain.Connection)">
            <summary>
            节点增加下向边
            </summary>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.Id">
            <summary>
            节点id
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.TheTree">
            <summary>
            节点所挂的结构树
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.TargetType">
            <summary>
            目标对象类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.TargetId">
            <summary>
            目标对象ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.SysCode">
            <summary>
            层次码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.StructureNodeType">
            <summary>
            节点类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.Level">
            <summary>
            所在的层次
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.Describe">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.Author">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode.FullPath">
            <summary>
            节点路径
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection">
            <summary>
            结构树边
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.AddChildNode(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode)">
            <summary>
            边挂子节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.Name">
            <summary>
            边名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.TheTree">
            <summary>
            边所对应的结构树
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.ParentNode">
            <summary>
            边上所挂的父节点
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.State">
            <summary>
            边的状态--分为有效，无效
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.Connection.CollPercent">
            <summary>
            归结权重
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.LogicalExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that combines two <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s 
            with a operator (either "<c>and</c>" or "<c>or</c>") between them.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.LogicalExpression.#ctor(VirtualMachine.Core.Expression.ICriterion,VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.LogicalExpression"/> class that
            combines two other <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s.
            </summary>
            <param name="lhs">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to use in the Left Hand Side.</param>
            <param name="rhs">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to use in the Right Hand Side.</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.LogicalExpression.ToString">
            <summary>
            Gets a string representation of the LogicalExpression.  
            </summary>
            <returns>
            The String contains the LeftHandSide.ToString() and the RightHandSide.ToString()
            joined by the Op.
            </returns>
            <remarks>
            This is not a well formed Sql fragment.  It is useful for logging what Expressions
            are being combined.
            </remarks>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LogicalExpression.LeftHandSide">
            <summary>
            Gets the <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that will be on the Left Hand Side of the Op.
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LogicalExpression.RightHandSide">
            <summary>
            Gets the <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that will be on the Right Hand Side of the Op.
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LogicalExpression.Op">
            <summary>
            Get the Sql operator to put between the two <see cref="T:VirtualMachine.Core.Expression.Expression"/>s.
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.Expression">
            <summary>
            The <c>Expression</c> namespace may be used by applications as a framework for building 
            new kinds of <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>. However, it is intended that most applications will 
            simply use the built-in criterion types via the static factory methods of this class.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Eq(System.String,System.Object)">
            <summary>
            Apply an "equal" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>An <see cref="T:VirtualMachine.Core.Expression.EqExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Like(System.String,System.Object)">
            <summary>
            Apply a "like" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.LikeExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.InsensitiveLike(System.String,System.Object)">
            <summary>
            A case-insensitive "like", similar to Postgres "ilike" operator
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>An <see cref="T:VirtualMachine.Core.Expression.InsensitiveLikeExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Gt(System.String,System.Object)">
            <summary>
            Apply a "greater than" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.GtExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Lt(System.String,System.Object)">
            <summary>
            Apply a "less than" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.LtExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Le(System.String,System.Object)">
            <summary>
            Apply a "less than or equal" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.LeExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Ge(System.String,System.Object)">
            <summary>
            Apply a "greater than or equal" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.GtExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Between(System.String,System.Object,System.Object)">
            <summary>
            Apply a "between" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="lo">The low value for the Property.</param>
            <param name="hi">The high value for the Property.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.BetweenExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.In(System.String,System.Object[])">
            <summary>
            Apply an "in" constraint to the named property 
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="values">An array of values.</param>
            <returns>An <see cref="T:VirtualMachine.Core.Expression.InExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.In(System.String,System.Collections.ICollection)">
            <summary>
            Apply an "in" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="values">An ICollection of values.</param>
            <returns>An <see cref="T:VirtualMachine.Core.Expression.InExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.IsNull(System.String)">
            <summary>
            Apply an "is null" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.NullExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.EqProperty(System.String,System.String)">
            <summary>
            Apply an "equal" constraint to two properties
            </summary>
            <param name="propertyName">The lhs Property Name</param>
            <param name="otherPropertyName">The rhs Property Name</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.EqPropertyExpression"/> .</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.LtProperty(System.String,System.String)">
            <summary>
            Apply a "less than" constraint to two properties
            </summary>
            <param name="propertyName">The lhs Property Name</param>
            <param name="otherPropertyName">The rhs Property Name</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.LtPropertyExpression"/> .</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.LeProperty(System.String,System.String)">
            <summary>
            Apply a "less than or equal" constraint to two properties
            </summary>
            <param name="propertyName">The lhs Property Name</param>
            <param name="otherPropertyName">The rhs Property Name</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.LePropertyExpression"/> .</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.IsNotNull(System.String)">
            <summary>
            Apply an "is not null" constraint to the named property
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.NotNullExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.And(VirtualMachine.Core.Expression.ICriterion,VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Return the conjuction of two expressions
            </summary>
            <param name="lhs">The Expression to use as the Left Hand Side.</param>
            <param name="rhs">The Expression to use as the Right Hand Side.</param>
            <returns>An <see cref="T:VirtualMachine.Core.Expression.AndExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Or(VirtualMachine.Core.Expression.ICriterion,VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Return the disjuction of two expressions
            </summary>
            <param name="lhs">The Expression to use as the Left Hand Side.</param>
            <param name="rhs">The Expression to use as the Right Hand Side.</param>
            <returns>An <see cref="T:VirtualMachine.Core.Expression.OrExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Not(VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Return the negation of an expression
            </summary>
            <param name="expression">The Expression to negate.</param>
            <returns>A <see cref="T:VirtualMachine.Core.Expression.NotExpression"/>.</returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Conjunction">
            <summary>
            Group expressions together in a single conjunction (A and B and C...)
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.Disjunction">
            <summary>
            Group expressions together in a single disjunction (A or B or C...)
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Expression.AllEq(System.Collections.IDictionary)">
            <summary>
            Apply an "equals" constraint to each property in the key set of a IDictionary
            </summary>
            <param name="propertyNameValues">a dictionary from property names to values</param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.SpringTransform">
            <summary>
            spring 配置文件生成器
            实现了ITransform
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.SpringTransform.TransformApp(VirtualMachine.Core.AppHost.DataOfTransform)">
            <summary>
            后置条件：Spring配置文件被生成。如果\\maps\\maps.txt存在，则其中的Map文件
            被写入配置文件中
            </summary>
            <param name="app"></param>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.SpringTransform.DbConnStr">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Service.CustomObjectViewService">
            <summary>
            自定义视图
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.CustomObjectViewService.GetCustomObjectView(System.Int64)">
            <summary>
            获取自定义视图方案
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.CustomObjectViewService.GetCustomObjectView(VirtualMachine.Core.ObjectQuery)">
            <summary>
            获取自定义视图方案
            </summary>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.NewBusinessEssenceSrv">
            <summary>
            新的业务单据操作服务 解决了前驱后继查询的性能问题
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv">
            <summary>
            业务单据操作方法
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceSrv">
            <summary>
            业务单据操作方法Interface
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceSrv.CheckHaveDone(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            校验前驱单据是否都引用完成 废弃
            </summary>
            <param name="fowardEntity"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceSrv.NowRuleType(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            根据确定的链接规则确定前驱后续方式
            1 主 1..1 从 1..1 完全拷贝
            2 主 1..1 从 1..* 选择单一主表，明细可以修改
            3 主 1..* 从 1..1 选择多个主表，明细不可修改
            4 主 1..* 从 1..* 勾兑关系
            </summary>
            <param name="nowRule">确定的链接规则</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceSrv.GetBusEntityForHandle(System.Type,System.Int64,VirtualMachine.Core.ObjectQuery)">
            <summary>
            获得需要处理对象
            </summary>
            <param name="busType">对象类型</param>
            <param name="busId">对象ID</param>
            <param name="busQuy">查询条件</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceSrv.SaveBusinessEntity(System.Object)">
            <summary>
            业务单据存盘
            </summary>
            <param name="busEntity">业务单据</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceSrv.UpdateBusinessEntity(System.Object)">
            <summary>
             业务单据修改
            </summary>
            <param name="busEntity">业务单据</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceSrv.DeleteBusEntity(System.Object)">
            <summary>
            业务对象删除
            </summary>
            <param name="delBusEntity">业务对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv.CheckRefOver(System.Decimal,System.Decimal)">
            <summary>
            判断初始量是否被引用完成
            </summary>
            <param name="initAmt">初始量</param>
            <param name="refAmt">引用量</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv.NowRuleType(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            根据确定的链接规则确定前驱后续方式
            1 主 1..1 从 1..1 完全拷贝
            2 主 1..1 从 1..* 选择单一主表，明细可以修改
            3 主 1..* 从 1..1 选择多个主表，明细不可修改
            4 主 1..* 从 1..* 勾兑关系
            </summary>
            <param name="nowRule">确定的链接规则</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv.CheckHaveDone(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            校验前驱单据是否都引用完成
            </summary>
            <param name="fowardEntity"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv.GetBusEntityForHandle(System.Type,System.Int64,VirtualMachine.Core.ObjectQuery)">
            <summary>
            获得需要处理对象
            </summary>
            <param name="busType">对象类型</param>
            <param name="busId">对象ID</param>
            <param name="busQuy">ObjectQuery</param>
            <param name="clearDetail">是否清空明细</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv.SaveBusinessEntity(System.Object)">
            <summary>
            业务单据存盘
            </summary>
            <param name="busEntity">业务单据</param>
            <returns>返回persistent业务对象</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv.UpdateBusinessEntity(System.Object)">
            <summary>
            业务单据修改
            </summary>
            <param name="busEntity">业务单据</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceSrv.DeleteBusEntity(System.Object)">
            <summary>
            业务对象删除
            </summary>
            <param name="delBusEntity"></param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.NewBusinessEssenceSrv.Test">
            <summary>
            做实验的方法
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.NewBusinessEssenceSrv.SaveBusinessEntity(System.Object)">
            <summary>
            业务单据存盘
            </summary>
            <param name="busEntity">业务单据</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.NewBusinessEssenceSrv.UpdateBusinessEntity(System.Object)">
            <summary>
            业务单据修改
            </summary>
            <param name="busEntity">业务单据</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.NewBusinessEssenceSrv.DeleteBusEntity(System.Object)">
            <summary>
            业务对象删除
            </summary>
            <param name="delBusEntity"></param>
            <returns>bool</returns>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.AboutOperAndRoleImpl">
            <summary>
            人员和角色实现类
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.IAboutOperAndRoleSrv">
            <summary>
            表单模式所用人和角色服务
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAboutOperAndRoleSrv.GetBusinessOper(System.Int64)">
            <summary>
            根据ID获取操作员
            </summary>
            <param name="operId">操作员ID</param>
            <returns>IBusinessOperators</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAboutOperAndRoleSrv.GetBusinessRole(System.Int64)">
            <summary>
            根据ID获取角色
            </summary>
            <param name="roleId">角色ID</param>
            <returns>IBusinessRoles</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AboutOperAndRoleImpl.GetBusinessOper(System.Int64)">
            <summary>
            根据ID获得操作员
            </summary>
            <param name="operId">操作员ID</param>
            <returns>IBusinessOperators</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AboutOperAndRoleImpl.GetBusinessRole(System.Int64)">
            <summary>
            根据ID获得角色
            </summary>
            <param name="roleId">角色ID</param>
            <returns>IBusinessRoles</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.CurrencyUtil.GetMoneyChinese(System.String)">
            <summary>
            根据字符转换成大写金额
            </summary>
            <param name="moneyStr">金额字串</param>
            <returns>大写金额</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.CurrencyUtil.GetMoneyChinese(System.Decimal)">
            <summary>
            根据金额转换成大写金额
            </summary>
            <param name="Money">金额</param>
            <returns>大写金额</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:VirtualMachine.Component.ContextConfigure.ContextConfig" -->
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.ContextConfigure.ContextConfig.Init(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.ContextConfigure.ContextConfig.FindUnusedPort" -->
        <member name="M:VirtualMachine.Component.ContextConfigure.ContextConfig.InitialContextGroup">
            <summary>
            初始化spring context,并且将他们按照其reference name存放到AppDomain中.
            并且将AppDomain中以前的与本Group相关的spring context销毁掉
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ContextConfigure.ContextConfig.ClearCacheWhenChangeContextGroup(System.String)">
            <summary>
            换帐套时清空缓存
            </summary>
            <param name="groupName"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.ContextConfigure.ContextConfig.InitialContextGroup(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.ContextConfigure.ContextConfig.ExecuteInitailMethod(System.Int64,System.Int64,System.DateTime)" -->
        <member name="T:VirtualMachine.Component.ContextConfigure.ContextGroup">
            <summary>
            spring context 配置组,或者叫帐套
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.ContextConfigure.ContextGroup.InitCachePartition(System.Boolean)" -->
        <member name="M:VirtualMachine.Component.ContextConfigure.ContextGroup.SetGroupForCache">
            <summary>
            为ClientCacheService设置帐套
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ContextConfigure.ContextGroup.RegisterClientCacheService(System.Boolean)">
            <summary>
            1:注册ClientCacheService到各个服务器的CacheMediator
            </summary>
            <remarks>ServiceCache</remarks>
        </member>
        <member name="T:VirtualMachine.Component.ContextConfigure.ContextInfo">
            <summary>
            spring context配置
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission">
            <summary>
            状态权限默认规则
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission.ObjType">
            <summary>
            类型 0 表单 其他为其他单据
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission.OperFunc">
            <summary>
            功能操作(作废)
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission.OperStatus">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission.OperFuncStr">
            <summary>
            功能操作字符串
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.DefaultStatusPermission.State">
            <summary>
            有效状态
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission">
            <summary>
            属性权限配置表
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission.RoleId">
            <summary>
            角色ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission.InfoType">
            <summary>
            操作属性的类型
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission.BusObject">
            <summary>
            归属的具体菜单项目
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.Restart">
            <summary>
            重启
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.GenerateClientConfig(System.String,System.String,System.String,System.Boolean)">
            <summary>
            生成客户端配置文件。
            其中包含组件x,当且仅当x的第一个子节点包含name="target"属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.IsValid">
            <summary>
            状态是否有效
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.ClearCache">
            <summary>
            清空prevalence cache
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.Load">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.Delete">
            <summary>
            删除当前目录下的相关程序集副本
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.ReplaceExpression(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            <summary>
            将command中的自定义查询表达式替换为nhibernate查询表达式
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.ExecuteCommand(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            <summary>
            执行命令
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.SpringCtx">
            <summary>
            spring context
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.IsRunning">
            <summary>
            是否处于运行状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.ParentContext">
            <summary>
            上级context
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.Assemblys">
            <summary>
            相关程序集
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext.ConfigFileName">
            <summary>
            spring 配置文件
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.SrpingFileParser.ExtractCacheAspects">
            <summary>
            提取缓存切片到cacheAspects中,包括import xml中的缓存切片
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.SrpingFileParser.GetAvailableObjects">
            <summary>
            获取配置文件中的服务组件,包括import xml中的组件
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.SrpingFileParser.GetObjectFromXml(System.Collections.IDictionary)">
            <summary>
            获取配置文件中的服务组件,不包括import xml中的组件
            </summary>
            <param name="retValue"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.SrpingFileParser.FindCacheAspect(System.String)">
            <summary>
            查找服务的cache切片
            </summary>
            <param name="serviceName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.ClassMetaInfoManager.GetAggregateObjs(System.Object,System.Collections.IList)">
            <summary>
            根据源文件中的标签生成当前对象聚合(aggregate)的对象集合。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.ClassMetaInfoManager.GetComposeObjs(System.Object,System.Collections.IList)">
            <summary>
            根据源文件中的标签生成当前对象组合(compose)的对象集合。
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.ClassMetaInfoManager.GetPropertyType(System.Type,System.String)">
            <summary>
            获得属性的类型，如果属性是集合类，则返回集合所包含的对象的类型
            </summary>
            <param name="clazz">目标类</param>
            <param name="propName">属性名</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Disconnected.DisconnectedDao.Max(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最大值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最大值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Disconnected.DisconnectedDao.Min(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最小值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最小值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Disconnected.DisconnectedDao.Average(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最平均值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最平均值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Disconnected.DisconnectedDao.Sum(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求和
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最和的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Disconnected.DisconnectedDao.Count(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            计数
            </summary>
            <param name="clazz">类型</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.DataTypes">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.PropertyFunc">
            <summary>
            属性用途类型
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.EvaluateMethod">
            <summary>
            取值方式
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.InformationType">
            <summary>
            属性信息类型
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule">
            <summary>
            业务模块
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.OrderNO">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.BelongCenter">
            <summary>
            所归属的系统
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessModule.BusObjects">
            <summary>
            业务对象
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryTreeService.GetCategoryTreeByType(System.Type)">
            <summary>
            根据树类型获取分类树
            </summary>
            <param name="treeType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryTreeService.GetCategoryTreeList">
            <summary>
            获取所有分类树
            </summary>
            <param name="treeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Domain.NodeType">
            <summary>
            节点在分类树中的类型{根节点、中间节点、叶节点}
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.CategoryTreePattern.Domain.NodeType.RootNode">
            <summary>
            根节点 0
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.CategoryTreePattern.Domain.NodeType.MiddleNode">
            <summary>
            中间节点 1
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.CategoryTreePattern.Domain.NodeType.LeafNode">
            <summary>
            叶节点 2
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode">
            <summary>
            分类树节点
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.Id">
            <summary>
            节点ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.Name">
            <summary>
            节点名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.TheTree">
            <summary>
            节点所挂的树
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.ParentNode">
            <summary>
            节点的父节点
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.ChildNodes">
            <summary>
            子节点集合
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.SysCode">
            <summary>
            层次码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.Level">
            <summary>
            所在的层次
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.State">
            <summary>
            节点状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.CategoryNodeType">
            <summary>
            节点在分类树中的类型{根节点、中间节点、叶节点}
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.Author">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.Describe">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode.OrderNo">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.RolePermitAudit">
            <summary>
            角色审批步骤对应关系
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.RolePermitAudit.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.RolePermitAudit.Role">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.RolePermitAudit.TheAuditStep">
            <summary>
            审核步骤
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.LinkProperty">
            <summary>
            关联关系关联属性
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.LinkProperty.PlanQuan">
            <summary>
            计划数量
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.LinkProperty.ActualQuan">
            <summary>
            实际数量
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.LinkProperty.PlanPrice">
            <summary>
            计划单价
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.LinkProperty.ActualPrice">
            <summary>
            实际单价
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.LinkProperty.PlanAmount">
            <summary>
            计划金额
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.LinkProperty.ActualAmount">
            <summary>
            实际金额
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule">
            <summary>
            连接规则，基准基数都是1，目前处理四种情况
            A 主 1..1 从 1..1 完全拷贝
            B 主 1..1 从 1..* 选择单一主表，明细可以修改
            C 主 1..* 从 1..1 选择多个主表，明细不可修改
            D 主 1..* 从 1..* 勾兑关系
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.Rules">
            <summary>
            所有规则列表
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.Id">
            <summary>
            主键Id
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.Version">
            <summary>
            版本号
            </summary>        
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.UpwardClassName">
            <summary>
            前驱类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.UpwardShowName">
            <summary>
            前驱类描述
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.BaseClassName">
            <summary>
            基准类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.BaseShowName">
            <summary>
            基准类描述
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.UpwardDetClass">
            <summary>
            前驱明细类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.BaseDetClass">
            <summary>
            基准类明细类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.MasterRadix">
            <summary>
            主表关联基数
            1 表示1对1关联 9 表示多对1关联
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.DetailRadix">
            <summary>
            明细关联基数
            1 表示1对1关联 9 表示多对1关联
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.BaseMainRelClass">
            <summary>
            基准类主类关联关系类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.BaseRelationClass">
            <summary>
            基准类明细关系关联类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.LnkProp">
            <summary>
            关联属性
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule.IncludeOtherFors">
            <summary>
            关联量计算是否包含其他前驱类型
            0 不包括（表示仅当前关联关系） 1 包括（需要考虑其他关联关系）
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Attributes.TransientAttribute">
            <summary>
            属性是否持久化
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.AppHost.Design.FrmErrorPage.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.FrmErrorPage.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.FrmErrorPage.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.ExceptionUtil.ExceptionMessage(System.Exception)">
            <summary>
            循环所有内部异常信息，并合并返回异常信息
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClientUtil.TransVoucherNo(System.Int32)">
            <summary>
            格式化凭证号为六位数字格式
            </summary>
            <param name="VoucherNO"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClientUtil.GetDocStateName(System.Int32)">
            <summary>
            表单状态名
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClientUtil.GetDocStateName(VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState)">
            <summary>
            表单状态名
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClientUtil.isEmail(System.String)">
            <summary>
            验证邮件是否正确
            </summary>
            <param name="inputEmail"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.PropertySecurity.Service.PropPermissionConfigure.isExistProtectClass(System.String)">
            <summary>
            判断类在需要属性保护的清单中是否存在
            </summary>
            <param name="className">类名称</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.PropertySecurity.Service.PropPermissionConfigure.isExistProtectClass(System.Int64)">
            <summary>
            判断类在需要属性保护的清单中是否存在
            </summary>
            <param name="classId">类数据字典ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.PropertySecurity.Service.PropPermissionConfigure.SaveProtectClass(VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropProtectedClass)">
            <summary>
            需要属性权限保护类存盘
            </summary>
            <param name="proClass">需保护类</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.PropertySecurity.Service.PropPermissionConfigure.ShowRolePropPermit(System.Int64,System.Int64)">
            <summary>
            根据角色ID和业务对象ID查找属性权限配置
            </summary>
            <param name="roleID">角色ID</param>
            <param name="busObjId">业务对象ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.PropertySecurity.Service.PropPermissionConfigure.DeleteRolePropPermit(System.Collections.IList)">
            <summary>
            将历史属性权限配置信息删除
            </summary>
            <param name="lsPermit">属性权限配置</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.PropertySecurity.Service.PropPermissionConfigure.SaveRolePropPermission(VirtualMachine.SystemAspect.Security.PropertySecurity.Domain.PropertyPermission)">
            <summary>
            实例权限维护存盘
            </summary>
            <param name="insPermit">实例权限配置</param>
            <returns>bool</returns>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Log.ServiceLog.Domain.ParameterLog.Fields">
            <summary>
            字段值。一组ParameterFieldLog
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree">
            <summary>
            结构树
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.GetConnectionRule(System.String)">
            <summary>
            根据边类型定位其规则
            </summary>
            <param name="cnType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.GetNodeRule(System.String)">
            <summary>
            根据点类型定位其规则
            </summary>
            <param name="nType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.RemoveNodeAndConnection(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode)">
            <summary>
            删除节点上相关的上向边
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.AdjustConnectionSysCode(VirtualMachine.Patterns.StructureTreePattern.Domain.Connection)">
            <summary>
            调整SYSCODE
            </summary>
            <param name="conn"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.EntityEqual(System.Object,System.Object)">
            <summary>
            对象比较根据SYSCODE
            </summary>
            <param name="o1"></param>
            <param name="o2"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.AddRoot(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode)">
            <summary>
            追加根节点
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.MoveConnection(VirtualMachine.Patterns.StructureTreePattern.Domain.Connection,VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode)">
            <summary>
            移动边
            </summary>
            <param name="conn"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.RemoveConnectionFromNode(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode,VirtualMachine.Patterns.StructureTreePattern.Domain.Connection)">
            <summary>
            将边从指定的点上移除
            </summary>
            <param name="node"></param>
            <param name="conn"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.ValidateNode(VirtualMachine.Patterns.StructureTreePattern.Domain.Connection,VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode)">
            <summary>
            依照边规则判断当前边能否挂指定点
            </summary>
            <param name="conn"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.ValidateConnection(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode,VirtualMachine.Patterns.StructureTreePattern.Domain.Connection)">
            <summary>
            依照点规则判断当前点能否加入指定边
            </summary>
            <param name="node"></param>
            <param name="conn"></param>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.Code">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.Name">
            <summary>
            结构树名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.RootId">
            <summary>
            根节点
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.TreeRules">
            <summary>
            规则集合
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.MaxLevel">
            <summary>
            最大层次
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.CurrLevel">
            <summary>
            当前层次
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.Author">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass">
            <summary>
            业务对象与类间的关联关系
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.ConBusObject">
            <summary>
            业务对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.BelongClass">
            <summary>
            包含的类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.IsMainClass">
            <summary>
            主要关联类 1 是 0 否
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.IsDetailClass">
            <summary>
            业务单据的从表标志 0 主表 1 从表
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.BusinessOrgProp">
            <summary>
            实例权限控制用业务组织Syscode属性名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.BusinessObjRelateClass.OperatorProp">
            <summary>
            实例权限控制用操作员属性名
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.IAuditOperations">
            <summary>
            表单模式存盘操作
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditOperations.RtnAuditDefineByClassname(System.String)">
            <summary>
            根据传入审批类名返回AuditDefine
            </summary>
            <param name="inName">传入单据ClassName</param>
            <returns>AuditDefine</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditOperations.RtnAuditSchemeByDefine(System.String)">
            <summary>
            根据业务单据，返回业务单据所具有的审批方案
            用于当根据操作对象无法确定具体审批方案时候下拉选择
            </summary>
            <param name="inDefine">业务单据类名</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditOperations.RtnAuditStepRoles(VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep)">
            <summary>
            根据业务单据和审批方案确定第一步审批步骤
            </summary>
            <param name="inSchemeId">审批方案</param>
            <returns>AuditStep</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditOperations.RtnFirstStep(System.Int64)">
            <summary>
            根据当前审批步骤，确定当前步骤的审批角色
            </summary>
            <param name="inStep">审批步骤</param>
            <returns>审批角色，格式"*1*,*2*"</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditOperations.RtnInitialData(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            根据BusinessEntity值对象完成初始化
            </summary>
            <param name="inBusEntity"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IAuditOperations.SaveBusinessEntities(System.Object)">
            <summary>
            业务单据存盘
            </summary>
            <param name="inProcess">业务单据值对象</param>
            <returns>object</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditOperations.RtnAuditDefineByClassname(System.String)">
            <summary>
            根据传入审批类名返回AuditDefine
            </summary>
            <param name="inName">传入单据ClassName</param>
            <returns>AuditDefine</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditOperations.RtnAuditSchemeByDefine(System.String)">
            <summary>
            根据业务单据，返回业务单据所具有的审批方案
            用于当根据操作对象无法确定具体审批方案时候下拉选择
            </summary>
            <param name="inDefine">业务单据类名</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditOperations.RtnFirstStep(System.Int64)">
            <summary>
            根据业务单据和审批方案确定第一步审批步骤
            </summary>
            <param name="inSchemeId">审批方案</param>
            <returns>AuditStep</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditOperations.RtnAuditStepRoles(VirtualMachine.Patterns.BusinessEssence.Domain.AuditStep)">
            <summary>
            根据当前审批步骤，确定当前步骤的审批角色
            </summary>
            <param name="inStep">审批步骤</param>
            <returns>审批角色，格式"*1*,*2*"</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditOperations.RtnInitialData(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            根据BusinessEntity值对象完成初始化
            </summary>
            <param name="inBusEntity"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditOperations.RtnAuditSchemeByStandards(System.Object)">
            <summary>
            自动确定审批方案
            </summary>
            <param name="inObj">待存盘单据</param>
            <returns>审批方案</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.AuditOperations.SaveBusinessEntities(System.Object)">
            <summary>
            业务单据存盘
            </summary>
            <param name="inProcess">业务单据值对象</param>
            <returns>返回persistent业务对象</returns>
        </member>
        <member name="T:VirtualMachine.Core.Expression.LtPropertyExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "less than" constraint 
            between two properties.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.LtPropertyExpression.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:VirtualMachine.Core.Expression.LtPropertyExpression"/> class
            that compares two mapped properties using an "less than" constraint.
            </summary>
            <param name="lhsPropertyName">The name of the Property to use as the left hand side.</param>
            <param name="rhsPropertyName">The name of the Property to use as the right hand side.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LtPropertyExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.LtPropertyExpression"/>.
            </summary>
            <value>The string "<c> &lt; </c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.Expression.BetweenExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents a "between" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.BetweenExpression.#ctor(System.String,System.Object,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.BetweenExpression"/> class for
            the named Property.
            </summary>
            <param name="propertyName">The name of the Property of the Class.</param>
            <param name="lo">The low value for the BetweenExpression.</param>
            <param name="hi">The high value for the BetweenExpression.</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.BetweenExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.AndExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.LogicalExpression"/> that combines two <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s 
            with an <c>and</c> between them.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.AndExpression.#ctor(VirtualMachine.Core.Expression.ICriterion,VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Initializes a new instance of the <see cref="T:VirtualMachine.Core.Expression.AndExpression"/> class
            that combines two <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>.
            </summary>
            <param name="lhs">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to use as the left hand side.</param>
            <param name="rhs">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to use as the right hand side.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.AndExpression.Op">
            <summary>
            Get the Sql operator to put between the two <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s.
            </summary>
            <value>The string "<c>and</c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.DomainObjectProxy.IDomainObjectInterceptor">
            <summary>
            域对象拦截器接口
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.DomainObjectProxy.DomainObjectProxyFactory">
            <summary>
            域对象代理工厂
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.DomainObjectProxy.DomainObjectProxyFactory.CreateProxy(System.Object,VirtualMachine.Core.DomainObjectProxy.IDomainObjectInterceptor)">
            <summary>
            创建代理
            </summary>
            <param name="target">被代理的域对象</param>
            <param name="interceptor">拦截器</param>
            <returns>代理</returns>
        </member>
        <member name="M:VirtualMachine.Core.DomainObjectProxy.DomainObjectProxyFactory.CreateProxy(System.Object,System.Collections.Generic.IList{VirtualMachine.Core.DomainObjectProxy.IDomainObjectInterceptor})">
            <summary>
            创建代理
            </summary>
            <param name="target">被代理的域对象</param>
            <param name="interceptor">一组拦截器</param>
            <returns>代理</returns>
        </member>
        <member name="F:VirtualMachine.Core.AppHost.Design.FrmAssemblys.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.FrmAssemblys.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.FrmAssemblys.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Util.ObjectByte">
            <summary>
            对象与二进制数组转换
            </summary>
            <typeparam name="T">对象</typeparam>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectByte.SetObjectToByte(System.Object)">
            <summary>
            把对象转换为二进制数组
            </summary>
            <param name="obj">对象</param>
            <returns>二进制数组</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectByte.SetFileToByte(System.String)">
            <summary>
            把指定的文件转换为二进制数组
            </summary>
            <param name="filePath">文件路径</param>
            <returns>二进制数组</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectByte.GetObjectFromByte``1(System.Byte[])">
            <summary>
            从数组中获取指定对象
            </summary>
            <param name="aByte">数组值</param>
            <returns>所得T类型对象</returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission">
            <summary>
            状态权限表
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.RoleId">
            <summary>
            岗位ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.OperStatus">
            <summary>
            单据状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.OperFunc">
            <summary>
            对应单据状态的操作
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.OperMenu">
            <summary>
            状态权限对应菜单
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.ControlType">
            <summary>
            状态权限控制方式 0 不区分岗位 1 区分岗位
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.StatusSecurity.Domain.StatusPermission.AuthorOperId">
            <summary>
            赋权人ID
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations">
            <summary>
            角色功能权限配置
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.PermitRole">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.PermitOper">
            <summary>
            具有权限的操作
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.PermitMenu">
            <summary>
            具有操作权限的菜单
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.PermitType">
            <summary>
            赋权方式 0 根据岗位设置权限 1 根据人员上岗设置权限
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.OperOnRole">
            <summary>
            人员上岗情况，优先级最先 0 表示按岗位设置
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.AuthorType">
            <summary>
            赋权类型 0 Root 1 起始节点及其下 2 当前节点
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.RolePermitOperations.AuthorOperId">
            <summary>
            赋权人ID
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.DomainObjectCache">
            <summary>
            域对象缓存
            不成熟,请不要使用此类
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree">
            <summary>
            分类树
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.Id">
            <summary>
            分类树ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.Code">
            <summary>
            分类树类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.Name">
            <summary>
            分类树名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.Describe">
            <summary>
            描述信息
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.Author">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.RootId">
            <summary>
            分类树的根节点
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.MaxLevel">
            <summary>
            最大分类层数,0表示为不限制
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.CurrMaxLevel">
            <summary>
            当前分类层数
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryTree.Rules">
            <summary>
            分类树规则集合
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards">
            <summary>
            审批方案确定规则
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.StandardRelation">
            <summary>
            多条件之间关系 0 且 1 或
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.PropertyName">
            <summary>
            判断条件的属性名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.ConDirection">
            <summary>
            条件的是非性判断，1 是 0 否
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.MarkForCal">
            <summary>
            计算符号
            符号说明：0 等于, 1 大于等于, 2 小于等于, 3 大于, 4 小于, 5 不等于, 6 like, 7 in
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.PropertyValue">
            <summary>
            属性判定值
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.SchemeStandards.TheScheme">
            <summary>
            对应的审批方案
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState">
            <summary>
            表单状态
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.Edit">
             <summary>
            编辑 
             </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.Valid">
            <summary>
            有效
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.Invalid">
            <summary>
            无效
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.InAudit">
            <summary>
            审批中
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.Suspend">
            <summary>
            挂起
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.InExecute">
            <summary>
            执行中
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.Freeze">
            <summary>
            冻结
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState.Completed">
            <summary>
            结束
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity">
            <summary>
            表单主表
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.InitialDataForAudit(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            单据存盘，数据初始化
            </summary>
            <param name="inBusEntity"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.ClearAuditResult">
            <summary>
            第一步审批首先清空审批结果
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.UpdRelate(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            审批操作更新相应单据
            </summary>
            <param name="paraArg">更新用参数</param>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.生成状态对象">
            <summary>
            生成状态对象
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.修改对象时更新前驱状态(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            当本对象发生变化时更新前驱对象的引用状态
            为新增明细添加状态量
            前置条件 foreach (BusinessEntityDetails detail in Details) detail.GetRelationByRule(rule).Count==1
            </summary>
            <param name="newBusinessEntity">本对象的新的状态</param>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.新建对象时更新前驱状态">
            <summary>
            生成本对象时 更新前驱对象的引用状态
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.InitialBusinessByForward(System.Object,System.Int32)">
            <summary>
            填充表单
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.isReferenceOver">
            <summary>
            是否引用完成
            20070509废弃 根据明细关系上标志判断
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.ChangeForwardState">
            <summary>
            前驱后续更改状态，引用完成更新状态为结束
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.FreezeBill">
            <summary>
            冻结操作
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.ReuseBill">
            <summary>
            恢复执行操作
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.InvalidateBill">
            <summary>
            作废操作
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.Id">
            <summary>
            系统ID（主键）
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.Version">
            <summary>
            系统版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.ClassifyCode">
            <summary>
            分类代码，实例安全控制用
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.Code">
            <summary>
            业务单据号（有业务含义）
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.DocState">
            <summary>
            表单状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.CreatedDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.UpdatedDate">
            <summary>
            修改日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.Details">
            <summary>
            表单明细
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.Audits">
            <summary>
            审核记录
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.NextStep">
            <summary>
            审批下一个步骤
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.TheAuditDefine">
            <summary>
            审批单据定义
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.TheAuditScheme">
            <summary>
            审批方案
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.AuditRoles">
            <summary>
            审批角色，格式为"*1*,*2*"
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.ForwardObjs">
            <summary>
            前驱对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity.RefStatus">
            <summary>
            引用状态列表 目标类型 MasterRefStatus
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.NewBusinessEssenceQueryImpl">
            <summary>
            新的业务单据查询Service 解决了前驱后继查询的性能问题
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl">
            <summary>
            业务单据查询Service
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv">
            <summary>
            业务单据查询Service
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowHistoryDetRelations(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Collections.Generic.IList{System.Int64},System.Int64)">
            <summary>
            根据根据连接规则和前驱明细ID集合且排除当前获取所有历史关联关系,更新单据用
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardIds">前驱明细ID</param>
            <param name="baseId">当前主ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowHistoryDetRelations(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64,System.Int64)">
            <summary>
            根据连接规则和前驱明细ID且排除当前获取所有历史关联关系
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <param name="baseId">后续明细ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowHistoryDetRelations(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64)">
            <summary>
            根据连接规则和前驱明细ID获取所有历史关联关系
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ReferTotal(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64,System.Int64)">
            <summary>
            根据前驱明细ID获得排除当前明细引用总量
            </summary>
            <param name="nowRule">当前连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <param name="baseId">后续明细ID</param>
            <returns>decimal</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ReferTotal(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64)">
            <summary>
            根据前驱明细ID和链接规则获得当前明细引用总量
            </summary>
            <param name="nowRule">当前连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <returns>decimal</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.IsReferByBackwardBills(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64)">
            <summary>
            当前单据是否被后续引用
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardId">前驱ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.IsReferByBackwardBills(System.Type,System.Int64)">
            <summary>
            单据是否被后续引用
            </summary>
            <param name="nowType">当前类型</param>
            <param name="forwardId">前驱单据</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowAllNotCompleteBills(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,VirtualMachine.Core.ObjectQuery,System.Boolean)">
            <summary>
            根据连接规则查询未引用完单据主表
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="billQuy">ObjectQuery</param>
            <param name="eagerDets">加载明细</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowAllNotCompleteBillDets(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据连接规则查询未引用完单据明细
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="detQuy">ObjectQuery</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowAllNotCompleteBillDets(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,VirtualMachine.Core.ObjectQuery,System.Int64)">
            <summary>
            根据连接规则和主表ID查询未引用完单据明细
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="detQuy">ObjectQuery</param>
            <param name="mainId">主表ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowAllForwards(System.Type)">
            <summary>
            根据基本类显示所有前驱单据清单
            </summary>
            <param name="backType">基本类</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.ShowAllBackwards(System.Type)">
            <summary>
            根据基本类显示所有后续单据清单
            </summary>
            <param name="baseType">基本类</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.GetLinkRuleByMainId(System.Type,System.Int64)">
            <summary>
            根据类型和ID确定当前单据的链接规则
            </summary>
            <param name="baseType">类型</param>
            <param name="mainId">ID</param>
            <returns>LinkRule</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.IBusinessEssenceQuerySrv.InitailForwardObjects(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            加载前驱对象
            </summary>
            <param name="busEntity"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.InitailForwardObjects(VirtualMachine.Patterns.BusinessEssence.Domain.BusinessEntity)">
            <summary>
            加载前驱对象
            </summary>
            <param name="busEntity"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.GetRelationClass(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            根据当前连接规则确定所有前驱单据且引用属性一致的明细关联对象
            </summary>
            <param name="nowRule">连接规则</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.GetMainRelationClass(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            根据连接规则获取关联关系主类
            </summary>
            <param name="nowRule">连接规则</param>
            <returns>IList</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.GetMainRelationClass(System.Type)" -->
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowHistoryDetRelations(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Collections.Generic.IList{System.Int64},System.Int64)">
            <summary>
            根据根据连接规则和前驱明细ID集合且排除当前获取所有历史关联关系
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardIds">前驱明细ID</param>
            <param name="baseId">当前主ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowHistoryDetRelations(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64,System.Int64)">
            <summary>
            根据连接规则和前驱明细ID且排除当前获取所有历史关联关系
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <param name="baseId">后续明细ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowHistoryDetRelations(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64)">
            <summary>
            根据连接规则和前驱明细ID获取所有历史关联关系
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ReferTotal(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64)">
            <summary>
            根据前驱明细ID和链接规则获得当前明细引用总量
            </summary>
            <param name="nowRule">当前连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <returns>decimal</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ReferTotal(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64,System.Int64)">
            <summary>
            根据前驱明细ID获得排除当前明细引用总量
            </summary>
            <param name="nowRule">当前连接规则</param>
            <param name="forwardId">前驱明细ID</param>
            <param name="baseId">后续明细ID</param>
            <returns>decimal</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.IsReferByBackwardBills(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64)">
            <summary>
            当前单据是否被后续引用
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="forwardId">前驱ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.IsReferByBackwardBills(System.Type,System.Int64)">
            <summary>
            单据是否被后续引用
            </summary>
            <param name="nowType">当前类型</param>
            <param name="forwardId">前驱单据</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowNotRefMainIds(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            确定未发生后续引用的主表ID集合
            </summary>
            <param name="nowRule"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowNotRefOverMainIds(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            根据连接规则确定未引用完主表ID，根据明细连接关系
            </summary>
            <param name="nowRule">连接关系</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.QueryNotRefOverMainIds(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule)">
            <summary>
            确定未引用完前驱主表ID集合
            </summary>
            <param name="nowRule"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.DetailIsRefOver(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Int64)">
            <summary>
            根据连接规则和前驱明细ID，确定前驱是否被引用完成
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="detId">前驱明细ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowAllNotCompleteBills(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,VirtualMachine.Core.ObjectQuery,System.Boolean)">
            <summary>
            根据连接规则查询未引用完单据主表
            返回的主表处于离线状态 已引用完成的明细已经被移除
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="billQuy">ObjectQuery</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowAllNotCompleteBillDets(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据连接规则查询未引用完单据明细
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="detQuy">ObjectQuery</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowAllNotCompleteBillDets(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,VirtualMachine.Core.ObjectQuery,System.Int64)">
            <summary>
            根据连接规则和主表ID查询未引用完单据明细
            </summary>
            <param name="nowRule">连接规则</param>
            <param name="detQuy">ObjectQuery</param>
            <param name="mainId">主表ID</param>
            <returns>IList</returns>
            重写此方法
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowAllForwards(System.Type)">
            <summary>
            根据基本类显示所有前驱单据清单
            </summary>
            <param name="backType">基本类</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.ShowAllBackwards(System.Type)">
            <summary>
            根据基本类显示所有后续单据清单
            </summary>
            <param name="baseType">基本类</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Service.BusinessEssenceQueryImpl.GetLinkRuleByMainId(System.Type,System.Int64)">
            <summary>
            根据类型和ID确定当前单据的链接规则
            </summary>
            <param name="baseType">类型</param>
            <param name="mainId">ID</param>
            <returns>LinkRule</returns>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties">
            <summary>
            审批单据显示属性设置
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.DefineId">
            <summary>
            审批单据ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.SchemeId">
            <summary>
            审批方案ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.OrderNo">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.PropertyName">
            <summary>
            属性名，外联属性以"."分隔
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.PropShowName">
            <summary>
            属性显示名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditShowProperties.ReadOnlyProp">
            <summary>
            只读属性
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole">
            <summary>
            系统角色
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.RoleCode">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.RoleName">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.SysCode">
            <summary>
            Syscode
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.ReleteOper">
            <summary>
            关联操作员
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.OrderNO">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation">
            <summary>
            表单主表链接关系
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.ForwardObject">
            <summary>
            前驱对象 没有映射到数据库 又服务初始化
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.NowLinkRule">
            <summary>
            确定的连接规则
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.ForwardBusEntityId">
            <summary>
            前驱主表对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.ForwardBusEntityCode">
            <summary>
            前驱主表编码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.BackwardBusEntity">
            <summary>
            后续业务对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.ForwardClsName">
            <summary>
            前驱类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityRelation.BackwardClsName">
            <summary>
            后续类名
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.NullExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents "null" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.NullExpression.#ctor(System.String)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.NotNullExpression"/> class for a named
            Property that should be null.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.NullExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.InExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that constrains the property 
            to a specified list of values.
            </summary>
            <remarks>
            InExpression - should only be used with a Single Value column - no multicolumn properties...
            </remarks>
        </member>
        <member name="M:VirtualMachine.Core.Expression.InExpression.#ctor(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="values"></param>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.ClassInfo.Proeprties">
            <summary>
            key is property name.value is property type
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.PropertyInfo.PropertyCategory">
            <summary>
            可能有4个值：Id，Value，Entity，Collection
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.MemoryDaoTransform.TransformApp(VirtualMachine.Core.AppHost.DataOfTransform)">
            <summary>
            前置条件：app符合规范
            后置条件：Spring配置文件已生成。
            Spring配置文件被修改为用OdbDaoImplFull作为Dao实现,
            所有打上Entity标签的类的代理类已生成。
            proxyAssemblyFile变量被赋值
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.MemoryDaoTransform.Init">
            <summary>
            加载程序
            前置条件：app已经做过MemoryDaoTransform的转化
            后置条件：app.Assemblys已经复制到当前进程的BaseDirectory。
            FetchMode代理类的Dll被复制到当前进程的BaseDirectory
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:VirtualMachine.Component.Util.StringUtil">
            <summary>
            字符型常用函数
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.Remove(System.String,System.String)">
            <summary>
            从字符串中移除相应字符
            </summary>
            <param name="sourceString">传入字符串</param>
            <param name="removedString">移除字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.RightSplit(System.String,System.Char)">
            <summary>
            获取拆分符右边的字符串
            </summary>
            <param name="sourceString">传入字符串</param>
            <param name="splitChar">拆分字符</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.LeftSplit(System.String,System.Char)">
            <summary>
            获取拆分符左边的字符串
            </summary>
            <param name="sourceString">传入字符串</param>
            <param name="splitChar">拆分字符</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.DelLastComma(System.String)">
            <summary>
            去掉最后一个逗号
            </summary>
            <param name="origin">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.DelLastMark(System.String,System.String)">
            <summary>
            去掉字符串中最后一个特定字符
            </summary>
            <param name="origin">传入字符串</param>
            <param name="lastMark">特定字符</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.DeleteUnVisibleChar(System.String)">
            <summary>
            删除不可见字符
            </summary>
            <param name="sourceString">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetArrayString(System.String[])">
            <summary>
            获取数组元素的合并字符串
            </summary>
            <param name="stringArray">字符串数组</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetStringArray(System.String,System.String)">
            <summary>
            根据字符串获取特定分隔符数组
            </summary>
            <param name="surString">字符串</param>
            <param name="strMark">分隔符</param>
            <returns>string[]</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetStringCount(System.String[],System.String)">
            <summary>
            获取某一字符串在字符串数组中出现的次数
            </summary>
            <param name="stringArray">传入字符串</param>
            <param name="findString">查找字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetStringCount(System.String,System.String)">
            <summary>
            获取某一字符串在字符串中出现的次数
            </summary>
            <param name="sourceString">传入字符串</param>
            <param name="findString">查找字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetSubString(System.String,System.String)">
            <summary>
            截取从startString开始到原字符串结尾的所有字符
            </summary>
            <param name="sourceString">传入字符串</param>
            <param name="startString">开始字串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetSubString(System.String,System.String,System.String)">
            <summary>
            截取从beginRemovedString开始到endRemovedString原字符串中的所有字符
            </summary>
            <param name="sourceString">传入字符串</param>
            <param name="beginRemovedString">开始字串</param>
            <param name="endRemovedString">截至字串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetSubString(System.String,System.Char,System.Char)">
            <summary>
            截取两特定字符中的字串
            </summary>
            <param name="sourceString">字符串</param>
            <param name="beginChar">起始符</param>
            <param name="endChar">截至符</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetByteCount(System.String)">
            <summary>
            按字节数取出字符串的长度
            </summary>
            <param name="strTmp">传入字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.GetByteIndex(System.Int32,System.String)">
            <summary>
            按字节数要在字符串的位置
            </summary>
            <param name="intIns">位置</param>
            <param name="strTmp">传入字符串</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.NullToZero(System.String)">
            <summary>
            字符串如果为Null返回"0"
            </summary>
            <param name="inStr">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.ZeroToStr(System.Int32)">
            <summary>
            字符串如果为0返回"0"
            </summary>
            <param name="inStr">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.ZeroToStr(System.Int64)">
            <summary>
            字符串如果为0返回"0"
            </summary>
            <param name="inStr">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.NullToSpace(System.String)">
            <summary>
            字符串如果为Null返回" "
            </summary>
            <param name="inStr">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.NullToLong(System.String)">
            <summary>
            根据文本框中录入返回Long，主要针对基础数据引用
            </summary>
            <param name="inStr">传入字符串</param>
            <returns>long</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.ZeroToNull(System.String)">
            <summary>
            根据传入的字符如果为"0"界面显示为空
            </summary>
            <param name="inStr">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.StrToDouble(System.String)">
            <summary>
            String转换成Double
            </summary>
            <param name="inString">传入字符串</param>
            <returns>double</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.StrToInt(System.String)">
            <summary>
            String转换成Int
            </summary>
            <param name="inString">传入字符串</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.StrToLong(System.String)">
            <summary>
            String转换成Long
            </summary>
            <param name="lString">传入字符串</param>
            <returns>long</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.StrToDecimal(System.String)">
            <summary>
            String转换成Decimal
            </summary>
            <param name="inString">传入字符串</param>
            <returns>decimal</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.StrToDecimal(System.Object)">
            <summary>
            Object转化成Decimal
            </summary>
            <param name="inObj"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.StrToDateTime(System.String)">
            <summary>
            String转换成DateTime,如果转换失败，日期为"1000-1-1"
            </summary>
            <param name="inString">传入字符串</param>
            <returns>DateTime</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.ShowDateTime(System.DateTime)">
            <summary>
            根据日期显示对应字符
            </summary>
            <param name="inDate">日期</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.ShowDateTime(System.String)">
            <summary>
            字符型日期转换成显示字符
            </summary>
            <param name="inDate">传入字符串</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.ShowDateTime(System.Object)">
            <summary>
            根据日期显示字符
            </summary>
            <param name="inDate">日期</param>
            <returns>string</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.Util.StringUtil.SplitSysCode(System.String)" -->
        <member name="M:VirtualMachine.Component.Util.StringUtil.NullToStringEmpty(System.Object)">
            <summary>
            null值转换成空字符串
            </summary>
            <param name="inObj">传入对象值</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.StringUtil.NullToDefalutValue(System.Object,System.String)">
            <summary>
            null值转换成默认值
            </summary>
            <param name="inObj">传入对象值</param>
            <param name="defValue">默认值</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.FileUtil.CopyFile(System.String,System.String)">
            <summary>
            复制并替换文件,并将文件的属性设为正常
            </summary>
            <param name="sourceFileName"></param>
            <param name="destFileName"></param>
        </member>
        <member name="T:VirtualMachine.Component.Generator.Service.BillCodeService">
            <summary>
            单据号生成器
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Generator.Service.BillCodeService.GetBillCodeGenerator(System.Int64)">
            <summary>
            获取单据号规则
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Generator.Service.BillCodeService.GetBillCodeGenerator(VirtualMachine.Core.ObjectQuery)">
            <summary>
            获取单据号规则
            </summary>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService">
            <summary>
            分类树节点Service
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.AddRoot(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            增加根节点
            </summary>
            <param name="root"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.AddChildNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            增加子节点
            </summary>
            <param name="childNode"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.UpdateCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            修改节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.MoveNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            移动节点
            </summary>
            <param name="node"></param>
            <param name="toNode"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.InvalidateNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点实效
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.InureToNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点生效
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.DeleteCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            删除节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetCategoryNodeById(System.Int64,System.Type)">
            <summary>
            根据Id和节点类型获取节点
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetCategoryNodeByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据ObjectQuery获取节点
            </summary>
            <param name="type"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetCategoryNodesByType(System.Type)">
            <summary>
            根据节点类型获取节点集合
            </summary>
            <param name="nodeType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetNodesByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据节点类型和ObjectQuery获取节点集合
            </summary>
            <param name="nodeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetInstanceNodesByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据加入实例级权限的节点集合
            </summary>
            <param name="nodeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetNodesByDepth(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,System.Int32)">
            <summary>
            根据节点深度获取节点集合
            </summary>
            <param name="node"></param>
            <param name="depth"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetNodeMaxDepth(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            获取节点的最大深度
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetALLChildNodes(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            获取当前节点的所有的子节点集合
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetALLChildNodes(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据ObjectQuery获取当前节点的所有的子节点集合
            </summary>
            <param name="node"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.ICategoryNodeService.GetMaxOrderNo(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Core.ObjectQuery)">
            <summary>
            获取当前节点所在层次的最大排序号
            </summary>
            <param name="node"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.AddRoot(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            增加根节点
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.AddChildNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            增加子节点
            </summary>
            <param name="childNode"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.UpdateCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点更新
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.InvalidateNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点失效
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.MoveNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            移动节点
            </summary>
            <param name="lstNodes"></param>
            <param name="node"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.DeleteCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            删除分类树节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetNodesByDepth(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,System.Int32)">
            <summary>
            根据深度级别获取节点集合
            </summary>
            <param name="node">操作节点</param>
            <param name="depth">深度</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetCategoryNodeById(System.Int64,System.Type)">
            <summary>
            根据节点ID获取分类节点
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetCategoryNodeByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据ObjectQuery查询分类节点
            </summary>
            <param name="type"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetCategoryNodesByType(System.Type)">
            <summary>
            获取相关分类树的所有节点集合
            根据SysCode进行排序
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.InureToNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点生效
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.IsValidNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            检查加入节点的有效性
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetNodesByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据节点类型与ObjectQuery获取节点集合
            </summary>
            <param name="nodeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetInstanceNodesByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据加入实例级权限返回包含有无权限过滤和有权限过滤的集合
            </summary>
            <param name="nodeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetALLChildNodes(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据ObjectQuery获取子节点集合
            </summary>
            <param name="node"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetALLChildNodes(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            根据当前节点获取所有生效的的子节点
            </summary>
            <param name="lstNodes"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetNodeMaxDepth(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            获取节点最大深度
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.SaveCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            新增保存分类树节点
            保存后再根据Id更新SysCode
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.UpdateNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            修改分类节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeImpl.GetMaxOrderNo(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Core.ObjectQuery)">
            <summary>
            获取当前节点所在层次的最大排序号
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Component.Util.SerializedFormat">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.Util.SerializedFormat.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.Util.SerializedFormat.Document">
            <summary>
            文档
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Load(System.String)">
            <summary>
            从指定的XML文件中装载指定对象
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load(@"C:\XMLObjects.xml");
            </code>
            </example>
            <param name="path">XML文件路径</param>
            <returns>装载的指定对象</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Load(System.String,VirtualMachine.Component.Util.SerializedFormat)">
             <summary>
            从指定的XML文件中装载指定对象
             </summary>
             <example>
             <code>
             serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load(@"C:\XMLObjects.xml", SerializedFormat.Binary);
             </code>
             </example>		
             <param name="path">XML文件路径</param>
             <param name="serializedFormat">XML序列化类型</param>
             <returns>装载的指定对象</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Load(System.String,System.Type[])">
            <summary>
            从指定的XML文件中装载指定对象，支持可扩展类型supplying extra data types to enable deserialization of custom types within the object.
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load(@"C:\XMLObjects.xml", new Type[] { typeof(MyCustomType) });
            </code>
            </example>
            <param name="path">XML文件路径</param>
            <param name="extraTypes">Extra data types to enable deserialization of custom types within the object.</param>
            <returns>装载的指定对象</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Load(System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            从指定的XML文件中装载指定对象, 保存的文件放在隔离安全区(参考:IsolatedStorageFile说明).
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load("XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly());
            </code>
            </example>
            <param name="fileName">XML文件路径</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to load the object from.</param>
            <returns>装载的指定对象</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Load(System.String,System.IO.IsolatedStorage.IsolatedStorageFile,VirtualMachine.Component.Util.SerializedFormat)">
            <summary>
            从指定的XML文件中装载指定对象, 保存的文件放在隔离安全区(参考:IsolatedStorageFile说明).
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load("XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), SerializedFormat.Binary);
            </code>
            </example>		
            <param name="fileName">XML文件路径</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to load the object from.</param>
            <param name="serializedFormat">序列化类型</param>        
            <returns>装载的指定对象</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Load(System.String,System.IO.IsolatedStorage.IsolatedStorageFile,System.Type[])">
            <summary>
            从指定的XML文件中装载指定对象, 保存的文件放在隔离安全区(参考:IsolatedStorageFile说明).
            </summary>
            <example>
            <code>
            serializableObject = ObjectXMLSerializer&lt;SerializableObject&gt;.Load("XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), new Type[] { typeof(MyCustomType) });
            </code>
            </example>		
            <param name="fileName">XML文件路径</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to load the object from.</param>
            <param name="extraTypes">Extra data types to enable deserialization of custom types within the object.</param>
            <returns>装载的指定对象</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Save(`0,System.String)">
            <summary>
            保存可序列化对象到Xml文件中
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, @"C:\XMLObjects.xml");
            </code>
            </example>
            <param name="serializableObject">保存的可序列化对象</param>
            <param name="path">保存到XML文件的路径</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Save(`0,System.String,VirtualMachine.Component.Util.SerializedFormat)">
            <summary>
            保存可序列化对象到Xml文件中
            </summary>
            <example>
            <code>
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, @"C:\XMLObjects.xml", SerializedFormat.Binary);
            </code>
            </example>
            <param name="serializableObject">保存的可序列化对象</param>
            <param name="path">保存到XML文件的路径</param>
            <param name="serializedFormat">序列化类型</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Save(`0,System.String,System.Type[])">
            <summary>
            保存可序列化对象到Xml文件中
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, @"C:\XMLObjects.xml", new Type[] { typeof(MyCustomType) });
            </code>
            </example>
            <param name="serializableObject">保存的可序列化对象</param>
            <param name="path">保存到XML文件的路径</param>
            <param name="extraTypes">Extra data types to enable serialization of custom types within the object.</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Save(`0,System.String,System.IO.IsolatedStorage.IsolatedStorageFile)">
            <summary>
            保存可序列化对象到Xml文件中(安全级别高)
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, "XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly());
            </code>
            </example>
            <param name="serializableObject">保存的可序列化对象</param>
            <param name="path">保存到XML文件的路径</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to save the object to.</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Save(`0,System.String,System.IO.IsolatedStorage.IsolatedStorageFile,VirtualMachine.Component.Util.SerializedFormat)">
            <summary>
            保存可序列化对象到Xml文件中(安全级别高)
            </summary>
            <example>
            <code>        
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, "XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), SerializedFormat.Binary);
            </code>
            </example>
            <param name="serializableObject">需保存的可序列化对象</param>
            <param name="fileName">XML文件名称</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to save the object to.</param>
            <param name="serializedFormat">序列化类型</param>        
        </member>
        <member name="M:VirtualMachine.Component.Util.ObjectXMLSerializer`1.Save(`0,System.String,System.IO.IsolatedStorage.IsolatedStorageFile,System.Type[])">
            <summary>
            保存可序列化对象到Xml文件中(安全级别高)，支持扩展类型
            </summary>
            <example>
            <code>
            SerializableObject serializableObject = new SerializableObject();
            
            ObjectXMLSerializer&lt;SerializableObject&gt;.Save(serializableObject, "XMLObjects.xml", IsolatedStorageFile.GetUserStoreForAssembly(), new Type[] { typeof(MyCustomType) });
            </code>
            </example>		
            <param name="serializableObject">需保存的可序列化对象</param>
            <param name="fileName">XML文件名称</param>
            <param name="isolatedStorageDirectory">Isolated storage area directory containing the XML file to save the object to.</param>
            <param name="extraTypes">扩展类型</param>
        </member>
        <member name="T:VirtualMachine.Component.Util.EnumUtil`1">
            <summary>
            枚举类型操作类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:VirtualMachine.Component.Util.EnumUtil`1.GetDescription(`0)">
            <summary>
            返回枚举值的描述
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.EnumUtil`1.FromDescription(System.String)">
            <summary>
            返回描述的枚举值
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.EnumUtil`1.FromDescription(System.Object)">
            <summary>
            返回描述的枚举值
            </summary>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.EnumUtil`1.GetDescriptions">
            <summary>
            获得枚举类型的所有的描述
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.EnumUtil`1.GetDescriptions(System.String)">
            <summary>
            获得枚举类型描述的字符串
            </summary>
            <param name="SplitFlag">分隔符</param>
            <returns>带分隔符的描述字符串</returns>
        </member>
        <member name="F:VirtualMachine.Component.Notify.UserWarning.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Notify.UserWarning.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:VirtualMachine.Component.Notify.UserWarning.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions">
            <summary>
            系统操作功能
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Create">
            <summary>
            新建
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Modify">
            <summary>
            修改
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Audit">
            <summary>
            审批
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.UnAudit">
            <summary>
            反审
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Cancel">
            <summary>
            作废
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Query">
            <summary>
            查找
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Refer">
            <summary>
            引用
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Preview">
            <summary>
            打印预览
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.Print">
            <summary>
            打印
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.QueryForward">
            <summary>
            穿透查询前驱单据
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions.QueryBackward">
            <summary>
            穿透查询后续单据
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations">
            <summary>
            系统操作
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.OperType">
            <summary>
            操作对象 0 Domain 1 Service
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.DomainClsName">
            <summary>
            Domain对应的类名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.ServiceClsName">
            <summary>
            Service对应的类名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.ServiceMethod">
            <summary>
            Service中具体的方法，可以选择多个，以“,”分割
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.SysLink">
            <summary>
            功能调用的链接
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.SysLinkSec">
            <summary>
            功能调用的二级链接
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.SysTarget">
            <summary>
            功能对应的目的窗口（Frame）
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.OperFunc">
            <summary>
            功能操作类型
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.OperMenu">
            <summary>
            功能操作对应的菜单
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.StatusControlType">
            <summary>
            (作废)状态权限控制方式 0 不设置状态权限 1 不区分岗位 2 区分岗位
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.StatusControls">
            <summary>
            状态权限控制
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.OrderNO">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.OperName">
            <summary>
            功能显示名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.ImagePath">
            <summary>
            按钮图片位置
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.FuncDesc">
            <summary>
            功能按钮描述
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysOperations.OperFuncStr">
            <summary>
            系统操作判断用字符串,取代枚举类型,主要考虑增加功能操作不用修改VM
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner">
            <summary>
            账套配置信息
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.Name">
            <summary>
            账套名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.Code">
            <summary>
            账套编码
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.DbType">
            <summary>
            账套类型
            0 Oracle 1 Sql Server
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.TnsName">
            <summary>
            服务名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.DbUser">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.DbPassword">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgName">
            <summary>
            机构名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgShortName">
            <summary>
            机构简称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgAddress">
            <summary>
            地址
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgOwner">
            <summary>
            法人代表
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgZipCode">
            <summary>
            邮政编码
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgPhone">
            <summary>
            联系电话
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgFax">
            <summary>
            传真
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgMail">
            <summary>
            电子邮箱
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgTaxNumber">
            <summary>
            税号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgRemark">
            <summary>
            机构备注
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.StandardCurrCode">
            <summary>
            本位币币符
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.StandardCurrName">
            <summary>
            本位币名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgTrade">
            <summary>
            行业类型 0 商业 1 工业
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.OrgTradeType">
            <summary>
            行业性质
            0 新会计制度科目 1 工业企业 2 商品流通 3 旅游饮食 4 房地产 5 交通运输 6 金融保险
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.DbManager">
            <summary>
            账套管理员
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.Owner.BelongCode">
            <summary>
            归属代码
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.IContextManager.CreateAppContext(VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext,System.String)">
            <summary>
            创建AppContext
            </summary>
            <param name="contextInfo">context值对象</param>
            <param name="templateName">模板名称</param>
            <remarks>帐套管理</remarks>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Log.ChangedProperty">
            <summary>
            脏属性
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.ClientSideCache.CacheMediator">
            <summary>
            服务器端cache控制中心
            </summary>
            <remarks>ServiceCache</remarks>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Cache.ClientSideCache.CacheMediator.Flush(System.String)">
            <summary>
            Notify Client side CacheSynchronyzer to flush cache,this method should execute in a asynchronize thread
            </summary>
            <param name="cachePartitionName"></param>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.ClientSideCache.Notifyer">
            <summary>
            flush cache 通知器
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.Id">
            <summary>
            规则ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.TheTree">
            <summary>
            结构树
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.ParentClsType">
            <summary>
            父节点关联具体类的类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.ParentClsId">
            <summary>
            父节点关联具体类中记录ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.ConnType">
            <summary>
            父节点可以关联连接的类的类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.ChildNodeKind">
            <summary>
            关联子节点的类型 0 关联具体类 1 关联分类类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.ChildClsType">
            <summary>
            子节点可关联具体类的类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.ChildClsId">
            <summary>
            子节点可关联具体类的记录ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.ChildDesc">
            <summary>
            关联子节点描述
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.Author">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.StructureTreePattern.Domain.StructureRule.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule">
            <summary>
            分类树规则
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.Id">
            <summary>
            规则Id
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.Name">
            <summary>
            规则名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.ParentNodeType">
            <summary>
            父结点类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.ChildNodeType">
            <summary>
            子结点类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.TheTree">
            <summary>
            规则所属的树
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.Author">
            <summary>
            创建人
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryRule.State">
            <summary>
            规则状态
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessRoles">
            <summary>
            业务单据用岗位
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessRoles.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusinessRoles.JobName">
            <summary>
            岗位名称
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.LikeExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "like" constraint.
            </summary>
            <remarks>
            The case sensitivity depends on the database settings for string 
            comparisons.  Use <see cref="T:VirtualMachine.Core.Expression.InsensitiveLikeExpression"/> if the
            string comparison should not be case sensitive.
            </remarks>
        </member>
        <member name="M:VirtualMachine.Core.Expression.LikeExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.LikeExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LikeExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.LikeExpression"/>.
            </summary>
            <value>The string "<c> like </c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.Expression.LeExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "less than or equal" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.LeExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.LeExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.LeExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.LeExpression"/>.
            </summary>
            <value>The string "<c> &lt;= </c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.Expression.Disjunction">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that Junctions together multiple 
            <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s with an <c>or</c>
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.Expression.Disjunction.Op">
            <summary>
            Get the Sql operator to put between multiple <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s.
            </summary>
            <value>The string "<c> or </c>"</value>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus">
            <summary>
            主表引用状态
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.UpdateStatus">
            <summary>
            根据明细状态更新主表状态
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.GetInitailValueByDetails">
            <summary>
            根据明细汇总初始量
            </summary>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.DetailRefs">
            <summary>
            明细引用状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.Master">
            <summary>
            相关主表
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.Rule">
            <summary>
            链接规则
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.RefValue">
            <summary>
            引用量
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.InitialTotal">
            <summary>
            初始量
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.MasterRefStatus.IsOver">
            <summary>
            是否已完成
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.Util.SortObjectList.SortObjectList.Sort``1(System.Collections.IList,System.String)" -->
        <member name="M:VirtualMachine.Component.RegeditUtil.RunWhenStart(System.Boolean,System.String,System.String)">
            <summary>
            开机启动项
            用法：RunWhenStart(true, Application.ProductName, Application.StartupPath + @"\程序.exe\");
            </summary>
            <param name="Started">是否启动</param>
            <param name="name">启动值的名称</param>
            <param name="path">启动程序的路径</param>
        </member>
        <member name="M:VirtualMachine.Component.RegeditUtil.GetRunWhenStartValue(System.String)">
            <summary>
            获得指定启动项的值
            </summary>
            <param name="name">启动项名称</param>
            <returns>启动项值</returns>
        </member>
        <member name="M:VirtualMachine.Component.RegeditUtil.IsRunWhenStart(System.String)">
            <summary>
            指定项是否自动启动
            </summary>
            <param name="name">指定项名称</param>
            <returns>True或False</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.GetPasswordHashCode(System.String)">
            <summary>
            根据录入字符串确定密码
            </summary>
            <param name="passWord"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.SaveSysOper(VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator)">
            <summary>
            新增
            </summary>
            <param name="nowOper"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.UpdateSysOper(VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator)">
            <summary>
            修改
            </summary>
            <param name="nowOper"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.DeleteSysOper(VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator)">
            <summary>
            删除
            </summary>
            <param name="nowOper"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.GetSysOperator(System.Int64)">
            <summary>
            获取
            </summary>
            <param name="operId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.SaveSysRole(VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole)">
            <summary>
            保存
            </summary>
            <param name="nowRole"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.UpdateSysRole(VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole)">
            <summary>
            修改
            </summary>
            <param name="nowRole"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.DeleteSysRole(VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysRole)">
            <summary>
            删除
            </summary>
            <param name="nowRole"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.AuthenticLogInfo(System.Int64,System.String)">
            <summary>
            校验登陆信息
            </summary>
            <param name="operId">用户ID</param>
            <param name="operPassword">密码</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.GetOperOnRoles(System.Int64)">
            <summary>
            获取当前用户的角色
            </summary>
            <param name="operId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.GetOperOnRoles(System.Int64,System.DateTime)">
            <summary>
            根据用户和登录时间确定岗位
            </summary>
            <param name="operId">操作员</param>
            <param name="logDate">登录日期</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.GetOperatorByRole(System.Int64)">
            <summary>
            根据岗位确定在岗的操作员
            </summary>
            <param name="roleId">岗位ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.AuthenticSysOperIsExists(System.Int64)">
            <summary>
            校验当前用户是否存在
            </summary>
            <param name="operId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.AuthenticSysOperIsExists(System.String)">
            <summary>
            校验用户是否存在，根据用户编码
            </summary>
            <param name="operCode"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.GetOperatorByCode(System.String)">
            <summary>
            根据Code返回操作员
            </summary>
            <param name="operCode"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.SysAuthentication.Service.SysAuthentic.ChangePassword(System.Int64,System.String)">
            <summary>
            修改用户密码
            </summary>
            <param name="perId">操作员ID</param>
            <param name="newPassword">密码</param>
            <returns>bool</returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator">
            <summary>
            操作员
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.OperCode">
            <summary>
            编码
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.OperName">
            <summary>
            姓名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.OperPassword">
            <summary>
            密码
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.RelateRole">
            <summary>
            角色关系
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.OrderNO">
            <summary>
            排序号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperator.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.RtnSysOpertions(System.String,System.String,System.String)">
            <summary>
            根据操作业务对象、服务名和方法名返回SysOperations
            </summary>
            <param name="inDomClsName">业务对象</param>
            <param name="inSrvName">服务</param>
            <param name="inMethodName">方法</param>
            <returns>SysOperations</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.CheckStatusPermission(System.Object,System.Int64,System.String,System.String,System.String)">
            <summary>
            根据传入的操作信息判断是否具有相应的状态权限
            </summary>
            <param name="nowObj">当前操作的实例</param>
            <param name="inRoleId">当前角色Id</param>
            <param name="inClass">当前类名</param>
            <param name="inMethod">当前方法名</param>
            <returns>true/false</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.SaveDefaultStatusPermission(System.Int32,System.Collections.IList)">
            <summary>
            默认状态权限存盘
            </summary>
            <param name="inState">状态</param>
            <param name="permitFunc">功能操作</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.ShowDefaultPermitByState(System.Int32)">
            <summary>
            根据状态显示所有默认状态权限
            </summary>
            <param name="inState">单据状态</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.ShowDefaultStateBySysFunc(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions)">
            <summary>
            根据操作显示当前操作具有权限的默认状态
            </summary>
            <param name="sysFunc">操作</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.ShowDefaultStateBySysFunc(System.Int64)">
            <summary>
            根据功能操作返回具有权限的默认状态
            </summary>
            <param name="sysOperId">功能操作ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.SaveStatusPermission(System.Int64,System.Int32,System.Collections.IList,System.Int64)">
            <summary>
            不区分岗位状态权限存盘
            </summary>
            <param name="operId">功能操作ID</param>
            <param name="statType">状态权限类型</param>
            <param name="lsStatus">状态权限集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.SaveStatusPermission(System.Int64,System.Int32,System.Collections.IList,System.Collections.IList)">
            <summary>
            区分岗位状态权限存盘
            </summary>
            <param name="operId">功能操作ID</param>
            <param name="statType">状态权限类型</param>
            <param name="lsStatus">状态权限集合</param>
            <param name="lsRoles">角色集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.StatusSecurity.Service.StatusSrvDao.ShowStatusPermission(System.Int64)">
            <summary>
            根据操作返回当前操作的状态权限
            </summary>
            <param name="operId"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelPermissionService.CheckServiceClassPermission(System.Int64,System.String,System.String)">
            <summary>
            服务对象安全检查(功能安全)
            </summary>
            <param name="roleId">角色Id</param>
            <param name="className">类名</param>
            <param name="methodName">方法名</param>
            <returns>True/False</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelPermissionService.CheckReadPermission(System.String,System.Int64)">
            <summary>
            检查域对象读权限
            </summary>
            <param name="className">类名</param>
            <param name="roleId">角色ID</param>
            <returns>true/false</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelPermissionService.CheckDomainClassPermission(System.Int64,System.String,VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassAction)">
            <summary>
            域对象安全检查(数据安全)
            </summary>
            <param name="roleId">角色Id</param>
            <param name="className">类名</param>
            <param name="action">操作</param>
            <returns>true/false</returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage">
            <summary>
            虚拟包
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.DomainObjects">
            <summary>
            DomainObjects
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.Remark">
            <summary>
            备注字段
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.Parents">
            <summary>
            父项
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.VirtualPackage.Childs">
            <summary>
            子项
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.RegisterCommandHandler">
            <summary>
            注册CommandHandler
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.Host(System.String,System.Object)">
            <summary>
            输出对象为组件,以便远程访问
            </summary>
            <param name="objectName"></param>
            <param name="service"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.ExecuteCommand(VirtualMachine.SystemAspect.Remoting.Value.Command)">
            
            <param name="command"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.AddAppContext(VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext)">
            
            <param name="context"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.RemoveContext(System.String)">
            
            <param name="context"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.ReCopyContextLib(System.String)">
            
            <param name="context"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.FindContextByName(System.String)">
            <summary>
            返回AppContext值对象
            </summary>
            <param name="contextName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.GetContextByName(System.String)">
            <summary>
            返回AppContext域对象
            </summary>
            <param name="contextName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.GenerateClientConfig(System.String,System.String,System.Boolean)">
            <summary>
            为客户端生成spring context
            </summary>
            <param name="serverAddress">服务器地址</param>
            <param name="contextName">context名称</param>
            <param name="useClientSideCache">是否使用客户端缓存</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.GenerateClientConfigByFile(System.String,System.String,System.String)">
            <summary>
            根据spring 配置文件生成客户端spring context
            </summary>
            <param name="appName"></param>
            <param name="cfgFileName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.ContextManager.CreateAppContext(VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContext,System.String)">
            <summary>
            创建AppContext
            </summary>
            <param name="contextInfo">context值对象</param>
            <param name="templateName">模板名称</param>
            <remarks>帐套管理</remarks>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.FetchModeProxyFactory.CreateProxy(System.Collections.IList,System.Object)">
            <summary>
            
            </summary>
            <param name="fetchmodes"></param>
            <param name="target"></param>
            <returns>返回IFetchModeProxy对象或者IFetchModeProxy对象的集合</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Persistent.Odb.FetchMode.FetchModeProxyFactory.UnProxy(System.Object)">
            <summary>
            递归扫描对象树，将代理还原为它的目标对象
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.InitialClassData.AddAssembly(System.String)">
            <summary>
            加入程序集
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.InitialClassData.InitialData">
            <summary>
            数据字典初始化
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.InitialClassData.AddMapFiles(System.String)">
            <summary>
            加入Map文件字符
            </summary>
            <param name="mapFiles"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.InitialClassData.RtnColumnType(System.String)">
            <summary>
            根据Map文件中的类型确定数据库中的类型
            </summary>
            <param name="columnDesc">传入定义类型</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.InitialClassData.RtnClsTable(System.String)">
            <summary>
            根据表名判断是否存在
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.DataDictionary.Service.InitialClassData.InitialDataTables">
            <summary>
            类数据表初始化
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.ClientSideCache.SqliteDbGenerator.OrderedSqliteMaps">
            <summary>
            已排序的sqlite map文件
            </summary>
        </member>
        <member name="F:VirtualMachine.SystemAspect.ClientSideCache.SqliteDbGenerator.SqliteDbFileName">
            <summary>
            Sqlite 数据库文件名,如果为null,表示初始化数据库失败或者复制数据失败
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.ClientSideCache.SqliteDbGenerator.Generate">
            <summary>
            生成sqlite map文件和数据库
            post condition:
            1:sqlite map文件已生成,放在./sqlite 目录中
            2:sqlite数据库文件123.db3已生成,放在./sqliteDb目录中
            3:orderedMaps存放着已排序的sqlite map文件,orderedMaps已序列化到./sqlite/maps.dat
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.ClientSideCache.SqliteDbGenerator.CopyData(System.String,System.String,System.String)">
            <summary>
            拷贝数据到sqlit
            前置条件:上一步成功执行了Generate()
            </summary>
            <param name="ip"></param>
            <param name="port"></param>
            <param name="contextName"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.ClientSideCache.SqliteDbGenerator.TransformCfgFile(System.String,System.Collections.IList)">
            <summary>
            在cfgFile的目录下生成一个新目录Sqlite,里面存放新的spring 配置文件,其中dao被
            配置到Sqlite
            </summary>
            <param name="cfgFile"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.ClientSideCache.SqliteDbGenerator.CreateCacheContext(System.String,System.Collections.IList,System.String,System.String,System.String)">
            <summary>
            创建客户端缓存context
            SqliteDbGenerator generator = new SqliteDbGenerator();
            IList assemblys=new ArrayList();
            assemblys.Add("ResourceManager");
            assemblys.Add("VirtualMachine");
            IApplicationContext ctx = generator.CreateCacheContext(@"C:\ResourceManager\Console\appContext.xml", assemblys, "127.0.0.1", "8998", "ResourceManager");
            </summary>
            <param name="springCfgFile">server端spring配置文件</param>
            <param name="assemblys">包含map文件的程序集</param>
            <param name="ip">服务器地址</param>
            <param name="port">服务器端口</param>
            <param name="remoteContextName">远程context名称</param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData">
            <summary>
            类属性数据字典
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.PropertyAlias">
            <summary>
            属性别名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.Datatype">
            <summary>
            属性数据类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.PropClass">
            <summary>
            如果数据类型为关联其他类，确定具体类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.PropertyFormat">
            <summary>
            属性格式
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.PropertyFunction">
            <summary>
            属性用途类型
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.PropertyDesc">
            <summary>
            简短描述
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.DefaultData">
            <summary>
            默认值
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.Validate">
            <summary>
            值有效性判断
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.SerialNO">
            <summary>
            对象属性显示表中的序号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.IsNull">
            <summary>
            能否为空
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.GetMethod">
            <summary>
            取值方式
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.EnumTable">
            <summary>
            枚举值表名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.TheClass">
            <summary>
            类数据字典
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.InfoType">
            <summary>
            信息类型，用做属性安全控制
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.PropertyData.RelateClass">
            <summary>
            属性关联其他类
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.OrExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that combines two <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s with an 
            <c>"or"</c> between them.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.OrExpression.#ctor(VirtualMachine.Core.Expression.ICriterion,VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.OrExpression"/> class for 
            two <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>s.
            </summary>
            <param name="lhs">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to use as the left hand side.</param>
            <param name="rhs">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to use as the right hand side.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.OrExpression.Op">
            <summary>
            Get the Sql operator to put between the two <see cref="T:VirtualMachine.Core.Expression.Expression"/>s.
            </summary>
            <value>Returns "<c>or</c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.Expression.NotExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that negates another <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.NotExpression.#ctor(VirtualMachine.Core.Expression.ICriterion)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.NotExpression"/> class for an
            <see cref="T:VirtualMachine.Core.Expression.ICriterion"/>
            </summary>
            <param name="criterion">The <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> to negate.</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.NotExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.EqExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "equal" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.EqExpression.#ctor(System.String,System.Object,System.Boolean)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.EqExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
            <param name="ignoreCase">Use case-insensitive comparison</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.EqExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.EqExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.EqExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.EqExpression"/>.
            </summary>
            <value>The string "<c> = </c>"</value>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.IAppConfig">
            <summary>
            应用程序配置接口，此接口供系统程序员使用
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.IAppConfig.InjectComponentToApp(System.String,System.String)">
            <summary>
            注射组件到程序
            </summary>
            <param name="componentName"></param>
            <param name="appName"></param>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.IAppConfig.PersistentFolderName">
            
            <param name="aspectDefine"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.AppMapGenerator.CreateScript">
            <summary>
            生成脚本
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.AppMapGenerator.SpringTransFormApp(System.AppDomain)">
            <summary>
            生成Spring文件
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.Design.AppMapGenerator.MapsByHuman">
            <summary>
            程序员手工写的Map文件。本转化器不生成这些Map文件相关的类的Map,
            只是将这些Map文件拷贝到App的Maps目录
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.Design.AppMapGenerator.App">
            <summary>
            需要做转化的目标程序
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.Design.AppMapGenerator.DbConnStr">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.Design.AppMapGenerator.DbType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Util.IPropertyAccessor1">
            <summary>
            The IPropertyAccessor interface defines a property
            accessor.
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.IPropertyAccessor1.Get(System.Object)">
            <summary>
            Gets the value stored in the property for
            the specified target.
            </summary>
            <param name="target">Object to retrieve
            the property from.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.IPropertyAccessor1.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the property of
            the specified target.
            </summary>
            <param name="target">Object to set the
            property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="T:VirtualMachine.Component.Util.PropertyAccessor1">
            <summary>
            The PropertyAccessor class provides fast dynamic access
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessor1.#ctor(System.Type,System.String)">
            <summary>
            Creates a new property accessor.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="property">Property name.</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessor1.Get(System.Object)">
            <summary>
            Gets the property value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessor1.Set(System.Object,System.Object)">
            <summary>
            Sets the property for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessor1.Init">
            <summary>
            This method generates creates a new assembly containing
            the Type that will provide dynamic access.
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessor1.InitTypes">
            <summary>
            Thanks to Ben Ratzlaff for this snippet of code
            http://www.codeproject.com/cs/miscctrl/CustomPropGrid.asp
            
            "Initialize a private hashtable with type-opCode pairs 
            so i dont have to write a long if/else statement when outputting msil"
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessor1.EmitAssembly">
            <summary>
            Create an assembly that will provide the get and set methods.
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Util.PropertyAccessor1.CanRead">
            <summary>
            Whether or not the Property supports read access.
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Util.PropertyAccessor1.CanWrite">
            <summary>
            Whether or not the Property supports write access.
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Util.PropertyAccessor1.TargetType">
            <summary>
            The Type of object this property accessor was
            created for.
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Util.PropertyAccessor1.PropertyType">
            <summary>
            The Type of the Property being accessed.
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Util.BusinessUtil">
            <summary>
            业务相关公用函数
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnBusinessState(VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState)">
            <summary>
            以Int形式返回业务状态
            </summary>
            <param name="nowState">业务状态</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnBusinessState(System.String)">
            <summary>
            以Int形式返回业务状态
            </summary>
            <param name="nowState">业务状态</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnStateByInt(System.Int32)">
            <summary>
            根据Int返回单据状态
            </summary>
            <param name="stateId">单据状态</param>
            <returns>DocumentState</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnDocStateDesc(System.Int32)">
            <summary>
            根据Int状态返回单据状态描述
            </summary>
            <param name="stateId">单据状态ID</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnDocStateDesc(VirtualMachine.Patterns.BusinessEssence.Domain.DocumentState)">
            <summary>
            根据单据状态状态返回单据状态描述
            </summary>
            <param name="nowState">单据状态</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnDocStateCnt">
            <summary>
            返回单据状态枚举类型的个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnSysFunctionInt(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions)">
            <summary>
            根据功能操作返回Int
            </summary>
            <param name="nowFunc">功能操作</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnSysFunctionByInt(System.Int32)">
            <summary>
            根据Int返回系统功能操作
            </summary>
            <param name="inIndex">功能操作Int</param>
            <returns>SysFunctions</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnSysFunctionDesc(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.SysFunctions)">
            <summary>
            返回功能操作中文描述
            </summary>
            <param name="nowFunc">功能操作</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnSysFunctionDesc(System.Int32)">
            <summary>
            返回功能操作中文描述
            </summary>
            <param name="inIndex">功能操作</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnSysFunctionCnt">
            <summary>
            返回功能操作枚举类型的个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnDataType(VirtualMachine.Patterns.DataDictionary.Domain.DataTypes)">
            <summary>
            返回Int形式数据类型
            </summary>
            <param name="nowType">数据类型</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnDataTypeByInt(System.Int32)">
            <summary>
            根据Int返回数据类型
            </summary>
            <param name="dataTypeId">数据类型Int</param>
            <returns>DataTypes</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnDataTypeCnt">
            <summary>
            返回数据类型枚举类型的个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnPropFunc(VirtualMachine.Patterns.DataDictionary.Domain.PropertyFunc)">
            <summary>
            以Int形式返回用途类型
            </summary>
            <param name="nwoPropFunc">用途类型</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnPropFuncByInt(System.Int32)">
            <summary>
            根据Int返回用途类型
            </summary>
            <param name="propFuncId">用途类型Int</param>
            <returns>PropertyFunc</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnPropFuncCnt">
            <summary>
            返回用途类型枚举类型的个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnEvalMethod(VirtualMachine.Patterns.DataDictionary.Domain.EvaluateMethod)">
            <summary>
            以Int形式返回取值方式
            </summary>
            <param name="nowEvalMethod">取值方式</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnEvalMethodByInt(System.Int32)">
            <summary>
            根据Int返回取值方式
            </summary>
            <param name="evalMethodId">取值方式Int</param>
            <returns>EvaluateMethod</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnEvalMethodCnt">
            <summary>
            返回取值方式枚举类型的个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnInfoType(VirtualMachine.Patterns.DataDictionary.Domain.InformationType)">
            <summary>
            以Int形式返回属性信息类型
            </summary>
            <param name="nowInfoType">属性信息</param>
            <returns>int</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnInfoTypeByInt(System.Int32)">
            <summary>
            根据Int返回属性信息类型
            </summary>
            <param name="stateId">属性信息类型</param>
            <returns>InformationType</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.BusinessUtil.RtnInfoTypeCnt">
            <summary>
            返回属性信息枚举类型的个数
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.StateTrack.ClientStateAdaptor.SetCurrentState(VirtualMachine.Component.StateTrack.State)">
            <summary>
            导入数据
            </summary>
            <param name="state"></param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.Component.StateTrack.ClientStateAdaptor.Initial" -->
        <member name="T:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass">
            <summary>
            资源类的元描述
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.ClsDataId">
            <summary>
            数据字典中类的ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.ClassName">
            <summary>
            所描述类的类名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.TreeName">
            <summary>
            受控树 SysRole 受岗位树控制，表单和业务岗位等，可以根据默认实例权限规则过滤 默认规则可选 0 2 3
            SysMenu 菜单 无法构建默认规则 默认规则为 0
            CategoryTree 分类树 默认规则为 0 构建实例条件全部为like 避免节点类型变更
            ResInstance 分类节点 默认规则为 0 构建实例条件为 Id in (),因为类上无SysCode
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.OwnerFieldName">
            <summary>
            导航到所有者的字符串
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.NodeCodeField">
            <summary>
            导航到组织编码的字符串
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass.DefaultInsLevel">
            <summary>
            默认实例权限级别，如果类受保护但没有相关设置，起效
            0 God 1 SuperAdmin 2 Admin 3 Operator
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission">
            <summary>
            实例权限关于属性设置许可
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission.ConditionRelation">
            <summary>
            多条件之间关系 0 且 1 或
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission.PropertyName">
            <summary>
            判断条件的属性名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission.ConDirection">
            <summary>
            条件的是非性判断，1 是 0 否
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission.MarkForCal">
            <summary>
            计算符号
            符号说明：0 等于, 1 大于等于, 2 小于等于, 3 大于, 4 小于, 5 不等于, 6 like(前匹配), 7 in(全匹配)
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission.PropertyValue">
            <summary>
            属性判定值
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission.InsDataType">
            <summary>
            数据类型 0 字符 1 数值Decimal 2 日期 3 数值int 4 数值long
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.NHibernateTransform.TransformApp(VirtualMachine.Core.AppHost.DataOfTransform)">
            <summary>
            转化程序
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.NHibernateTransform.MergeDependentApps(VirtualMachine.Core.AppHost.Application)">
            <summary>
            合并依赖的相关程序
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.Design.TransformScript">
            <summary>
            程序转化脚本，它包含了一个或多个子转化
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.TransformScript.TransformApp(VirtualMachine.Core.AppHost.DataOfTransform)">
            <summary>
            转化程序
            </summary>
            <param name="app"></param>
            <param name="data"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.TransformScript.Init">
            <summary>
            初始化切面
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.VisualMemoryDaoTransform.TransformApp(VirtualMachine.Core.AppHost.DataOfTransform)">
            <summary>
            转化程序
            </summary>
            <param name="app"></param>
            <param name="data"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.Design.VisualMemoryDaoTransform.Init">
            <summary>
            加载一个程序
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:VirtualMachine.Component.SystemService">
            <summary>
            系统服务
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.SystemService.GetDBServerTime">
            <summary>
            获取数据库服务器的时间
            </summary>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus">
            <summary>
            明细引用状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus.MasterRef">
            <summary>
            主表引用状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus.Id">
            <summary>
            唯一标识
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus.Detail">
            <summary>
            相关明细
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus.Rule">
            <summary>
            链接规则
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus.RefValue">
            <summary>
            引用量
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus.InitialTotal">
            <summary>
            初始量
            如果为0 表示还未被引用过
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.DetailRefStatus.IsOver">
            <summary>
            是否已完成
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Util.PropertyAccessUtil">
            <summary>
            属性访问(.Net自带的反射机制)
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessUtil.Get(System.Object,System.String)">
            <summary>
            获取属性
            </summary>
            <param name="o"></param>
            <param name="propertyPath"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.PropertyAccessUtil.Set(System.Object,System.String,System.Object)">
            <summary>
            设置属性
            </summary>
            <param name="o"></param>
            <param name="propertyPath"></param>
            <param name="value"></param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceConfigure.isExistProtectClass(System.String)">
            <summary>
            判断类在需要实例保护的清单中是否存在
            </summary>
            <param name="className">类名称</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceConfigure.isExistProtectClass(System.Int64)">
            <summary>
            判断类在需要实例保护的清单中是否存在
            </summary>
            <param name="classId">类数据字典ID</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceConfigure.SaveProtectClass(VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass)">
            <summary>
            需要实例权限保护类存盘
            </summary>
            <param name="proClass">需保护类</param>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceConfigure.ShowRoleInsPermit(System.Int64,System.Int64)">
            <summary>
            根据角色ID和业务对象ID查找实例权限配置
            </summary>
            <param name="roleID">角色ID</param>
            <param name="busObjId">业务对象ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceConfigure.SaveSinglePermission(VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.RoleInsPermission)">
            <summary>
            实例权限维护存盘
            </summary>
            <param name="insPermit">实例权限配置</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceConfigure.SaveRoleInsPermission(System.Int64,System.Int64,System.Collections.IList)">
            <summary>
            根据角色、业务对象和实例权限存盘
            </summary>
            <param name="roleId">角色ID</param>
            <param name="busObjId">业务对象ID</param>
            <param name="lsPermission">权限</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceConfigure.SaveRoleInsPermission(System.Collections.IList,System.Int64,System.Collections.IList)">
            <summary>
            多角色实例权限配置存盘
            </summary>
            <param name="roleId">角色集合</param>
            <param name="busObjId">业务对象ID</param>
            <param name="lsPermission">实例权限许可</param>
            <returns>bool</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.IsProtectedClass(System.String)">
            <summary>
            判断一个类是否需要做安全检查（如果存在一个与此类名相对应的DomainClass实例，则需要安全检查）
            </summary>
            <param name="className">类名</param>
            <returns>true/false</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.FindDomainClassPermisson(System.Int64,System.String,VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClassAction)">
            <summary>
            校验域对象权限
            </summary>
            <param name="roleId">角色Id</param>
            <param name="className">类名</param>
            <param name="action">数据操作层次</param>
            <returns>true/false</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.FindServiceMethodPermision(System.Int64,System.String,System.String)">
            <summary>
            校验服务权限
            </summary>
            <param name="methodName">Service名称</param>
            <param name="className">类名</param>
            <param name="roleId">角色Id</param>
            <returns>true/false</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.FindDomainClassByName(System.String)">
            <summary>
            根据类名查找DomainClass
            </summary>
            <param name="className">类名</param>
            <returns>DomainClass</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.ListDomainPermissionByRoleId(VirtualMachine.SystemAspect.Security.FunctionSecurity.Domain.DomainClass,System.Int64)">
            <summary>
            查找角色对一个DomainClass的所有DomainClassPermission（包括read,write,create,delete权限）
            </summary>
            <param name="domainClass">DomainClass</param>
            <param name="roleId">角色ID</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.ListDomainPermissionByRoleId(System.String,System.Int64)">
            <summary>
            查找角色对一个DomainClass的所有DomainClassPermission（包括read,write,create,delete权限）
            </summary>
            <param name="className">类名</param>
            <param name="roleId">角色Id</param>
            <returns>IList</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.ListVirtualPackageByRoleName(System.Int64)">
            <summary>
            查找一个角色有操作权限的所有虚拟包
            </summary>
            <param name="roleName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.FunctionSecurity.Service.ClassLevelSecurityDao.ListVirtualPackageByConn(System.Collections.IList@)">
            <summary>
            递归算法遍历关联树下所有虚拟包
            </summary>
            <param name="listVirPackage"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditFailObjs">
            <summary>
            审批不通过对象
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditFailObjs.ObjClassName">
            <summary>
            对象类名
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditFailObjs.ObjClassDesc">
            <summary>
            对象类描述
            </summary>
        </member>
        <member name="F:VirtualMachine.Patterns.BusinessEssence.ValueObject.AuditFailObjs.ObjId">
            <summary>
            对象类ID
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation">
            <summary>
            明细连接关系
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.UpdateForwardStatus(VirtualMachine.Patterns.BusinessEssence.Domain.LinkRule,System.Decimal)">
            <summary>
            更新前驱引用状态
            </summary>
            <param name="rule"></param>
            <param name="changeValue"></param>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.ForwardObject">
            <summary>
            前驱对象 没有映射到数据库 又服务初始化
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.ForwardDetailId">
            <summary>
            前驱明细对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.BackwardDetail">
            <summary>
            基准明细对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.ForwardDetClsName">
            <summary>
            前驱类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.BackwardDetClsName">
            <summary>
            后续类名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.InitialTotal">
            <summary>
            初始量
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.RefTotal">
            <summary>
            引用量
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.ForwardMainId">
            <summary>
            前驱主类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.BackwardMain">
            <summary>
            后续主类
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.BusEntityDetRelation.IsRefOver">
            <summary>
            在关系上设置标志判断是否引用完成，计算引用量按Sum计算
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.BusinessEssence.Domain.AuditScheme">
            <summary>
            审批方案
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditScheme.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditScheme.SchemeName">
            <summary>
            审批方案名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditScheme.TheAuditDefine">
            <summary>
            审批方案对应的审批单据
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditScheme.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditScheme.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.BusinessEssence.Domain.AuditScheme.AutoAudit">
            <summary>
            自动审批标志
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.InsensitiveLikeExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "like" constraint
            that is <b>not</b> case sensitive.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.InsensitiveLikeExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.InsensitiveLikeExpression"/> 
            class for a named Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.InsensitiveLikeExpression.ToString">
            <summary></summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.GtExpression">
            <summary>
            An <see cref="T:VirtualMachine.Core.Expression.ICriterion"/> that represents an "greater than" constraint.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.GtExpression.#ctor(System.String,System.Object)">
            <summary>
            Initialize a new instance of the <see cref="T:VirtualMachine.Core.Expression.GtExpression"/> class for a named
            Property and its value.
            </summary>
            <param name="propertyName">The name of the Property in the class.</param>
            <param name="value">The value for the Property.</param>
        </member>
        <member name="P:VirtualMachine.Core.Expression.GtExpression.Op">
            <summary>
            Get the Sql operator to use for the <see cref="T:VirtualMachine.Core.Expression.GtExpression"/>.
            </summary>
            <value>The string "<c> &gt; </c>"</value>
        </member>
        <member name="T:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService">
            <summary>
            分类树模式Service
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.AddRoot(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            增加根节点
            </summary>
            <param name="root"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.AddChildNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            添加子节点
            </summary>
            <param name="childNode"></param>
            <param name="parentNode"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.UpdateCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点更新
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.MoveNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            移动节点
            </summary>
            <param name="lstNodes"></param>
            <param name="node"></param>
            <param name="toNode"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.DeleteCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            删除分类树节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetNodesByDepth(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,System.Int32)">
            <summary>
            根据深度级别获取节点集合
            </summary>
            <param name="node">操作节点</param>
            <param name="depth">深度</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetCategoryNodeById(System.Int64,System.Type)">
            <summary>
            根据节点ID获取分类节点
            </summary>
            <param name="id"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetCategoryNodeByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据ObjectQuery查询分类节点
            </summary>
            <param name="type"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetCategoryNodesByType(System.Type)">
            <summary>
            获取相关分类树的所有节点集合
            根据SysCode进行排序
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.InvalidateNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点失效
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.InureToNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            节点生效
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.IsValidNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            检查加入节点的有效性
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetNodesByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据节点类型与ObjectQuery获取节点集合
            </summary>
            <param name="nodeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetInstanceNodesByObjectQuery(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据加入实例级权限返回包含有无权限过滤和有权限过滤的集合
            </summary>
            <param name="nodeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetALLChildNodes(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据ObjectQuery获取子节点集合
            </summary>
            <param name="node"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetALLChildNodes(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            根据当前节点获取所有生效的的子节点
            </summary>
            <param name="lstNodes"></param>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetNodeMaxDepth(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            获取节点最大深度
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.SaveCategoryNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            新增保存分类树节点
            保存后再根据Id更新SysCode
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.UpdateNode(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode)">
            <summary>
            修改分类节点
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.GetMaxOrderNo(VirtualMachine.Patterns.CategoryTreePattern.Domain.CategoryNode,VirtualMachine.Core.ObjectQuery)">
            <summary>
            获取当前节点所在层次的最大排序号
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.Patterns.CategoryTreePattern.Service.CategoryNodeService.NakedDao">
            <summary>
            无权限Dao
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.ExceptionHandle.ExceptionLevel">
            <summary>
            异常严重级别
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ExceptionHandle.ExceptionLevel.VeryHigh">
            <summary>
            非常高
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ExceptionHandle.ExceptionLevel.High">
            <summary>
            高
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ExceptionHandle.ExceptionLevel.Middle">
            <summary>
            中等
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ExceptionHandle.ExceptionLevel.Low">
            <summary>
            低
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.ExceptionHandle.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ExceptionHandle.ExceptionType.Application">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="F:VirtualMachine.Component.ExceptionHandle.ExceptionType.UnCatch">
            <summary>
            未捕获错误
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.ModuleCode">
            <summary>
            模块编号
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.ModuleName">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.Author">
            <summary>
            操作人员
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.ExceptionCode">
            <summary>
            异常编号
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.CustomMessage">
            <summary>
            配置文件中定义的错误信息
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.DetailMessage">
            <summary>
            错误详细信息,应用程序自己抛出的
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.Level">
            <summary>
            异常严重级别
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionLog.Type">
            <summary>
            异常类别
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionControl.GetConfig(System.String)">
            <summary>
            根据自定义异常编号获取配置信息
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionControl.AddLog(VirtualMachine.Component.ExceptionHandle.ExceptionLog)">
            <summary>
            添加错误日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionControl.DeleteLog(VirtualMachine.Component.ExceptionHandle.ExceptionLog)">
            <summary>
            删除错误日志
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionControl.GetLogs(VirtualMachine.Core.ObjectQuery)">
            <summary>
            获取日志列表
            </summary>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole">
            <summary>
            用户与角色对应关系
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.RelationRole">
            <summary>
            角色
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.RelationOper">
            <summary>
            操作员
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.BeginDate">
            <summary>
            开始日期
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.EndDate">
            <summary>
            截至日期
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.FuncPermissions">
            <summary>
            针对人员上岗所设置的功能权限，优先级先于针对岗位权限
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.InsPermissions">
            <summary>
            针对人员上岗所设置的实例权限，优先级先于针对岗位权限
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.SysAuthentication.Domain.SysOperOnRole.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager">
            <summary>
            实例权限管理Service
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.RtnProtectedClass(System.String)">
            <summary>
            根据当前类名返回实例权限设置
            </summary>
            <param name="clsName">类名</param>
            <returns>ProtectedClass</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.RtnBusObjectByClassName(System.String)">
            <summary>
            根据类名查找业务对象与类关系返回业务对象(废弃)
            </summary>
            <param name="clsName">类名</param>
            <returns>BusinessObject</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.RtnInsPermission(System.Int64,System.Int64)">
            <summary>
            根据业务对象和角色确定具体实例权限设置(废弃)
            </summary>
            <param name="busObjId">业务对象ID</param>
            <param name="roleId">角色ID</param>
            <returns>RoleInsPermission</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.RtnInsPermission(System.Int64,System.Int64,System.Int64)">
            <summary>
            根据受保护类、角色、岗位确定实例权限，区分权限先后级别
            </summary>
            <param name="proClsId">受保护类</param>
            <param name="roleId">岗位</param>
            <param name="operId">操作员</param>
            <returns>RoleInsPermission</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.DefaultInsPermit(VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass,System.Int64,System.String)">
            <summary>
            构造默认实例权限控制条件
            </summary>
            <param name="proClass">受保护类</param>
            <param name="OperId">操作员ID</param>
            <param name="insSyscode">岗位Syscode</param>
            <returns>ICriterion</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.GetCriterionByPermit(System.Collections.Generic.IList{VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsBusinessOrgPermission},VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass)">
            <summary>
            根据业务组织实例权限拼凑条件
            </summary>
            <param name="lsOrgPmt">权限集合</param>
            <param name="proClass">保护类</param>
            <returns>ICriterion</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.GetCriterionByPropPermit(System.Collections.Generic.IList{VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsPropertyPermission},VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass)">
            <summary>
            根据属性权限拼凑条件
            </summary>
            <param name="lsPropPmt">属性集合</param>
            <param name="proClass">保护类</param>
            <returns>ICriterion</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.ReBuildObjectQuery(VirtualMachine.Core.ObjectQuery,VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass,System.Int64,System.Int64,System.String)">
            <summary>
            根据实例权限配置修改ObjectQuery
            </summary>
            <param name="nowQuery">当前查询</param>
            <param name="busObjId">业务对象ID</param>
            <param name="proClass">实例保护类</param>
            <param name="roleId">角色ID</param>
            <param name="operId">操作员ID</param>
            <returns>ObjectQuery</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.CriteriaBuilderForObjectQuery(System.Type,System.Object[],VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass,System.Int64,System.Int64,System.String)">
            <summary>
            如果方法名称是"ObjectQuery",根据实例权限修改查询条件
            </summary>
            <param name="nowType">当前单据</param>
            <param name="insArgs">参数</param>
            <param name="proClass">实例权限保护类</param>
            <param name="roleId">角色ID</param>
            <param name="operId">操作员ID</param>
            <returns>object[]</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.CriteriaBuilderForExampleQuery(System.Type,System.Object[],VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass,System.Int64,System.Int64,System.String)">
            <summary>
            如果方法名称是"FindObjectByExample",根据实例权限修改查询条件
            </summary>
            <param name="nowType">当前单据</param>
            <param name="insArgs">参数</param>
            <param name="proClass">实例权限保护类</param>
            <param name="roleId">角色ID</param>
            <param name="operId">操作员ID</param>
            <returns>object[]</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.CriteriaBuilderForGet(System.Type,System.Object[],VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass,System.Int64,System.Int64,System.String)">
            <summary>
            如果方法名称是"Get",根据实例权限修改查询条件
            </summary>
            <param name="nowType">当前单据</param>
            <param name="insArgs">参数</param>
            <param name="proClass">实例权限保护类</param>
            <param name="roleId">角色ID</param>
            <param name="operId">操作员ID</param>
            <returns>object[]</returns>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Security.InstanceSecurity.Service.InstanceSecurityManager.CriteriaBuilderForListAll(System.Type,System.Object[],VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.ProtectedClass,System.Int64,System.Int64,System.String)">
            <summary>
            如果方法名称是"ListAll",根据实例权限修改查询条件
            </summary>
            <param name="nowType">当前单据</param>
            <param name="insArgs">参数</param>
            <param name="proClass">实例权限保护类</param>
            <param name="roleId">角色ID</param>
            <param name="operId">操作员ID</param>
            <returns>object[]</returns>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsBusinessOrgPermission">
            <summary>
            实例权限关于业务机构树遍历许可
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsBusinessOrgPermission.InsLevel">
            <summary>
            实例权限级别
            0 God 1 SuperAdmin 2 Admin 3 Operator
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsBusinessOrgPermission.PermitId">
            <summary>
            指定设置实例权限树的起始节点的ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.InsBusinessOrgPermission.PermitSyscode">
            <summary>
            指定设置实例权限树的起始节点的Syscode
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Remoting.RemotServer.AppContext.AppContextValue">
            <summary>
            DBConfigure
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Disconnected.AppModelProxy">
            <summary>
            离线代理
            use case 1:客户端调用非控制的服务方法，则直接调用远程服务
            use case 2:客户端调用查询性方法，则调用本地服务
            use case 3:客户端调用修改性方法，则首先调用远程服务，然后广播修改命令
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Disconnected.AppModelProxy.ProxyedComponentName">
            <summary>
            被代理的组件名称
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Disconnected.AppModelProxy.LocalApp">
            <summary>
            本地逻辑程序
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Disconnected.AppModelProxy.AppManager">
            <summary>
            离线程序组管理器
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.KeyGenerator">
            <summary>
            键值生存器。
            根据方法调用，生成hashcode值,供缓存使用
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.ClientSideCache.ClientCacheService">
            <summary>
            客户端缓存刷新服务
            </summary>
        </member>
        <member name="M:VirtualMachine.SystemAspect.Cache.ClientSideCache.ClientCacheService.RemoveRedundantPartitions">
            <summary>
            删除多余的区间版本记录
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Cache.ClientSideCache.CachePartition">
            <summary>
            Cache区间和远程CacheMediator的对应关系
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.StructureTreePattern.Service.StructureTreeService">
            <summary>
            结构树服务
            </summary>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Service.StructureTreeService.SaveStructureTree(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree)">
            <summary>
            保存结构树
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Service.StructureTreeService.DeleteStructureTree(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree)">
            <summary>
            删除结构树
            </summary>
            <param name="tree"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Service.StructureTreeService.GetStructureTreeByType(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            根据结构树分类获取结构树(维护界面用的)
            </summary>
            <param name="treeType"></param>
            <param name="oq"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Service.StructureTreeService.GetStructureTreeByType(System.Type)">
            <summary>
            根据结构树分类获取结构树(通用的)
            </summary>
            <param name="treeType"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Patterns.StructureTreePattern.Service.StructureTreeService.AddRoot(VirtualMachine.Patterns.StructureTreePattern.Domain.StructureTree,VirtualMachine.Patterns.StructureTreePattern.Domain.StructureNode)">
            <summary>
            增加树的根节点
            </summary>
            <param name="tree"></param>
            <param name="node"></param>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn">
            <summary>
            数据表字段
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.ColumnName">
            <summary>
            字段名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.PropName">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.ShowName">
            <summary>
            描述名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.ColumnType">
            <summary>
            字段数据库中类型
            0 字符 1 数值 2 日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.BelongTable">
            <summary>
            归属表
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.ForeignTable">
            <summary>
            外联表
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.ForeignColumn">
            <summary>
            外联属性
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassColumn.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.Expression.FetchMode">
            <summary>
            Represents a fetching strategy.
            </summary>
            <remarks>
            This is used together with the <see cref="!:ICriteria"/> API to specify
            runtime fetching strategies.
            <para>
            For Hql queries, use the <c>FETCH</c> keyword instead.
            </para>
            </remarks>
        </member>
        <member name="F:VirtualMachine.Core.Expression.FetchMode.Default">
            <summary>
            Default to the setting configured in the mapping file.
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Expression.FetchMode.Select">
            <summary>
            Fetch eagerly, using a separate select. Equivalent to
            <c>fetch="select"</c> (and <c>outer-join="false"</c>)
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.Expression.FetchMode.Join">
            <summary>
            Fetch using an outer join.  Equivalent to
            <c>fetch="join"</c> (and <c>outer-join="true"</c>)
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.AppContainer">
            <summary>
            程序容器
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.AppContainer.StartApp(System.String)">
            <summary>
            转化并且启动程序，并且将它设为默认的程序
            </summary>
            <param name="appName"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.AppContainer.AddAssembly(System.String,System.String)">
            
            <param name="appName"></param>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.AppContainer.AddApp(System.String)">
            <summary>
            添加一个程序，如果appName已存在则直接返回它
            如果appName不存在，则创建一个新的Application
            并且为它指定默认的编译器和运行时MemoryDaoTransform
            并且为它指定默认的CodeBaseDir
            </summary>
            <param name="appName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.AppContainer.GetObject(System.String)">
            <param name="componentName"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.AppContainer.GetObject(System.String,System.String)">
            
            <param name="appName"></param>
            <param name="componentName"></param>
        </member>
        <member name="M:VirtualMachine.Core.AppHost.AppContainer.InjectComponentToApp(System.String,System.String)">
            <summary>
            注射组件到程序
            </summary>
            <param name="componentName"></param>
            <param name="appName"></param>
        </member>
        <member name="F:VirtualMachine.Core.AppHost.PreDefinedTransform.DefaultTransform">
            <summary>
            按照NHibernate+Spring的结构转化和执行程序集
            前置条件：程序集满足规范(运行程序集校验程序显示通过)
            后置条件：Spring配置文件已生成，NHibernate的Map文件已生成，数据库已生成
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.AppHost.PreDefinedTransform.MemoryDaoTransform">
            <summary>
            按照MemoryDao+Spring的结构转化和执行程序集
            前置条件：程序集满足规范(运行程序集校验程序显示通过)
            后置条件：Spring配置文件已生成.
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.AppHost.PreDefinedTransform.TransformScriptForSqlServer">
            <summary>
            不要使用此转化器
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.AppHost.PreDefinedTransform.DoNothing">
            <summary>
            不作任何转化，直接运行程序
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Generator.Domain.BillCodeGenerator">
            <summary>
            单据号生成规则
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.Prefix">
            <summary>
            单据号前缀
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.IsYear">
            <summary>
            是否加入年份标识
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.IsMonth">
            <summary>
            是否加入月份标识
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.IsDay">
            <summary>
            是否加入日期标识
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.MaxNum">
            <summary>
            最大号
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.IsRetSetEveryDay">
            <summary>
            是否每日置0
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.NumLength">
            <summary>
            最大号标准长度
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.UpdateDate">
            <summary>
            最后更新日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.Generator.Domain.BillCodeGenerator.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.DataAccess.DataAccessUtil">
            <summary>
            数据库操作静态方法
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.DataAccess.DataAccessUtil.ConvertDataReadertoDataSet(System.Data.IDataReader)">
            <summary>
            DataReader转化成DataSet
            </summary>
            <param name="reader">DataReader</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:VirtualMachine.Component.LogService.MsmqLogService">
            <summary>
            基于windows消息服务实现的日志服务
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.LogInstanceInfo">
            <summary>
            权限登录信息
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.LogInstanceInfo.LogInRole">
            <summary>
            登录角色ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.LogInstanceInfo.LogInPerson">
            <summary>
            登录人员ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.LogInstanceInfo.LogInSyscode">
            <summary>
            登录角色Syscode
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.LogInstanceInfo.ContextGroupName">
            <summary>
            当前帐套名
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.LogInstanceInfo.LoginTime">
            <summary>
            登录时间
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Security.InstanceSecurity.Domain.LogInstanceInfo.Data">
            <summary>
            其他数据
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition">
            <summary>
            确定内存对象实例条件
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition.ConProp">
            <summary>
            属性
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition.CompareMark">
            <summary>
            比较符 0 等于 1 大于等于 2 小于等于 3 不等于
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition.ValueType">
            <summary>
            值类型 0 字符 1 long 2 int 3 日期
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition.CompareValue">
            <summary>
            比较值
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Persistent.Domain.MemoryCondition.MainClass">
            <summary>
            主类
            </summary>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Log.ITrackable">
            <summary>
            状态跟踪introduce的接口
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.SystemAspect.Log.ITrackable.GetDirtyProperties" -->
        <member name="M:VirtualMachine.SystemAspect.Log.ITrackable.ChangeProperty(System.Object,System.String,System.Object)">
            <summary>
            修改属性
            </summary>
            <param name="target">目标对象</param>
            <param name="propName">属性名称</param>
            <param name="newValue">修改后的值</param>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Log.TrackableImpl">
            <summary>
            状态跟踪introduce
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:VirtualMachine.SystemAspect.Log.TrackableImpl.GetDirtyProperties" -->
        <member name="M:VirtualMachine.SystemAspect.Log.TrackableImpl.ChangeProperty(System.Object,System.String,System.Object)">
            <summary>
            修改属性
            </summary>
            <param name="target">目标对象</param>
            <param name="propName">属性名称</param>
            <param name="newValue">修改后的值</param>
        </member>
        <member name="T:VirtualMachine.SystemAspect.Log.TrackAspect">
            <summary>
            域对象属性变化拦截器
            </summary>
        </member>
        <member name="P:VirtualMachine.SystemAspect.Log.ServiceLog.Domain.MethodLog.Parameters">
            <summary>
            方法参数：一组ParameterLog
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.MethodData">
            <summary>
            域方法数据字典
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.MethodData.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.MethodData.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.MethodData.Name">
            <summary>
            方法名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.MethodData.MethodAlias">
            <summary>
            方法别名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.MethodData.MethodDesc">
            <summary>
            方法说明
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.MethodData.TheClass">
            <summary>
            类数据字典
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.MethodData.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:VirtualMachine.Patterns.DataDictionary.Domain.ClassData">
            <summary>
            类数据字典
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.Id">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.BusinessPart">
            <summary>
            业务环节
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.Name">
            <summary>
            类名称
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.ClassAlias">
            <summary>
            类别名
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.ClassDesc">
            <summary>
            类简短描述
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.ClassCode">
            <summary>
            类分类代码
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.Remark">
            <summary>
            备注
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.ControlMark">
            <summary>
            控制标志
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.InstanceDesc">
            <summary>
            实例含义
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.Creator">
            <summary>
            创建者
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.CreateDate">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.Propertys">
            <summary>
            属性描述
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.Methods">
            <summary>
            方法描述
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.RelateBusObject">
            <summary>
            类所属的业务对象
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:VirtualMachine.Patterns.DataDictionary.Domain.ClassData.ClsDataTable">
            <summary>
            数据表
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.MemoryDaoImpl.Min(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最小值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最小值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.MemoryDaoImpl.Average(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求最平均值
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最平均值的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.MemoryDaoImpl.Sum(System.Type,System.String,VirtualMachine.Core.ObjectQuery)">
            <summary>
            求和
            </summary>
            <param name="clazz">类型</param>
            <param name="path">求最和的字段</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.MemoryDaoImpl.Count(System.Type,VirtualMachine.Core.ObjectQuery)">
            <summary>
            计数
            </summary>
            <param name="clazz">类型</param>
            <param name="where">限制条件，其中this表示当前对象</param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Core.Expression.Order">
            <summary>
            Represents an order imposed upon a <see cref="!:ICriteria"/>
            result set.
            </summary>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Order.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for Order.
            </summary>
            <param name="propertyName"></param>
            <param name="ascending"></param>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Order.Asc(System.String)">
            <summary>
            Ascending order
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Core.Expression.Order.Desc(System.String)">
            <summary>
            Descending order
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="T:VirtualMachine.Core.Attributes.AggregateAttribute">
            <summary>
            Uml中的Aggregate关系
            map文件中的Cascade策略为SaveOrUpdate
            </summary>
        </member>
        <member name="T:VirtualMachine.Core.AppHost.Application">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.Application.Data">
            <summary>
            供Transform写自己的配置信息
            </summary>
        </member>
        <member name="P:VirtualMachine.Core.AppHost.Application.Assemblys">
            <summary>
            Application的程序集。只包含业务程序集（没有界面和技术相关程序集）
            </summary>
        </member>
        <member name="T:VirtualMachine.Component.Util.FastPropertyAccessor.FastPropertyRetrieve">
            <summary>
            对象属性访问器，比反射快很多
            用法
            FastPropertyRetrieve propertyService = FastPropertyRetrieve.Instance();
            propertyService.RegisterAssembly(@"C:\VirtualMachine\VirtualMachineTest\bin\Debug\VirtualMachineTest.dll");
            propertyService.Set(targetObject, "PropertyName", "PropertyValue");        
            string s=propertyService.Get(targetObject,"PropertyName");
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.FastPropertyRetrieve.Instance">
            <summary>
            获得对象属性访问器单子实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.FastPropertyRetrieve.RegisterAssembly(System.String)">
            <summary>
            注册程序集
            为程序集中所有打有Entity标签的类生成PropertyAccessor
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.FastPropertyRetrieve.Get(System.Object,System.String)">
            <summary>
            获取一个对象的属性
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.FastPropertyRetrieve.Set(System.Object,System.String,System.Object)">
            <summary>
            设置一个对象的属性
            </summary>
            <param name="target"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.FastPropertyAccessor.FastPropertyRetrieve.CopyObject(System.Object,System.Object)">
            <summary>
            拷贝对象，只拷贝对象的基础数据类型字段(值类型或字符串)
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClassUtil.IsTypeEquals(System.Type,System.Type,System.Boolean)">
            <summary>
            比较两个类的类型是否相同
            </summary>
            <param name="classType">类的Type</param>
            <param name="targetType">目标类的Type</param>
            <param name="isInheit">子类继承比较</param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClassUtil.GetFullNameAndAssembly(System.Type)">
            <summary>
            获取类的全称和Assembly名称
            </summary>
            <param name="inClass">类</param>
            <returns>string</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClassUtil.DynamicExe(System.String,System.String,System.String)">
            <summary>
            动态执行
            </summary>
            <param name="aRefAssembly">引用的程序集</param>
            <param name="aUseNameSpace">引用的命名空间</param>
            <param name="aExeContent">执行内容</param>
            <returns>返回对象</returns>
        </member>
        <member name="M:VirtualMachine.Component.Util.ClassUtil.GetClassAndAssemblyName(System.Type)">
            <summary>
            根据类型获得类和程序集名称串
            </summary>
            <param name="aType">类型</param>
            <returns>获得的字符串</returns>
        </member>
        <member name="T:VirtualMachine.Core.DataAccess.DataAccessParameter">
            <summary>
            数据库操作参数传输用
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.DataAccess.DataAccessParameter.paramKey">
            <summary>
            参数名
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.DataAccess.DataAccessParameter.paramType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.DataAccess.DataAccessParameter.paramValue">
            <summary>
            参数值
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.DataAccess.DataAccessParameter.paramDirection">
            <summary>
            参数方向 0 in 1 out
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.DataAccess.DataAccessParameter.paraOutSize">
            <summary>
            传出参数大小
            </summary>
        </member>
        <member name="F:VirtualMachine.Core.DataAccess.DataAccessParameter.isQuery">
            <summary>
            传入参数是否为Query
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:encrypt.Register.JhEncrypt.#ctor" -->
        <!-- Badly formed XML comment ignored for member "M:encrypt.Register.JhEncrypt.Encrypt(System.String)" -->
        <member name="M:encrypt.Register.JhEncrypt.Decrypt(System.String)">
            <summary>
            使用缺省密钥解密
            </summary>
            <param name="original">密文</param>
            <returns>明文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Decrypt(System.String,System.String)">
            <summary>
            使用给定密钥解密
            </summary>
            <param name="original">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Decrypt(System.String,System.Text.Encoding)">
            <summary>
            使用缺省密钥解密,返回指定编码方式明文
            </summary>
            <param name="original">密文</param>
            <param name="encoding">编码方式</param>
            <returns>明文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Encrypt(System.String,System.String)">
            <summary>
            使用给定密钥加密
            </summary>
            <param name="original">原始文字</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>密文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            使用给定密钥解密
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <param name="encoding">字符编码方案</param>
            <returns>明文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.MakeMD(System.Byte[])">
            <summary>
            生成MD摘要
            </summary>
            <param name="original">数据源</param>
            <returns>摘要</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥加密
            </summary>
            <param name="original">明文</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Decrypt(System.Byte[],System.Byte[])">
            <summary>
            使用给定密钥解密数据
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Encrypt(System.Byte[])">
            <summary>
            使用给定密钥加密
            </summary>
            <param name="original">原始数据</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:encrypt.Register.JhEncrypt.Decrypt(System.Byte[])">
            <summary>
            使用缺省密钥解密数据
            </summary>
            <param name="encrypted">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="T:VirtualMachine.Component.ExceptionHandle.ExceptionConfig">
            <summary>
            自定义异常信息配置类
            </summary>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.AddConfig(VirtualMachine.Component.ExceptionHandle.ExceptionConfig)">
            <summary>
            增加配置信息
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.UpdateConfig(VirtualMachine.Component.ExceptionHandle.ExceptionConfig)">
            <summary>
            修改配置信息
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.DeleteConfig(VirtualMachine.Component.ExceptionHandle.ExceptionConfig)">
            <summary>
            删除配置信息
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.GetConfig(System.String)">
            <summary>
            获取配置信息
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.GetAllConfig">
            <summary>
            获取所有配置信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.filePath">
            <summary>
            异常配置信息文件路径
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.Code">
            <summary>
            异常编号
            </summary>
        </member>
        <member name="P:VirtualMachine.Component.ExceptionHandle.ExceptionConfig.Message">
            <summary>
            异常信息
            </summary>
        </member>
    </members>
</doc>
